using EternalLandPlugin.Account;
using EternalLandPlugin.Net;
using MessagePack;
using Microsoft.Xna.Framework;
using OTAPI.Tile;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;
using System.Threading.Tasks;
using Terraria;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Events;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.ID;
using Terraria.Localization;
using Terraria.ObjectData;
using Terraria.Social;
using Terraria.Utilities;
using TShockAPI;
using static Terraria.Framing;
using Chest = EternalLandPlugin.Game.MapTools.Chest;
using Color = Microsoft.Xna.Framework.Color;
using Liquid = EternalLandPlugin.Game.MapTools.Liquid;
using LiquidBuffer = EternalLandPlugin.Game.MapTools.LiquidBuffer;
using Point = Microsoft.Xna.Framework.Point;
using Point16 = EternalLandPlugin.Game.MapManager.MapData.Point16;
using Sign = EternalLandPlugin.Game.MapTools.Sign;

namespace EternalLandPlugin.Game
{
    public class MapManager
    {
        public static UnifiedRandom Rand = new UnifiedRandom();
        [MessagePackObject(keyAsPropertyName: true)]
        [Serializable]
        public class MapData : IDisposable, ICloneable
        {
            object ICloneable.Clone()
            {
                return this.Clone();
            }
            public async Task<MapData> Clone()
            {
                return await Task.Run(() =>
                {
                    return MessagePackSerializer.Deserialize<MapData>(MessagePackSerializer.Serialize(this));
                });
            }
            public void Dispose()
            {
                Chest = null;
                Tile.Dispose();
                Tile = null;
                Sign.Clear();
                Player.Clear();
            }
            public MapData(Point topleft, Point bottomright, string name = "UnKnown", Guid uuid = default, int owner = -1, bool keepalive = false)
            {
                UUID = uuid;
                Name = name;
                Owner = owner;
                KeepAlive = keepalive;
                ReadTile(topleft.X, topleft.Y, bottomright.X - topleft.X, bottomright.Y - topleft.Y);
            }

            public MapData(int StartX, int StartY, int width, int height, string name = "UnKnown", Guid uuid = default, int owner = -1, bool keepalive = false)
            {
                UUID = uuid;
                Name = name;
                Owner = owner;
                KeepAlive = keepalive;
                ReadTile(StartX, StartY, width, height);
            }

            public MapData(FakeTileProvider data, int startx, int starty, Guid uuid = default)
            {
                UUID = uuid;
                Width = data.Width;
                Height = data.Height;
                StartX = startx;
                StartY = starty;
                Tile = data;
            }
            [SerializationConstructor]
            public MapData()
            {
                Width = Main.maxTilesX;
                Height = Main.maxTilesY;
                StartX = 0;
                StartY = 0;
                Tile = new FakeTileProvider(0, 0);
                Initialize();
            }
            public void Save()
            {
                if (Owner == -1) DataBase.SaveMap(Name, this);
                else DataBase.SaveMap(UUID.ToString(), this);
            }
            void ReadTile(int StartX, int StartY, int width, int height)
            {
                /*await Task.Run(() =>
                {*/
                Initialize();
                Height = height;
                Width = width;
                Tile = new FakeTileProvider(width, height);
                int y = 0;
                int chest = 0;
                int sign = 0;
                for (int tiley = StartY; y < Height; tiley++)
                {
                    int x = 0;
                    for (int tilex = StartX; x < Width; tilex++)
                    {
                        try
                        {
                            ITile temptile = Main.tile[tilex, tiley];
                            Tile[x, y].CopyFrom(temptile);
                            if ((TileID.Sets.BasicChest[(int)temptile.type] && temptile.frameX % 36 == 0 && temptile.frameY % 36 == 0) || (temptile.type == 88 && temptile.frameX % 54 == 0 && temptile.frameY % 36 == 0))
                            {
                                int chestid = (short)Terraria.Chest.FindChest(tilex, tiley);
                                if (chestid != -1)
                                {
                                    var temp = Main.chest[chestid];
                                    Chest.Add(new Chest() { name = temp.name, bankChest = temp.bankChest, item = temp.item.ToEItems(), frame = temp.frame, frameCounter = temp.frameCounter, x = x, y = y });
                                    chest++;
                                }
                            }
                            if ((temptile.type == 85 | temptile.type == 55 || temptile.type == 425) && temptile.frameX % 36 == 0 && temptile.frameY % 36 == 0)
                            {
                                int signid = (short)Terraria.Sign.ReadSign(tilex, tiley, false);
                                if (signid != -1)
                                {
                                    var temp = Main.sign[signid];
                                    Sign.Add(new Sign() { x = x, y = y, text = temp.text });
                                    sign++;
                                }
                            }
                            /*if (temptile.liquid != 0)
                            {
                                Liquid[numLiquid].x = x;
                                Liquid[numLiquid].y = y;
                                Liquid[numLiquid].kill = 0;
                                Liquid[numLiquid].delay = 0;
                                numLiquid++;
                            }*/
                        }
                        catch (Exception ex) { Console.WriteLine($"{ex}\n世界坐标: {tilex} - {tiley} , 相对坐标: {x} - {y}"); }
                        x++;
                    }
                    y++;
                }
                // });
            }
            internal void ApplyTiles(FakeTileProvider Tiles, int AbsoluteX, int AbsoluteY)
            {
                for (int y = AbsoluteY; y < AbsoluteY + Height; y++)
                {
                    for (int x = AbsoluteX; x < AbsoluteX + Width; x++)
                    {
                        Tiles[x - AbsoluteX, y - AbsoluteY].CopyFrom(Tile[x - AbsoluteX, y - AbsoluteY] ?? new Tile());
                    }
                }
                /*Intersect(AbsoluteX, AbsoluteY, Tiles.GetLength(0), Tiles.GetLength(1), out var RX, out var RY, out var RWidth, out var RHeight);
                int num = RX + RWidth;
                int num2 = RY + RHeight;
                for (int i = RX; i < num; i++)
                {
                    for (int j = RY; j < num2; j++)
                    {
                        //Console.WriteLine(Utils.GetItemFromTile(tilex, tiley, temptile));
                        ITile tile = Tile[i - X, j - Y];
                        if (tile != null)
                        {
                            Tiles[i - RX, j - AbsoluteY] = tile;
                        }
                    }
                }*/
            }
            public void SendDataToPlayer(PacketTypes msgType, string text = "", int number = 0, float number2 = 0f, float number3 = 0f, float number4 = 0f, int number5 = 0)
            {
                Player.ForEach(p =>
                {
                    if (UserManager.GetTSPlayerFromID(p, out var tsp))
                    {
                        if (!tsp.RealPlayer || tsp.ConnectionAlive)
                        {
                            NetMessage.SendData((int)msgType, tsp.Index, 255, NetworkText.FromLiteral(text), number, number2, number3, number4, number5);
                        }
                    }
                });
            }
            public void SendDataToPlayer(int msgType, int remote, int ignore, string text = "", int number = 0, float number2 = 0f, float number3 = 0f, float number4 = 0f, int number5 = 0)
            {
                Player.ForEach(p =>
                {
                    if (UserManager.GetTSPlayerFromID(p, out var tsp))
                    {
                        if (tsp.RealPlayer && tsp.ConnectionAlive)
                        {
                            NetMessage.SendData(msgType, tsp.Index, 255, NetworkText.FromLiteral(text), number, number2, number3, number4, number5);
                        }
                    }
                });
            }
            /// <summary>
            /// 
            /// </summary>
            /// <param name="realx">玩家所在的X坐标</param>
            /// <param name="realy">玩家所在的Y坐标</param>
            /// <returns></returns>
            public async Task<FakeTileProvider> GetChuck(int realx, int realy)
            {
                return await Task.Run(() =>
                {
                    FakeTileProvider tiles = new FakeTileProvider(ChuckSize, ChuckSize);
                    for (int tiley = realy; tiley < realy + ChuckSize; tiley++)
                    {
                        for (int tilex = realx; tilex < realx + ChuckSize; tilex++)
                        {
                            if (tilex < StartX + Width && tilex > StartX && tiley < StartY + Height && tiley > StartY)
                            {
                                tiles[tilex - realx, tiley - realy].CopyFrom(Tile[tilex - StartX, tiley - StartY] ?? new Tile());
                            }
                            else
                            {
                                tiles[tilex - realx, tiley - realy].CopyFrom(new Tile());
                            }
                        }
                    }
                    return tiles;
                });
            }
            /// <summary>
            /// 获取指定坐标在此地图内的相对坐标
            /// </summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="RX"></param>
            /// <param name="RY"></param>
            /// <returns></returns>
            public bool GetRelative(int x, int y, out int RX, out int RY)
            {
                if (StartX == -1 || StartY == -1)
                {
                    RX = -1;
                    RY = -1;
                    return false;
                }
                else
                {
                    RX = StartX <= x ? x - StartX : 0;
                    RY = StartY <= y ? y - StartY : 0;
                    return true;
                }
            }
            /// <summary>
            /// 获取相对坐标在世界内的绝对坐标
            /// </summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="AX"></param>
            /// <param name="AY"></param>
            /// <returns></returns>
            public bool GetAbslute(int x, int y, out int AX, out int AY)
            {
                if (StartX == -1 || StartY == -1)
                {
                    AX = -1;
                    AY = -1;
                    return false;
                }
                else
                {
                    AX = x >= 0 && x < Width ? StartX + x : x < Width ? StartX : StartX + Width;
                    AY = y >= 0 && x < Height ? StartY + y : y < Height ? StartY : StartY + Height;
                    return true;
                }
            }
            public void SetSpawn(int relativex, int relativey) => GetAbslute(relativex, relativey, out SpawnX, out SpawnY);
            public void SendTileSquare(int whoAmi, int tileX, int tileY, int size, TileChangeType changeType = TileChangeType.None)
            {
                int num = (size - 1) / 2;
                GetAllPlayers().ForEach(e =>
                {
                    SendSquare(num, tileX, tileY, this, e, 0);
                });
                //SendDataToPlayer((PacketTypes)20, null, size, tileX - num, tileY - num, 0f, (int)changeType);
                //WorldGen.RangeFrame(tileX - num, tileY - num, tileX - num + size, tileY - num + size);
            }
            public bool IsInMap(int x, int y)
            {
                if (x >= StartX && x <= StartX + Width && y >= StartY && y <= StartY + Height)
                {
                    return true;
                }
                return false;
            }
            public List<EPlayer> GetAllPlayers()
            {
                List<EPlayer> list = new List<EPlayer>();
                try
                {
                    Player.ForEach(p =>
                    {
                        if (UserManager.TryGetEPlayerFromID(p, out var eplr)) list.Add(eplr);
                        else Player.Remove(p);
                    });
                }
                catch { }
                return list;
            }
            public int FindChest(int X, int Y)
            {
                if (GetRelative(X, Y, out int x, out int y))
                {
                    var list = Chest.Where(c => c != null && c.x == x && c.y == y).ToList();
                    if (list.Any()) return Chest.IndexOf(list[0]);
                }
                return -1;
            }

            public string Name = "UnKnown";
            public int Owner = -1;
            public bool KeepAlive = false;
            public static readonly int ChuckSize = 100;
            public bool Origin = false;
            public int StartX = -1;
            public int StartY = -1;
            public int Width;
            public int Height;
            public int SpawnX = -1;
            public int SpawnY = -1;
            public int MaxTilesX => StartX + Width;
            public int MaxTilesY => StartY + Height;
            public Guid UUID = Guid.Empty;
            public Liquid[] Liquid = new Liquid[25000];
            public LiquidBuffer[] LiquidBuffer = new LiquidBuffer[50000];
            public List<int> Player = new List<int>();
            public List<Chest> Chest = new List<Chest>();
            public List<Sign> Sign = new List<Sign>();
            //public Projectile[] Proj = new Projectile[1000];
            //public NPC[] Npc = new NPC[1000];
            //public ITile[,] Tile;
            /// <summary>
            /// 使用相对坐标操作地图
            /// </summary>
            public FakeTileProvider Tile
            {
                get;
                set;
            }
            /// <summary>
            /// 使用绝对坐标操作地图
            /// </summary>
            /// <param name="ax"></param>
            /// <param name="ay"></param>
            /// <returns></returns>
            public ITile this[int ax, int ay]
            {
                get
                {
                    if (GetRelative(ax, ay, out int rx, out int ry))
                    {
                        return Tile[rx, ry];
                    }
                    else
                    {
                        return new Tile();
                    }
                }
                set
                {
                    if (GetRelative(ax, ay, out int rx, out int ry))
                    {
                        Tile[rx, ry] = value;
                    }
                }
            }
            public void Initialize()
            {
                InitializeMinecart();
                InitializeWiring();
                for (int j = 0; j < maxLiquid; j++)
                {
                    Liquid[j] = new Liquid();
                }
                for (int k = 0; k < 50000; k++)
                {
                    LiquidBuffer[k] = new LiquidBuffer();
                }
            }

            #region 一些操作物块的方法
            public int ReadSign(int x, int y, bool CreateIfMissing = true)
            {
                int num = this[x, y].frameX / 18;
                int num2 = this[x, y].frameY / 18;
                num %= 2;
                int num3 = x - num;
                int num4 = y - num2;
                if (!Main.tileSign[this[num3, num4].type])
                {
                    KillSign(num3, num4);
                    return -1;
                }
                int num5 = -1;
                if (GetRelative(x, y, out int X, out int Y))
                {
                    var list = Sign.Where(s => s != null && s.x == X && s.y == Y).ToList();
                    if (list.Any()) num5 = Sign.IndexOf(list[0]);
                    if (num5 < 0 && CreateIfMissing)
                    {
                        num5 = Sign.Count;
                        AddSign(x, y);
                    }
                }
                return num5;
            }
            public void AddSign(int x, int y, string text = "")
            {
                if (GetRelative(x, y, out int X, out int Y) && ReadSign(x, y, false) == -1)
                {
                    Sign.Add(new Sign() { x = X, y = Y, text = text });
                }

            }
            public bool ReplaceWall(int x, int y, ushort targetWall)
            {
                if (targetWall >= 316)
                {
                    return false;
                }
                ITile tile = this[x, y];
                if (tile.wall == 0 || targetWall == 0)
                {
                    return false;
                }
                if (WorldGen.KillWall_CheckFailure(fail: false, tile))
                {
                    return false;
                }
                KillWall_DropItems(x, y, tile);
                tile.wall = targetWall;
                tile.wallColor(0);
                SquareWallFrame(x, y);
                return true;
            }
            public bool WouldTileReplacementWork(ushort attemptingToReplaceWith, int x, int y)
            {
                ITile tile = this[x, y];
                if (attemptingToReplaceWith >= 623)
                {
                    return false;
                }
                if (TileID.Sets.Conversion.Grass[attemptingToReplaceWith])
                {
                    return false;
                }
                bool flag = !WorldGen.ReplaceTile_IsValidSolid(attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidSolid(tile.type);
                bool num = !WorldGen.ReplaceTile_IsValidPlatform(attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidPlatform(tile.type);
                bool flag2 = (!WorldGen.ReplaceTile_IsValidSolid(attemptingToReplaceWith) && !WorldGen.ReplaceTile_IsValidPlatform(attemptingToReplaceWith)) || (!WorldGen.ReplaceTile_IsValidSolid(tile.type) && !WorldGen.ReplaceTile_IsValidPlatform(tile.type));
                bool flag3 = !WorldGen.ReplaceTile_IsValidChest(attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidChest(tile.type);// || Chest.IsLocked(tile);
                bool flag4 = !WorldGen.ReplaceTile_IsValidDresser(attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidDresser(tile.type);
                return !(num && flag && flag2 && flag3 && flag4);
            }
            public bool ReplaceTile(int x, int y, ushort targetType, int targetStyle)
            {
                ITile tileSafely = GetTileSafely(x, y);
                if (!WouldTileReplacementWork(targetType, x, y))
                {
                    return false;
                }
                if (!IsTileReplacable(x, y))
                {
                    return false;
                }
                WorldGen.MoveReplaceTileAnchor(ref x, ref y, targetType, tileSafely);
                KillTile_DropItems(x, y, tileSafely, includeLargeObjectDrops: true);
                AttemptFossilShattering(x, y, tileSafely, fail: false);
                ReplaceTIle_DoActualReplacement(targetType, targetStyle, x, y, tileSafely);
                return true;
            }
            public bool IsChestRigged(int x, int y)
            {
                if (this[x, y].type == 467)
                {
                    return this[x, y].frameX / 36 == 4;
                }
                return false;
            }
            public void ReplaceTIle_DoActualReplacement(ushort targetType, int targetStyle, int topLeftX, int topLeftY, ITile t)
            {
                if (TileID.Sets.BasicChest[targetType])
                {
                    if (IsChestRigged(topLeftX, topLeftY) && Main.netMode != 1)
                    {
                        HitSwitch(topLeftX, topLeftY);
                        SendDataToPlayer(59, -1, -1, null, topLeftX, topLeftY);
                    }
                    ReplaceTile_DoActualReplacement_Area(targetType, targetStyle, topLeftX, topLeftY, 2, 2);
                }
                else if (TileID.Sets.BasicDresser[targetType])
                {
                    ReplaceTile_DoActualReplacement_Area(targetType, targetStyle, topLeftX, topLeftY, 3, 2);
                }
                else
                {
                    ReplaceTile_DoActualReplacement_Single(targetType, targetStyle, topLeftX, topLeftY, t);
                }
            }

            public void ReplaceTile_DoActualReplacement_Single(ushort targetType, int targetStyle, int topLeftX, int topLeftY, ITile t)
            {
                ReplaceTile_EliminateNaturalExtras(topLeftX, topLeftY);
                int type = t.type;
                t.type = targetType;
                if (TileID.Sets.Platforms[t.type])
                {
                    t.frameY = (short)(targetStyle * 18);
                }
                t.color(0);
                bool flag = !CanPoundTile(topLeftX, topLeftY);
                if (TileID.Sets.Platforms[type] && TileID.Sets.Platforms[t.type])
                {
                    flag = false;
                }
                if (flag)
                {
                    t.slope(0);
                    t.halfBrick(halfBrick: false);
                }
                SquareTileFrame(topLeftX, topLeftY);
            }
            public bool InWorld(int x, int y, int fluff = 0)
            {
                if (x < fluff || x >= StartX + Width - fluff || y < fluff || y >= StartY + Height - fluff)
                {
                    return false;
                }
                return true;
            }
            public void ReplaceTile_EliminateNaturalExtras(int x, int y)
            {
                if (InWorld(x, y, 2))
                {
                    if (this[x, y - 1] != null && this[x, y - 1].active() && (TileID.Sets.ReplaceTileBreakUp[this[x, y - 1].type] || (this[x, y - 1].type == 165 && (this[x, y - 1].frameY == 36 || this[x, y - 1].frameY == 54 || this[x, y - 1].frameY == 90))))
                    {
                        KillTile(x, y - 1);
                    }
                    if (this[x, y + 1] != null && this[x, y + 1].active() && (TileID.Sets.ReplaceTileBreakDown[this[x, y + 1].type] || (this[x, y + 1].type == 165 && (this[x, y + 1].frameY == 0 || this[x, y + 1].frameY == 18 || this[x, y + 1].frameY == 72))))
                    {
                        KillTile(x, y + 1);
                    }
                }
            }

            public void ReplaceTile_DoActualReplacement_Area(ushort targetType, int targetStyle, int topLeftX, int topLeftY, int areaSizeX, int areaSizeY)
            {
                for (int i = 0; i < areaSizeX; i++)
                {
                    for (int j = 0; j < areaSizeY; j++)
                    {
                        ITile tile = this[topLeftX + i, topLeftY + j];
                        tile.type = targetType;
                        tile.frameX = (short)(targetStyle * (areaSizeX * 18) + i * 18);
                        tile.frameY = (short)(j * 18);
                        tile.color(0);
                    }
                }
                for (int k = 0; k < areaSizeX; k++)
                {
                    for (int l = 0; l < areaSizeY; l++)
                    {
                        SquareTileFrame(topLeftX + k, topLeftY + l);
                    }
                }
            }
            public bool IsTileReplacable(int x, int y)
            {
                ITile tile = this[x, y];
                if (y >= 1)
                {
                    ITile tile2 = this[x, y - 1];
                    if (tile == null || tile2 == null)
                    {
                        return false;
                    }
                    if (tile2.active())
                    {
                        if (tile2.type == 80)
                        {
                            return false;
                        }
                        if (tile2.type == 488)
                        {
                            return false;
                        }
                        if (TileID.Sets.PreventsTileReplaceIfOnTopOfIt[tile2.type] && tile.type != tile2.type)
                        {
                            if (TileID.Sets.IsATreeTrunk[tile2.type])
                            {
                                if ((tile2.frameX == 66 && tile2.frameY >= 0 && tile2.frameY <= 44) || (tile2.frameX == 88 && tile2.frameY >= 66 && tile2.frameY <= 110) || tile2.frameY >= 198)
                                {
                                    return true;
                                }
                                return false;
                            }
                            if (tile2.type == 323)
                            {
                                if (tile2.frameX == 66 || tile2.frameX == 220)
                                {
                                    return false;
                                }
                                return true;
                            }
                            return false;
                        }
                    }
                }
                return true;
            }
            public void KillWall(int i, int j, bool fail = false)
            {
                if (i < 0 || j < 0 || i >= MaxTilesX || j >= MaxTilesY)
                {
                    return;
                }
                ITile tile = this[i, j];
                if (tile == null)
                {
                    tile = CreateTile();
                    this[i, j] = tile;
                }
                if (tile.wall <= 0)
                {
                    return;
                }
                fail = WorldGen.KillWall_CheckFailure(fail, tile);
                if (fail)
                {
                    SquareWallFrame(i, j);
                    return;
                }
                KillWall_DropItems(i, j, tile);
                tile.wall = 0;
                tile.wallColor(0);
                SquareWallFrame(i, j);
                if (tile.type >= 0 && tile.type < 623 && TileID.Sets.FramesOnKillWall[tile.type])
                {
                    TileFrame(i, j);
                }
            }
            public void KillWall_DropItems(int i, int j, ITile tileCache)
            {
                int num = WorldGen.KillWall_GetItemDrops(tileCache);
                if (num > 0)
                {
                    NewItem(i * 16, j * 16, 16, 16, num);
                }
            }
            public void DeActive(int i, int j)
            {
                if (!this[i, j].active() || (this[i, j].type == 226 && (double)j > Main.worldSurface && !NPC.downedPlantBoss))
                {
                    return;
                }
                bool flag = Main.tileSolid[this[i, j].type] && !TileID.Sets.NotReallySolid[this[i, j].type];
                ushort type = this[i, j].type;
                if (type == 314 || (uint)(type - 386) <= 3u || type == 476)
                {
                    flag = false;
                }
                if (flag && (!this[i, j - 1].active() || (!TileID.Sets.BasicChest[this[i, j - 1].type] && this[i, j - 1].type != 26 && this[i, j - 1].type != 77 && this[i, j - 1].type != 88 && this[i, j - 1].type != 470 && this[i, j - 1].type != 475 && this[i, j - 1].type != 237 && this[i, j - 1].type != 597 && CanKillTile(i, j - 1))))
                {
                    this[i, j].inActive(inActive: true);
                    SquareTileFrame(i, j, resetFrame: false);
                    if (Main.netMode != 1)
                    {
                        SendTileSquare(-1, i, j, 1);
                    }
                }
            }
            public bool Actuate(int i, int j)
            {
                ITile tile = this[i, j];
                if (!tile.actuator())
                {
                    return false;
                }
                if (tile.inActive())
                {
                    ReActive(i, j);
                }
                else
                {
                    DeActive(i, j);
                }
                return true;
            }
            public void ReActive(int i, int j)
            {
                this[i, j].inActive(inActive: false);
                SquareTileFrame(i, j, resetFrame: false);
                if (Main.netMode != 1)
                {
                    SendTileSquare(-1, i, j, 1);
                }
            }
            public bool SlopeTile(int i, int j, int slope = 0, bool noEffects = false)
            {
                if (!CanPoundTile(i, j))
                {
                    return false;
                }
                this[i, j].halfBrick(halfBrick: false);
                this[i, j].slope((byte)slope);
                if (!WorldGen.gen)
                {
                    if (!noEffects)
                    {
                        KillTile(i, j, fail: true, effectOnly: true);
                    }
                    SquareTileFrame(i, j);
                    if (this[i, j].slope() == 0)
                    {
                        Rectangle rectangle = new Rectangle(i * 16, j * 16, 16, 16);
                        for (int k = 0; k < 255; k++)
                        {
                            if (!Main.player[k].dead && rectangle.Intersects(new Rectangle((int)Main.player[k].position.X, (int)Main.player[k].position.Y, Main.player[k].width, Main.player[k].height)))
                            {
                                Main.player[k].gfxOffY += Main.player[k].position.Y + (float)Main.player[k].height - (float)rectangle.Y;
                                Main.player[k].position.Y = rectangle.Y - Main.player[k].height;
                            }
                        }
                    }
                }
                return true;
            }
            public bool CanPoundTile(int x, int y)
            {
                if (this[x, y] == null)
                {
                    this[x, y] = CreateTile();
                }
                if (this[x, y - 1] == null)
                {
                    this[x, y - 1] = CreateTile();
                }
                if (this[x, y + 1] == null)
                {
                    this[x, y + 1] = CreateTile();
                }
                switch (this[x, y].type)
                {
                    case 10:
                    case 48:
                    case 137:
                    case 138:
                    case 232:
                    case 380:
                    case 387:
                    case 388:
                    case 476:
                    case 484:
                        return false;
                    default:
                        if (WorldGen.gen)
                        {
                            if (this[x, y].type == 190)
                            {
                                return false;
                            }
                            if (this[x, y].type == 30)
                            {
                                return false;
                            }
                        }
                        if (this[x, y - 1].active())
                        {
                            switch (this[x, y - 1].type)
                            {
                                case 21:
                                case 26:
                                case 77:
                                case 88:
                                case 235:
                                case 237:
                                case 441:
                                case 467:
                                case 468:
                                case 470:
                                case 475:
                                case 488:
                                case 597:
                                    return false;
                            }
                        }
                        return CanKillTile(x, y);
                }
            }
            public bool CanKillTile(int i, int j)
            {
                bool blockDamaged;
                return CanKillTile(i, j, out blockDamaged);
            }
            public bool CanKillTile(int i, int j, out bool blockDamaged)
            {
                blockDamaged = false;
                if (i < 0 || j < 0 || i >= MaxTilesX || j >= MaxTilesY)
                {
                    return false;
                }
                ITile tile = this[i, j];
                ITile tile2 = null;
                if (tile == null)
                {
                    return false;
                }
                if (!tile.active())
                {
                    return false;
                }
                if (j >= 1)
                {
                    tile2 = this[i, j - 1];
                }
                if (tile2 != null && tile2.active())
                {
                    int type = tile2.type;
                    if (TileID.Sets.IsATreeTrunk[type] && tile.type != type && (tile2.frameX != 66 || tile2.frameY < 0 || tile2.frameY > 44) && (tile2.frameX != 88 || tile2.frameY < 66 || tile2.frameY > 110) && tile2.frameY < 198)
                    {
                        return false;
                    }
                    switch (type)
                    {
                        case 323:
                            if (tile.type != type && (tile2.frameX == 66 || tile2.frameX == 220))
                            {
                                return false;
                            }
                            break;
                        case 21:
                        case 26:
                        case 72:
                        case 77:
                        case 88:
                        case 467:
                        case 488:
                            if (tile.type != type)
                            {
                                return false;
                            }
                            break;
                        case 80:
                            if (tile.type != type)
                            {
                                int num = tile2.frameX / 18;
                                if ((uint)num <= 1u || (uint)(num - 4) <= 1u)
                                {
                                    return false;
                                }
                            }
                            break;
                    }
                }
                switch (tile.type)
                {
                    case 10:
                        if (IsLockedDoor(tile))
                        {
                            blockDamaged = true;
                            return false;
                        }
                        break;
                    case 138:
                        if (CheckBoulderChest(i, j))
                        {
                            blockDamaged = true;
                            return false;
                        }
                        break;
                    case 235:
                        {
                            int num2 = i - tile.frameX % 54 / 18;
                            for (int k = 0; k < 3; k++)
                            {
                                ITile tile3 = this[num2 + k, j - 1];
                                if (tile3.active() && WorldGen.IsAContainer(tile3))
                                {
                                    blockDamaged = true;
                                    return false;
                                }
                            }
                            break;
                        }
                    case 21:
                    case 467:
                        if (!CanDestroyChest(i - tile.frameX / 18 % 2, j - tile.frameY / 18))
                        {
                            return false;
                        }
                        break;
                    case 88:
                        if (!CanDestroyChest(i - tile.frameX / 18 % 3, j - tile.frameY / 18))
                        {
                            return false;
                        }
                        break;
                }
                return true;
            }
            public bool PoundTile(int i, int j)
            {
                if (!CanPoundTile(i, j))
                {
                    return false;
                }
                if (!this[i, j].halfBrick())
                {
                    this[i, j].halfBrick(halfBrick: true);
                }
                else
                {
                    this[i, j].halfBrick(halfBrick: false);
                }
                if (!WorldGen.gen)
                {
                    KillTile(i, j, fail: true, effectOnly: true);
                    SquareTileFrame(i, j, true);
                    if (!this[i, j].halfBrick())
                    {
                        Rectangle rectangle = new Rectangle(i * 16, j * 16, 16, 16);
                        for (int k = 0; k < 255; k++)
                        {
                            if (Main.player[k].active && !Main.player[k].dead && rectangle.Intersects(new Rectangle((int)Main.player[k].position.X, (int)Main.player[k].position.Y, Main.player[k].width, Main.player[k].height)))
                            {
                                Main.player[k].gfxOffY += Main.player[k].position.Y + (float)Main.player[k].height - (float)rectangle.Y;
                                Main.player[k].position.Y = rectangle.Y - Main.player[k].height;
                            }
                        }
                    }
                }
                return true;
            }
            public bool PlaceActuator(int i, int j)
            {
                if (!this[i, j].actuator())
                {
                    this[i, j].actuator(actuator: true);
                    return true;
                }
                return false;
            }

            public bool KillActuator(int i, int j)
            {
                if (this[i, j].actuator())
                {
                    this[i, j].actuator(actuator: false);
                    if (Main.netMode != 1)
                    {
                        NewItem(i * 16, j * 16, 16, 16, 849);
                    }
                    return true;
                }
                return false;
            }
            public void PlaceWall(int i, int j, int type, bool mute = false)
            {
                if (i <= 1 || j <= 1 || i >= MaxTilesX - 2 || j >= MaxTilesY - 2)
                {
                    return;
                }
                if (this[i, j] == null)
                {
                    this[i, j] = CreateTile();
                }
                if (this[i, j].wall == 0)
                {
                    this[i, j].wall = (ushort)type;
                    SquareWallFrame(i, j);
                }
            }
            public bool PlaceWire(int i, int j)
            {
                if (!this[i, j].wire())
                {
                    this[i, j].wire(wire: true);
                    return true;
                }
                return false;
            }
            public bool KillWire(int i, int j)
            {
                if (this[i, j].wire())
                {
                    this[i, j].wire(wire: false);
                    if (Main.netMode != 1)
                    {
                        NewItem(i * 16, j * 16, 16, 16, 530);
                    }
                    return true;
                }
                return false;
            }
            public bool PlaceWire2(int i, int j)
            {
                if (!this[i, j].wire2())
                {
                    this[i, j].wire2(wire2: true);
                    return true;
                }
                return false;
            }

            public bool KillWire2(int i, int j)
            {
                if (this[i, j].wire2())
                {
                    this[i, j].wire2(wire2: false);
                    if (Main.netMode != 1)
                    {
                        NewItem(i * 16, j * 16, 16, 16, 530);
                    }
                    return true;
                }
                return false;
            }

            public bool PlaceWire3(int i, int j)
            {
                if (!this[i, j].wire3())
                {
                    this[i, j].wire3(wire3: true);
                    return true;
                }
                return false;
            }

            public bool KillWire3(int i, int j)
            {
                if (this[i, j].wire3())
                {
                    this[i, j].wire3(wire3: false);
                    if (Main.netMode != 1)
                    {
                        NewItem(i * 16, j * 16, 16, 16, 530);
                    }
                    return true;
                }
                return false;
            }

            public bool PlaceWire4(int i, int j)
            {
                if (!this[i, j].wire4())
                {
                    this[i, j].wire4(wire4: true);
                    return true;
                }
                return false;
            }

            public bool KillWire4(int i, int j)
            {
                if (this[i, j].wire4())
                {
                    this[i, j].wire4(wire4: false);
                    if (Main.netMode != 1)
                    {
                        NewItem(i * 16, j * 16, 16, 16, 530);
                    }
                    return true;
                }
                return false;
            }
            public bool KillTile_ShouldDropSeeds(int x, int y)
            {
                if (Rand.Next(2) == 0)
                {
                    if (!GetPlayerForTile(x, y).HasItem(281))
                    {
                        return GetPlayerForTile(x, y).HasItem(986);
                    }
                    return true;
                }
                return false;
            }
            public Player GetPlayerForTile(int x, int y)
            {
                return Main.player[Terraria.Player.FindClosest(new Vector2(x, y) * 16f, 16, 16)];
            }
            public int RollLuck(Player plr, int range)
            {
                if (plr.luck > 0f && Rand.NextFloat() < plr.luck)
                {
                    return Rand.Next(Rand.Next(range / 2, range));
                }
                if (plr.luck < 0f && Rand.NextFloat() < 0f - plr.luck)
                {
                    return Rand.Next(Rand.Next(range, range * 2));
                }
                return Rand.Next(range);
            }

            public float GetClosestRollLuck(Vector2 position, int range)
            {
                return RollLuck(Main.player[Terraria.Player.FindClosest(position, 1, 1)], range);
            }

            public float GetClosestRollLuck(int x, int y, int range)
            {
                return RollLuck(Main.player[Terraria.Player.FindClosest(new Vector2(x, y), 1, 1)], range);
            }

            public void KillTile_GetItemDrops(int x, int y, ITile tileCache, out int dropItem, out int dropItemStack, out int secondaryItem, out int secondaryItemStack, bool includeLargeObjectDrops = false)
            {
                dropItem = 0;
                dropItemStack = 1;
                secondaryItem = 0;
                secondaryItemStack = 1;
                int num = 0;
                if (includeLargeObjectDrops)
                {
                    switch (tileCache.type)
                    {
                        case 21:
                        case 467:
                            dropItem = GetChestItemDrop(x, y, tileCache.type);
                            break;
                        case 88:
                            num = tileCache.frameX / 54;
                            dropItem = WorldGen.GetDresserItemDrop(num);
                            break;
                    }
                }
                switch (tileCache.type)
                {
                    case 10:
                    case 11:
                    case 12:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 20:
                    case 21:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 31:
                    case 32:
                    case 34:
                    case 35:
                    case 42:
                    case 55:
                    case 69:
                    case 77:
                    case 79:
                    case 82:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 113:
                    case 114:
                    case 115:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 132:
                    case 133:
                    case 134:
                    case 138:
                    case 139:
                    case 142:
                    case 143:
                    case 162:
                    case 165:
                    case 172:
                    case 173:
                    case 184:
                    case 185:
                    case 186:
                    case 187:
                    case 192:
                    case 205:
                    case 207:
                    case 209:
                    case 212:
                    case 215:
                    case 216:
                    case 217:
                    case 218:
                    case 219:
                    case 220:
                    case 228:
                    case 231:
                    case 233:
                    case 235:
                    case 236:
                    case 237:
                    case 238:
                    case 240:
                    case 241:
                    case 242:
                    case 243:
                    case 244:
                    case 245:
                    case 246:
                    case 247:
                    case 254:
                    case 269:
                    case 270:
                    case 271:
                    case 275:
                    case 276:
                    case 277:
                    case 278:
                    case 279:
                    case 280:
                    case 281:
                    case 282:
                    case 283:
                    case 285:
                    case 286:
                    case 287:
                    case 288:
                    case 289:
                    case 290:
                    case 291:
                    case 292:
                    case 293:
                    case 294:
                    case 295:
                    case 296:
                    case 297:
                    case 298:
                    case 299:
                    case 300:
                    case 301:
                    case 302:
                    case 303:
                    case 304:
                    case 305:
                    case 306:
                    case 307:
                    case 308:
                    case 309:
                    case 310:
                    case 316:
                    case 317:
                    case 318:
                    case 319:
                    case 320:
                    case 334:
                    case 335:
                    case 337:
                    case 338:
                    case 339:
                    case 349:
                    case 352:
                    case 354:
                    case 355:
                    case 356:
                    case 358:
                    case 359:
                    case 360:
                    case 361:
                    case 362:
                    case 363:
                    case 364:
                    case 373:
                    case 374:
                    case 375:
                    case 376:
                    case 377:
                    case 378:
                    case 384:
                    case 386:
                    case 387:
                    case 388:
                    case 389:
                    case 390:
                    case 391:
                    case 392:
                    case 393:
                    case 394:
                    case 395:
                    case 405:
                    case 406:
                    case 410:
                    case 411:
                    case 412:
                    case 413:
                    case 414:
                    case 425:
                    case 440:
                    case 441:
                    case 443:
                    case 444:
                    case 452:
                    case 453:
                    case 454:
                    case 455:
                    case 456:
                    case 457:
                    case 461:
                    case 462:
                    case 463:
                    case 464:
                    case 465:
                    case 466:
                    case 467:
                    case 468:
                    case 469:
                    case 470:
                    case 471:
                    case 475:
                    case 480:
                    case 481:
                    case 482:
                    case 483:
                    case 484:
                    case 485:
                    case 486:
                    case 487:
                    case 488:
                    case 489:
                    case 490:
                    case 491:
                    case 493:
                    case 497:
                    case 499:
                    case 504:
                    case 505:
                    case 506:
                    case 509:
                    case 510:
                    case 511:
                    case 518:
                    case 521:
                    case 522:
                    case 523:
                    case 524:
                    case 525:
                    case 526:
                    case 527:
                    case 529:
                    case 530:
                    case 531:
                    case 532:
                    case 533:
                    case 538:
                    case 542:
                    case 543:
                    case 544:
                    case 545:
                    case 547:
                    case 548:
                    case 549:
                    case 550:
                    case 551:
                    case 552:
                    case 553:
                    case 554:
                    case 555:
                    case 556:
                    case 558:
                    case 559:
                    case 560:
                    case 564:
                    case 565:
                    case 567:
                    case 568:
                    case 569:
                    case 570:
                    case 572:
                    case 573:
                    case 580:
                    case 581:
                    case 582:
                    case 590:
                    case 591:
                    case 592:
                    case 594:
                    case 595:
                    case 597:
                    case 598:
                    case 599:
                    case 600:
                    case 601:
                    case 602:
                    case 603:
                    case 604:
                    case 605:
                    case 606:
                    case 607:
                    case 608:
                    case 609:
                    case 610:
                    case 611:
                    case 612:
                    case 613:
                    case 614:
                    case 615:
                    case 617:
                        break;
                    case 179:
                    case 180:
                    case 181:
                    case 182:
                    case 183:
                    case 381:
                    case 534:
                    case 536:
                    case 539:
                        dropItem = 3;
                        break;
                    case 512:
                    case 513:
                    case 514:
                    case 515:
                    case 516:
                    case 517:
                    case 535:
                    case 537:
                    case 540:
                        dropItem = 129;
                        break;
                    case 0:
                    case 2:
                    case 109:
                    case 199:
                    case 477:
                    case 492:
                        dropItem = 2;
                        break;
                    case 426:
                        dropItem = 3621;
                        break;
                    case 430:
                        dropItem = 3633;
                        break;
                    case 431:
                        dropItem = 3634;
                        break;
                    case 432:
                        dropItem = 3635;
                        break;
                    case 433:
                        dropItem = 3636;
                        break;
                    case 434:
                        dropItem = 3637;
                        break;
                    case 427:
                        dropItem = 3622;
                        break;
                    case 435:
                        dropItem = 3638;
                        break;
                    case 436:
                        dropItem = 3639;
                        break;
                    case 437:
                        dropItem = 3640;
                        break;
                    case 438:
                        dropItem = 3641;
                        break;
                    case 439:
                        dropItem = 3642;
                        break;
                    case 446:
                        dropItem = 3736;
                        break;
                    case 447:
                        dropItem = 3737;
                        break;
                    case 448:
                        dropItem = 3738;
                        break;
                    case 449:
                        dropItem = 3739;
                        break;
                    case 450:
                        dropItem = 3740;
                        break;
                    case 451:
                        dropItem = 3741;
                        break;
                    case 368:
                        dropItem = 3086;
                        break;
                    case 369:
                        dropItem = 3087;
                        break;
                    case 367:
                        dropItem = 3081;
                        break;
                    case 379:
                        dropItem = 3214;
                        break;
                    case 353:
                        dropItem = 2996;
                        break;
                    case 365:
                        dropItem = 3077;
                        break;
                    case 366:
                        dropItem = 3078;
                        break;
                    case 357:
                        dropItem = 3066;
                        break;
                    case 1:
                        dropItem = 3;
                        break;
                    case 442:
                        dropItem = 3707;
                        break;
                    case 383:
                        dropItem = 620;
                        break;
                    case 315:
                        dropItem = 2435;
                        break;
                    case 330:
                        dropItem = 71;
                        break;
                    case 331:
                        dropItem = 72;
                        break;
                    case 332:
                        dropItem = 73;
                        break;
                    case 333:
                        dropItem = 74;
                        break;
                    case 408:
                        dropItem = 3460;
                        break;
                    case 409:
                        dropItem = 3461;
                        break;
                    case 415:
                        dropItem = 3573;
                        break;
                    case 416:
                        dropItem = 3574;
                        break;
                    case 417:
                        dropItem = 3575;
                        break;
                    case 418:
                        dropItem = 3576;
                        break;
                    case 421:
                        dropItem = 3609;
                        break;
                    case 422:
                        dropItem = 3610;
                        break;
                    case 498:
                        dropItem = 4139;
                        break;
                    case 424:
                        dropItem = 3616;
                        break;
                    case 445:
                        dropItem = 3725;
                        break;
                    case 429:
                        dropItem = 3629;
                        break;
                    case 272:
                        dropItem = 1344;
                        break;
                    case 273:
                        dropItem = 2119;
                        break;
                    case 274:
                        dropItem = 2120;
                        break;
                    case 618:
                        dropItem = 4962;
                        break;
                    case 460:
                        dropItem = 3756;
                        break;
                    case 541:
                        dropItem = 4392;
                        break;
                    case 472:
                        dropItem = 3951;
                        break;
                    case 473:
                        dropItem = 3953;
                        break;
                    case 474:
                        dropItem = 3955;
                        break;
                    case 478:
                        dropItem = 4050;
                        break;
                    case 479:
                        dropItem = 4051;
                        break;
                    case 496:
                        dropItem = 4091;
                        break;
                    case 495:
                        dropItem = 4090;
                        break;
                    case 346:
                        dropItem = 2792;
                        break;
                    case 347:
                        dropItem = 2793;
                        break;
                    case 348:
                        dropItem = 2794;
                        break;
                    case 350:
                        dropItem = 2860;
                        break;
                    case 336:
                        dropItem = 2701;
                        break;
                    case 340:
                        dropItem = 2751;
                        break;
                    case 341:
                        dropItem = 2752;
                        break;
                    case 342:
                        dropItem = 2753;
                        break;
                    case 343:
                        dropItem = 2754;
                        break;
                    case 344:
                        dropItem = 2755;
                        break;
                    case 351:
                        dropItem = 2868;
                        break;
                    case 500:
                        dropItem = 4229;
                        break;
                    case 501:
                        dropItem = 4230;
                        break;
                    case 502:
                        dropItem = 4231;
                        break;
                    case 503:
                        dropItem = 4232;
                        break;
                    case 546:
                    case 557:
                        dropItem = 4422;
                        break;
                    case 561:
                        dropItem = 4554;
                        break;
                    case 574:
                        dropItem = 4717;
                        break;
                    case 575:
                        dropItem = 4718;
                        break;
                    case 576:
                        dropItem = 4719;
                        break;
                    case 577:
                        dropItem = 4720;
                        break;
                    case 578:
                        dropItem = 4721;
                        break;
                    case 562:
                        dropItem = 4564;
                        break;
                    case 571:
                        dropItem = 4564;
                        dropItemStack = WorldGen.genRand.Next(1, 3);
                        break;
                    case 563:
                        dropItem = 4547;
                        break;
                    case 251:
                        dropItem = 1725;
                        break;
                    case 252:
                        dropItem = 1727;
                        break;
                    case 253:
                        dropItem = 1729;
                        break;
                    case 325:
                        dropItem = 2692;
                        break;
                    case 370:
                        dropItem = 3100;
                        break;
                    case 396:
                        dropItem = 3271;
                        break;
                    case 400:
                        dropItem = 3276;
                        break;
                    case 401:
                        dropItem = 3277;
                        break;
                    case 403:
                        dropItem = 3339;
                        break;
                    case 397:
                        dropItem = 3272;
                        break;
                    case 398:
                        dropItem = 3274;
                        break;
                    case 399:
                        dropItem = 3275;
                        break;
                    case 402:
                        dropItem = 3338;
                        break;
                    case 404:
                        dropItem = 3347;
                        break;
                    case 407:
                        dropItem = 3380;
                        break;
                    case 579:
                        dropItem = 4761;
                        break;
                    case 593:
                        dropItem = 4868;
                        break;
                    case 170:
                        dropItem = 1872;
                        break;
                    case 284:
                        dropItem = 2173;
                        break;
                    case 214:
                        dropItem = 85;
                        break;
                    case 213:
                        dropItem = 965;
                        break;
                    case 211:
                        dropItem = 947;
                        break;
                    case 6:
                        dropItem = 11;
                        break;
                    case 7:
                        dropItem = 12;
                        break;
                    case 8:
                        dropItem = 13;
                        break;
                    case 9:
                        dropItem = 14;
                        break;
                    case 202:
                        dropItem = 824;
                        break;
                    case 234:
                        dropItem = 1246;
                        break;
                    case 226:
                        dropItem = 1101;
                        break;
                    case 224:
                        dropItem = 1103;
                        break;
                    case 36:
                        dropItem = 1869;
                        break;
                    case 311:
                        dropItem = 2260;
                        break;
                    case 312:
                        dropItem = 2261;
                        break;
                    case 313:
                        dropItem = 2262;
                        break;
                    case 229:
                        dropItem = 1125;
                        break;
                    case 230:
                        dropItem = 1127;
                        break;
                    case 221:
                        dropItem = 1104;
                        break;
                    case 222:
                        dropItem = 1105;
                        break;
                    case 223:
                        dropItem = 1106;
                        break;
                    case 248:
                        dropItem = 1589;
                        break;
                    case 249:
                        dropItem = 1591;
                        break;
                    case 250:
                        dropItem = 1593;
                        break;
                    case 191:
                        dropItem = 9;
                        break;
                    case 203:
                        dropItem = 836;
                        break;
                    case 204:
                        dropItem = 880;
                        break;
                    case 166:
                        dropItem = 699;
                        break;
                    case 167:
                        dropItem = 700;
                        break;
                    case 168:
                        dropItem = 701;
                        break;
                    case 169:
                        dropItem = 702;
                        break;
                    case 123:
                        dropItem = 424;
                        break;
                    case 124:
                        dropItem = 480;
                        break;
                    case 157:
                        dropItem = 619;
                        break;
                    case 158:
                        dropItem = 620;
                        break;
                    case 159:
                        dropItem = 621;
                        break;
                    case 161:
                        dropItem = 664;
                        break;
                    case 206:
                        dropItem = 883;
                        break;
                    case 232:
                        dropItem = 1150;
                        break;
                    case 198:
                        dropItem = 775;
                        break;
                    case 314:
                        dropItem = GetTrackItem(tileCache);
                        break;
                    case 189:
                        dropItem = 751;
                        break;
                    case 195:
                        dropItem = 763;
                        break;
                    case 194:
                        dropItem = 154;
                        break;
                    case 193:
                        dropItem = 762;
                        break;
                    case 196:
                        dropItem = 765;
                        break;
                    case 197:
                        dropItem = 767;
                        break;
                    case 22:
                        dropItem = 56;
                        break;
                    case 140:
                        dropItem = 577;
                        break;
                    case 23:
                        dropItem = 2;
                        break;
                    case 25:
                        dropItem = 61;
                        break;
                    case 30:
                        dropItem = 9;
                        break;
                    case 208:
                        dropItem = 911;
                        break;
                    case 372:
                        dropItem = 3117;
                        break;
                    case 371:
                        dropItem = 3113;
                        break;
                    case 174:
                        dropItem = 713;
                        break;
                    case 37:
                        dropItem = 116;
                        break;
                    case 38:
                        dropItem = 129;
                        break;
                    case 39:
                        dropItem = 131;
                        break;
                    case 40:
                        dropItem = 133;
                        break;
                    case 41:
                        dropItem = 134;
                        break;
                    case 43:
                        dropItem = 137;
                        break;
                    case 44:
                        dropItem = 139;
                        break;
                    case 45:
                        dropItem = 141;
                        break;
                    case 46:
                        dropItem = 143;
                        break;
                    case 47:
                        dropItem = 145;
                        break;
                    case 48:
                        dropItem = 147;
                        break;
                    case 49:
                        dropItem = 148;
                        break;
                    case 51:
                        dropItem = 150;
                        break;
                    case 53:
                        dropItem = 169;
                        break;
                    case 151:
                        dropItem = 607;
                        break;
                    case 152:
                        dropItem = 609;
                        break;
                    case 56:
                        dropItem = 173;
                        break;
                    case 57:
                        dropItem = 172;
                        break;
                    case 58:
                        dropItem = 174;
                        break;
                    case 70:
                        dropItem = 176;
                        break;
                    case 75:
                        dropItem = 192;
                        break;
                    case 76:
                        dropItem = 214;
                        break;
                    case 78:
                        dropItem = 222;
                        break;
                    case 81:
                        dropItem = 275;
                        break;
                    case 80:
                        dropItem = 276;
                        break;
                    case 188:
                        dropItem = 276;
                        break;
                    case 107:
                        dropItem = 364;
                        break;
                    case 108:
                        dropItem = 365;
                        break;
                    case 111:
                        dropItem = 366;
                        break;
                    case 150:
                        dropItem = 604;
                        break;
                    case 112:
                        dropItem = 370;
                        break;
                    case 116:
                        dropItem = 408;
                        break;
                    case 117:
                        dropItem = 409;
                        break;
                    case 118:
                        dropItem = 412;
                        break;
                    case 119:
                        dropItem = 413;
                        break;
                    case 120:
                        dropItem = 414;
                        break;
                    case 121:
                        dropItem = 415;
                        break;
                    case 122:
                        dropItem = 416;
                        break;
                    case 136:
                        dropItem = 538;
                        break;
                    case 385:
                        dropItem = 3234;
                        break;
                    case 141:
                        dropItem = 580;
                        break;
                    case 145:
                        dropItem = 586;
                        break;
                    case 146:
                        dropItem = 591;
                        break;
                    case 147:
                        dropItem = 593;
                        break;
                    case 148:
                        dropItem = 594;
                        break;
                    case 153:
                        dropItem = 611;
                        break;
                    case 154:
                        dropItem = 612;
                        break;
                    case 155:
                        dropItem = 613;
                        break;
                    case 156:
                        dropItem = 614;
                        break;
                    case 160:
                        dropItem = 662;
                        break;
                    case 175:
                        dropItem = 717;
                        break;
                    case 176:
                        dropItem = 718;
                        break;
                    case 177:
                        dropItem = 719;
                        break;
                    case 163:
                        dropItem = 833;
                        break;
                    case 164:
                        dropItem = 834;
                        break;
                    case 200:
                        dropItem = 835;
                        break;
                    case 210:
                        dropItem = 937;
                        break;
                    case 130:
                        dropItem = 511;
                        break;
                    case 131:
                        dropItem = 512;
                        break;
                    case 321:
                        dropItem = 2503;
                        break;
                    case 322:
                        dropItem = 2504;
                        break;
                    case 54:
                        dropItem = 170;
                        break;
                    case 326:
                        dropItem = 2693;
                        break;
                    case 327:
                        dropItem = 2694;
                        break;
                    case 458:
                        dropItem = 3754;
                        break;
                    case 459:
                        dropItem = 3755;
                        break;
                    case 345:
                        dropItem = 2787;
                        break;
                    case 328:
                        dropItem = 2695;
                        break;
                    case 329:
                        dropItem = 2697;
                        break;
                    case 507:
                        dropItem = 4277;
                        break;
                    case 508:
                        dropItem = 4278;
                        break;
                    case 255:
                    case 256:
                    case 257:
                    case 258:
                    case 259:
                    case 260:
                    case 261:
                        dropItem = 1970 + tileCache.type - 255;
                        break;
                    case 262:
                    case 263:
                    case 264:
                    case 265:
                    case 266:
                    case 267:
                    case 268:
                        dropItem = 1970 + tileCache.type - 262;
                        break;
                    case 59:
                    case 60:
                        dropItem = 176;
                        break;
                    case 190:
                        dropItem = 183;
                        break;
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                        dropItem = tileCache.type - 63 + 177;
                        break;
                    case 566:
                        dropItem = 999;
                        break;
                    case 129:
                        if (tileCache.frameX >= 324)
                        {
                            dropItem = 4988;
                        }
                        else
                        {
                            dropItem = 502;
                        }
                        break;
                    case 3:
                        if (tileCache.frameX == 144)
                        {
                            dropItem = 5;
                        }
                        else if (KillTile_ShouldDropSeeds(x, y))
                        {
                            dropItem = 283;
                        }
                        break;
                    case 519:
                        if (tileCache.frameY == 90 && WorldGen.genRand.Next(2) == 0)
                        {
                            dropItem = 183;
                        }
                        break;
                    case 528:
                        if (WorldGen.genRand.Next(2) == 0)
                        {
                            dropItem = 183;
                        }
                        break;
                    case 110:
                        if (tileCache.frameX == 144)
                        {
                            dropItem = 5;
                        }
                        break;
                    case 24:
                        if (tileCache.frameX == 144)
                        {
                            dropItem = 60;
                        }
                        break;
                    case 201:
                        if (tileCache.frameX == 270)
                        {
                            dropItem = 2887;
                        }
                        break;
                    case 73:
                        if (KillTile_ShouldDropSeeds(x, y))
                        {
                            dropItem = 283;
                        }
                        break;
                    case 52:
                    case 62:
                    case 382:
                        if (Rand.Next(2) == 0 && GetPlayerForTile(x, y).cordage)
                        {
                            dropItem = 2996;
                        }
                        break;
                    case 227:
                        num = tileCache.frameX / 34;
                        dropItem = 1107 + num;
                        if (num >= 8 && num <= 11)
                        {
                            dropItem = 3385 + num - 8;
                        }
                        break;
                    case 4:
                        num = tileCache.frameY / 22;
                        switch (num)
                        {
                            case 0:
                                dropItem = 8;
                                break;
                            case 8:
                                dropItem = 523;
                                break;
                            case 9:
                                dropItem = 974;
                                break;
                            case 10:
                                dropItem = 1245;
                                break;
                            case 11:
                                dropItem = 1333;
                                break;
                            case 12:
                                dropItem = 2274;
                                break;
                            case 13:
                                dropItem = 3004;
                                break;
                            case 14:
                                dropItem = 3045;
                                break;
                            case 15:
                                dropItem = 3114;
                                break;
                            case 16:
                                dropItem = 4383;
                                break;
                            case 17:
                                dropItem = 4384;
                                break;
                            case 18:
                                dropItem = 4385;
                                break;
                            case 19:
                                dropItem = 4386;
                                break;
                            case 20:
                                dropItem = 4387;
                                break;
                            case 21:
                                dropItem = 4388;
                                break;
                            default:
                                dropItem = 426 + num;
                                break;
                        }
                        break;
                    case 239:
                        num = tileCache.frameX / 18;
                        if (num == 0)
                        {
                            dropItem = 20;
                        }
                        if (num == 1)
                        {
                            dropItem = 703;
                        }
                        if (num == 2)
                        {
                            dropItem = 22;
                        }
                        if (num == 3)
                        {
                            dropItem = 704;
                        }
                        if (num == 4)
                        {
                            dropItem = 21;
                        }
                        if (num == 5)
                        {
                            dropItem = 705;
                        }
                        if (num == 6)
                        {
                            dropItem = 19;
                        }
                        if (num == 7)
                        {
                            dropItem = 706;
                        }
                        if (num == 8)
                        {
                            dropItem = 57;
                        }
                        if (num == 9)
                        {
                            dropItem = 117;
                        }
                        if (num == 10)
                        {
                            dropItem = 175;
                        }
                        if (num == 11)
                        {
                            dropItem = 381;
                        }
                        if (num == 12)
                        {
                            dropItem = 1184;
                        }
                        if (num == 13)
                        {
                            dropItem = 382;
                        }
                        if (num == 14)
                        {
                            dropItem = 1191;
                        }
                        if (num == 15)
                        {
                            dropItem = 391;
                        }
                        if (num == 16)
                        {
                            dropItem = 1198;
                        }
                        if (num == 17)
                        {
                            dropItem = 1006;
                        }
                        if (num == 18)
                        {
                            dropItem = 1225;
                        }
                        if (num == 19)
                        {
                            dropItem = 1257;
                        }
                        if (num == 20)
                        {
                            dropItem = 1552;
                        }
                        if (num == 21)
                        {
                            dropItem = 3261;
                        }
                        if (num == 22)
                        {
                            dropItem = 3467;
                        }
                        break;
                    case 380:
                        num = tileCache.frameY / 18;
                        dropItem = 3215 + num;
                        break;
                    case 5:
                    case 596:
                    case 616:
                        {
                            bool bonusWood = false;
                            KillTile_GetTreeDrops(x, y, tileCache, ref bonusWood, ref dropItem, ref secondaryItem);
                            if (bonusWood)
                            {
                                dropItemStack++;
                            }
                            break;
                        }
                    case 323:
                        {
                            dropItem = 2504;
                            if (tileCache.frameX <= 132 && tileCache.frameX >= 88)
                            {
                                secondaryItem = 27;
                            }
                            int j;
                            for (j = y; !this[x, j].active() || !Main.tileSolid[this[x, j].type]; j++)
                            {
                            }
                            if (this[x, j].active())
                            {
                                switch (this[x, j].type)
                                {
                                    case 234:
                                        dropItem = 911;
                                        break;
                                    case 116:
                                        dropItem = 621;
                                        break;
                                    case 112:
                                        dropItem = 619;
                                        break;
                                }
                            }
                            break;
                        }
                    case 171:
                        if (tileCache.frameX >= 10)
                        {
                            dropXmasTree(x, y, 0);
                            dropXmasTree(x, y, 1);
                            dropXmasTree(x, y, 2);
                            dropXmasTree(x, y, 3);
                        }
                        break;
                    case 324:
                        switch (tileCache.frameY / 22)
                        {
                            case 0:
                                dropItem = 2625;
                                break;
                            case 1:
                                dropItem = 2626;
                                break;
                            case 2:
                                dropItem = 4072;
                                break;
                            case 3:
                                dropItem = 4073;
                                break;
                            case 4:
                                dropItem = 4071;
                                break;
                        }
                        break;
                    case 419:
                        switch (tileCache.frameX / 18)
                        {
                            case 0:
                                dropItem = 3602;
                                break;
                            case 1:
                                dropItem = 3618;
                                break;
                            case 2:
                                dropItem = 3663;
                                break;
                        }
                        break;
                    case 428:
                        switch (tileCache.frameY / 18)
                        {
                            case 0:
                                dropItem = 3630;
                                break;
                            case 1:
                                dropItem = 3632;
                                break;
                            case 2:
                                dropItem = 3631;
                                break;
                            case 3:
                                dropItem = 3626;
                                break;
                        }
                        PressurePlateHelper.DestroyPlate(new Point(x, y));
                        break;
                    case 420:
                        switch (tileCache.frameY / 18)
                        {
                            case 0:
                                dropItem = 3603;
                                break;
                            case 1:
                                dropItem = 3604;
                                break;
                            case 2:
                                dropItem = 3605;
                                break;
                            case 3:
                                dropItem = 3606;
                                break;
                            case 4:
                                dropItem = 3607;
                                break;
                            case 5:
                                dropItem = 3608;
                                break;
                        }
                        break;
                    case 476:
                        dropItem = 4040;
                        break;
                    case 494:
                        dropItem = 4089;
                        break;
                    case 423:
                        TELogicSensor.Kill(x, y);
                        switch (tileCache.frameY / 18)
                        {
                            case 0:
                                dropItem = 3613;
                                break;
                            case 1:
                                dropItem = 3614;
                                break;
                            case 2:
                                dropItem = 3615;
                                break;
                            case 3:
                                dropItem = 3726;
                                break;
                            case 4:
                                dropItem = 3727;
                                break;
                            case 5:
                                dropItem = 3728;
                                break;
                            case 6:
                                dropItem = 3729;
                                break;
                        }
                        break;
                    case 520:
                        dropItem = 4326;
                        break;
                    case 225:
                        if (Rand.Next(3) == 0)
                        {
                            tileCache.honey(honey: true);
                            tileCache.liquid = byte.MaxValue;
                            break;
                        }
                        dropItem = 1124;
                        if (Main.netMode != 1 && Rand.Next(2) == 0)
                        {
                            int num3 = 1;
                            if (Rand.Next(3) == 0)
                            {
                                num3 = 2;
                            }
                            for (int i = 0; i < num3; i++)
                            {
                                int type = Rand.Next(210, 212);
                                int num4 = NPC.NewNPC(x * 16 + 8, y * 16 + 15, type, 1);
                                Main.npc[num4].velocity.X = (float)Rand.Next(-200, 201) * 0.002f;
                                Main.npc[num4].velocity.Y = (float)Rand.Next(-200, 201) * 0.002f;
                                Main.npc[num4].netUpdate = true;
                            }
                        }
                        break;
                    case 178:
                        switch (tileCache.frameX / 18)
                        {
                            case 0:
                                dropItem = 181;
                                break;
                            case 1:
                                dropItem = 180;
                                break;
                            case 2:
                                dropItem = 177;
                                break;
                            case 3:
                                dropItem = 179;
                                break;
                            case 4:
                                dropItem = 178;
                                break;
                            case 5:
                                dropItem = 182;
                                break;
                            case 6:
                                dropItem = 999;
                                break;
                        }
                        break;
                    case 149:
                        if (tileCache.frameX == 0 || tileCache.frameX == 54)
                        {
                            dropItem = 596;
                        }
                        else if (tileCache.frameX == 18 || tileCache.frameX == 72)
                        {
                            dropItem = 597;
                        }
                        else if (tileCache.frameX == 36 || tileCache.frameX == 90)
                        {
                            dropItem = 598;
                        }
                        break;
                    case 13:
                        switch (tileCache.frameX / 18)
                        {
                            case 1:
                                dropItem = 28;
                                break;
                            case 2:
                                dropItem = 110;
                                break;
                            case 3:
                                dropItem = 350;
                                break;
                            case 4:
                                dropItem = 351;
                                break;
                            case 5:
                                dropItem = 2234;
                                break;
                            case 6:
                                dropItem = 2244;
                                break;
                            case 7:
                                dropItem = 2257;
                                break;
                            case 8:
                                dropItem = 2258;
                                break;
                            default:
                                dropItem = 31;
                                break;
                        }
                        break;
                    case 19:
                        num = tileCache.frameY / 18;
                        switch (num)
                        {
                            case 0:
                                dropItem = 94;
                                break;
                            case 1:
                                dropItem = 631;
                                break;
                            case 2:
                                dropItem = 632;
                                break;
                            case 3:
                                dropItem = 633;
                                break;
                            case 4:
                                dropItem = 634;
                                break;
                            case 5:
                                dropItem = 913;
                                break;
                            case 6:
                                dropItem = 1384;
                                break;
                            case 7:
                                dropItem = 1385;
                                break;
                            case 8:
                                dropItem = 1386;
                                break;
                            case 9:
                                dropItem = 1387;
                                break;
                            case 10:
                                dropItem = 1388;
                                break;
                            case 11:
                                dropItem = 1389;
                                break;
                            case 12:
                                dropItem = 1418;
                                break;
                            case 13:
                                dropItem = 1457;
                                break;
                            case 14:
                                dropItem = 1702;
                                break;
                            case 15:
                                dropItem = 1796;
                                break;
                            case 16:
                                dropItem = 1818;
                                break;
                            case 17:
                                dropItem = 2518;
                                break;
                            case 18:
                                dropItem = 2549;
                                break;
                            case 19:
                                dropItem = 2566;
                                break;
                            case 20:
                                dropItem = 2581;
                                break;
                            case 21:
                                dropItem = 2627;
                                break;
                            case 22:
                                dropItem = 2628;
                                break;
                            case 23:
                                dropItem = 2629;
                                break;
                            case 24:
                                dropItem = 2630;
                                break;
                            case 25:
                                dropItem = 2744;
                                break;
                            case 26:
                                dropItem = 2822;
                                break;
                            case 27:
                                dropItem = 3144;
                                break;
                            case 28:
                                dropItem = 3146;
                                break;
                            case 29:
                                dropItem = 3145;
                                break;
                            case 30:
                            case 31:
                            case 32:
                            case 33:
                            case 34:
                            case 35:
                                dropItem = 3903 + num - 30;
                                break;
                            default:
                                switch (num)
                                {
                                    case 36:
                                        dropItem = 3945;
                                        break;
                                    case 37:
                                        dropItem = 3957;
                                        break;
                                    case 38:
                                        dropItem = 4159;
                                        break;
                                    case 39:
                                        dropItem = 4180;
                                        break;
                                    case 40:
                                        dropItem = 4201;
                                        break;
                                    case 41:
                                        dropItem = 4222;
                                        break;
                                    case 42:
                                        dropItem = 4311;
                                        break;
                                    case 43:
                                        dropItem = 4416;
                                        break;
                                    case 44:
                                        dropItem = 4580;
                                        break;
                                }
                                break;
                        }
                        break;
                    case 33:
                        num = tileCache.frameY / 22;
                        dropItem = 105;
                        switch (num)
                        {
                            case 1:
                                dropItem = 1405;
                                break;
                            case 2:
                                dropItem = 1406;
                                break;
                            case 3:
                                dropItem = 1407;
                                break;
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                                dropItem = 2045 + num - 4;
                                break;
                            default:
                                if (num >= 14 && num <= 16)
                                {
                                    dropItem = 2153 + num - 14;
                                    break;
                                }
                                switch (num)
                                {
                                    case 17:
                                        dropItem = 2236;
                                        break;
                                    case 18:
                                        dropItem = 2523;
                                        break;
                                    case 19:
                                        dropItem = 2542;
                                        break;
                                    case 20:
                                        dropItem = 2556;
                                        break;
                                    case 21:
                                        dropItem = 2571;
                                        break;
                                    case 22:
                                        dropItem = 2648;
                                        break;
                                    case 23:
                                        dropItem = 2649;
                                        break;
                                    case 24:
                                        dropItem = 2650;
                                        break;
                                    case 25:
                                        dropItem = 2651;
                                        break;
                                    case 26:
                                        dropItem = 2818;
                                        break;
                                    case 27:
                                        dropItem = 3171;
                                        break;
                                    case 28:
                                        dropItem = 3173;
                                        break;
                                    case 29:
                                        dropItem = 3172;
                                        break;
                                    case 30:
                                        dropItem = 3890;
                                        break;
                                    case 31:
                                        dropItem = 3936;
                                        break;
                                    case 32:
                                        dropItem = 3962;
                                        break;
                                    case 33:
                                        dropItem = 4150;
                                        break;
                                    case 34:
                                        dropItem = 4171;
                                        break;
                                    case 35:
                                        dropItem = 4192;
                                        break;
                                    case 36:
                                        dropItem = 4213;
                                        break;
                                    case 37:
                                        dropItem = 4303;
                                        break;
                                    case 38:
                                        dropItem = 4571;
                                        break;
                                }
                                break;
                        }
                        break;
                    case 137:
                        num = tileCache.frameY / 18;
                        if (num == 0)
                        {
                            dropItem = 539;
                        }
                        if (num == 1)
                        {
                            dropItem = 1146;
                        }
                        if (num == 2)
                        {
                            dropItem = 1147;
                        }
                        if (num == 3)
                        {
                            dropItem = 1148;
                        }
                        if (num == 4)
                        {
                            dropItem = 1149;
                        }
                        break;
                    case 135:
                        num = tileCache.frameY / 18;
                        if (num == 0)
                        {
                            dropItem = 529;
                        }
                        if (num == 1)
                        {
                            dropItem = 541;
                        }
                        if (num == 2)
                        {
                            dropItem = 542;
                        }
                        if (num == 3)
                        {
                            dropItem = 543;
                        }
                        if (num == 4)
                        {
                            dropItem = 852;
                        }
                        if (num == 5)
                        {
                            dropItem = 853;
                        }
                        if (num == 6)
                        {
                            dropItem = 1151;
                        }
                        break;
                    case 144:
                        if (tileCache.frameX == 0)
                        {
                            dropItem = 583;
                        }
                        if (tileCache.frameX == 18)
                        {
                            dropItem = 584;
                        }
                        if (tileCache.frameX == 36)
                        {
                            dropItem = 585;
                        }
                        if (tileCache.frameX == 54)
                        {
                            dropItem = 4484;
                        }
                        if (tileCache.frameX == 72)
                        {
                            dropItem = 4485;
                        }
                        break;
                    case 61:
                    case 74:
                        if (tileCache.frameX == 144 && tileCache.type == 61)
                        {
                            dropItem = 331;
                            dropItemStack = Rand.Next(2, 4);
                        }
                        else if (tileCache.frameX == 162 && tileCache.type == 61)
                        {
                            dropItem = 223;
                        }
                        else if (tileCache.frameX >= 108 && tileCache.frameX <= 126 && tileCache.type == 61 && Rand.Next(20) == 0)
                        {
                            dropItem = 208;
                        }
                        else if (Rand.Next(100) == 0)
                        {
                            dropItem = 195;
                        }
                        break;
                    case 71:
                    case 72:
                        if (Rand.Next(40) == 0)
                        {
                            dropItem = 194;
                        }
                        else if (Rand.Next(2) == 0)
                        {
                            dropItem = 183;
                        }
                        break;
                    case 50:
                        if (tileCache.frameX == 90)
                        {
                            dropItem = 165;
                        }
                        else
                        {
                            dropItem = 149;
                        }
                        break;
                    case 83:
                    case 84:
                        {
                            num = tileCache.frameX / 18;
                            dropItem = 313 + num;
                            int num2 = 307 + num;
                            if (num == 6)
                            {
                                dropItem = 2358;
                                num2 = 2357;
                            }
                            bool flag = WorldGen.IsHarvestableHerbWithSeed(tileCache.type, num);
                            if (GetPlayerForTile(x, y).HeldItem.type == 213)
                            {
                                dropItemStack = Rand.Next(1, 3);
                                secondaryItem = num2;
                                secondaryItemStack = Rand.Next(1, 6);
                            }
                            else if (flag)
                            {
                                secondaryItem = num2;
                                secondaryItemStack = Rand.Next(1, 4);
                            }
                            break;
                        }
                    case 589:
                        SetGemTreeDrops(999, 4857, tileCache, ref dropItem, ref secondaryItem);
                        if (dropItem == 3)
                        {
                            dropItemStack = Rand.Next(1, 3);
                        }
                        break;
                    case 584:
                        SetGemTreeDrops(181, 4852, tileCache, ref dropItem, ref secondaryItem);
                        if (dropItem == 3)
                        {
                            dropItemStack = Rand.Next(1, 3);
                        }
                        break;
                    case 583:
                        SetGemTreeDrops(180, 4851, tileCache, ref dropItem, ref secondaryItem);
                        if (dropItem == 3)
                        {
                            dropItemStack = Rand.Next(1, 3);
                        }
                        break;
                    case 586:
                        SetGemTreeDrops(179, 4854, tileCache, ref dropItem, ref secondaryItem);
                        if (dropItem == 3)
                        {
                            dropItemStack = Rand.Next(1, 3);
                        }
                        break;
                    case 585:
                        SetGemTreeDrops(177, 4853, tileCache, ref dropItem, ref secondaryItem);
                        if (dropItem == 3)
                        {
                            dropItemStack = Rand.Next(1, 3);
                        }
                        break;
                    case 587:
                        SetGemTreeDrops(178, 4855, tileCache, ref dropItem, ref secondaryItem);
                        if (dropItem == 3)
                        {
                            dropItemStack = Rand.Next(1, 3);
                        }
                        break;
                    case 588:
                        SetGemTreeDrops(182, 4856, tileCache, ref dropItem, ref secondaryItem);
                        if (dropItem == 3)
                        {
                            dropItemStack = Rand.Next(1, 3);
                        }
                        break;
                }
            }

            public void SetGemTreeDrops(int gemType, int seedType, ITile tileCache, ref int dropItem, ref int secondaryItem)
            {
                if (Rand.Next(10) == 0)
                {
                    dropItem = gemType;
                }
                else
                {
                    dropItem = 3;
                }
                if (tileCache.frameX >= 22 && tileCache.frameY >= 198 && Rand.Next(2) == 0)
                {
                    secondaryItem = seedType;
                }
            }
            public void dropXmasTree(int ax, int ay, int obj)
            {
                int num = ax;
                int num2 = ay;
                if (Tile[ax, ay].frameX < 10)
                {
                    num -= Tile[ax, ay].frameX;
                    num2 -= Tile[ax, ay].frameY;
                }
                int num3 = 0;
                if ((Tile[num, num2].frameY & 1) == 1)
                {
                    num3++;
                }
                if ((Tile[num, num2].frameY & 2) == 2)
                {
                    num3 += 2;
                }
                if ((Tile[num, num2].frameY & 4) == 4)
                {
                    num3 += 4;
                }
                int num4 = 0;
                if ((Tile[num, num2].frameY & 8) == 8)
                {
                    num4++;
                }
                if ((Tile[num, num2].frameY & 0x10) == 16)
                {
                    num4 += 2;
                }
                if ((Tile[num, num2].frameY & 0x20) == 32)
                {
                    num4 += 4;
                }
                int num5 = 0;
                if ((Tile[num, num2].frameY & 0x40) == 64)
                {
                    num5++;
                }
                if ((Tile[num, num2].frameY & 0x80) == 128)
                {
                    num5 += 2;
                }
                if ((Tile[num, num2].frameY & 0x100) == 256)
                {
                    num5 += 4;
                }
                if ((Tile[num, num2].frameY & 0x200) == 512)
                {
                    num5 += 8;
                }
                int num6 = 0;
                if ((Tile[num, num2].frameY & 0x400) == 1024)
                {
                    num6++;
                }
                if ((Tile[num, num2].frameY & 0x800) == 2048)
                {
                    num6 += 2;
                }
                if ((Tile[num, num2].frameY & 0x1000) == 4096)
                {
                    num6 += 4;
                }
                if ((Tile[num, num2].frameY & 0x2000) == 8192)
                {
                    num6 += 8;
                }
                if (obj == 0 && num3 > 0)
                {
                    int number = NewItem(ax * 16, ay * 16, 16, 16, 1874 + num3 - 1);
                    if (Main.netMode == 1)
                    {
                        SendDataToPlayer(21, -1, -1, null, number, 1f);
                    }
                }
                else if (obj == 1 && num4 > 0)
                {
                    int number2 = NewItem(ax * 16, ay * 16, 16, 16, 1878 + num4 - 1);
                    if (Main.netMode == 1)
                    {
                        SendDataToPlayer(21, -1, -1, null, number2, 1f);
                    }
                }
                else if (obj == 2 && num5 > 0)
                {
                    int number3 = NewItem(ax * 16, ay * 16, 16, 16, 1884 + num5 - 1);
                    if (Main.netMode == 1)
                    {
                        SendDataToPlayer(21, -1, -1, null, number3, 1f);
                    }
                }
                else if (obj == 3 && num6 > 0)
                {
                    int number4 = NewItem(ax * 16, ay * 16, 16, 16, 1895 + num6 - 1);
                    if (Main.netMode == 1)
                    {
                        SendDataToPlayer(21, -1, -1, null, number4, 1f);
                    }
                }
            }
            public int GetChestItemDrop(int x, int y, int type)
            {

                int num = this[x, y].frameX / 36;
                if (type == 467)
                {
                    return Terraria.Chest.chestItemSpawn2[num];
                }
                return Terraria.Chest.chestItemSpawn[num];
            }
            public void KillTile_GetTreeDrops(int i, int j, ITile tileCache, ref bool bonusWood, ref int dropItem, ref int secondaryItem)
            {
                if (tileCache.frameX >= 22 && tileCache.frameY >= 198)
                {
                    if (Main.netMode != 1)
                    {
                        if (WorldGen.genRand.Next(2) == 0)
                        {
                            int k;
                            for (k = j; this[i, k] != null && (!this[i, k].active() || !Main.tileSolid[this[i, k].type] || Main.tileSolidTop[this[i, k].type]); k++)
                            {
                            }
                            if (this[i, k] != null)
                            {
                                ITile tile = this[i, k];
                                if (tile.type == 2 || tile.type == 109 || tile.type == 477 || tile.type == 492 || tile.type == 147 || tile.type == 199 || tile.type == 23)
                                {
                                    dropItem = 9;
                                    secondaryItem = 27;
                                }
                                else
                                {
                                    dropItem = 9;
                                }
                            }
                        }
                        else
                        {
                            dropItem = 9;
                        }
                    }
                }
                else
                {
                    dropItem = 9;
                }
                if (dropItem != 9)
                {
                    return;
                }
                GetTreeBottom(i, j, out int x, out int y);
                if (this[x, y].active())
                {
                    switch (this[x, y].type)
                    {
                        case 23:
                            dropItem = 619;
                            break;
                        case 60:
                            dropItem = 620;
                            break;
                        case 109:
                        case 492:
                            dropItem = 621;
                            break;
                        case 199:
                            dropItem = 911;
                            break;
                        case 70:
                            if (WorldGen.genRand.Next(2) == 0)
                            {
                                dropItem = 183;
                            }
                            else
                            {
                                dropItem = 0;
                            }
                            break;
                        case 147:
                            dropItem = 2503;
                            break;
                    }
                }
                int num = Terraria.Player.FindClosest(new Vector2(x * 16, y * 16), 16, 16);
                int axe = Main.player[num].inventory[Main.player[num].selectedItem].axe;
                if (WorldGen.genRand.Next(100) < axe || Rand.Next(3) == 0)
                {
                    bonusWood = true;
                }
            }
            public void GetTreeBottom(int i, int j, out int x, out int y)
            {
                x = i;
                y = j;
                ITile tileSafely = GetTileSafely(x, y);
                if (tileSafely.type == 323)
                {
                    while (y < MaxTilesY - 50 && (!tileSafely.active() || tileSafely.type == 323))
                    {
                        y++;
                        tileSafely = GetTileSafely(x, y);
                    }
                    return;
                }
                int num = tileSafely.frameX / 22;
                int num2 = tileSafely.frameY / 22;
                if (num == 3 && num2 <= 2)
                {
                    x++;
                }
                else if (num == 4 && num2 >= 3 && num2 <= 5)
                {
                    x--;
                }
                else if (num == 1 && num2 >= 6 && num2 <= 8)
                {
                    x--;
                }
                else if (num == 2 && num2 >= 6 && num2 <= 8)
                {
                    x++;
                }
                else if (num == 2 && num2 >= 9)
                {
                    x++;
                }
                else if (num == 3 && num2 >= 9)
                {
                    x--;
                }
                tileSafely = GetTileSafely(x, y);
                while (y < MaxTilesY - 50 && (!tileSafely.active() || TileID.Sets.IsATreeTrunk[tileSafely.type] || tileSafely.type == 72))
                {
                    y++;
                    tileSafely = GetTileSafely(x, y);
                }
            }
            public void SquareTileFrame(int i, int j, bool resetFrame = true)
            {
                TileFrame(i - 1, j - 1);
                TileFrame(i - 1, j);
                TileFrame(i - 1, j + 1);
                TileFrame(i, j - 1);
                TileFrame(i, j, resetFrame);
                TileFrame(i, j + 1);
                TileFrame(i + 1, j - 1);
                TileFrame(i + 1, j);
                TileFrame(i + 1, j + 1);
            }
            bool UpdateMapTile(int x, int y) => false;
            public void CheckCatTail(int x, int j)
            {
                if (this[x, j] == null)
                {
                    return;
                }
                int num = j;
                bool flag = false;
                int num2 = num;
                while ((!this[x, num2].active() || !Main.tileSolid[this[x, num2].type] || Main.tileSolidTop[this[x, num2].type]) && num2 < MaxTilesY - 50)
                {
                    if (this[x, num2].active() && this[x, num2].type != 519)
                    {
                        flag = true;
                    }
                    if (!this[x, num2].active())
                    {
                        break;
                    }
                    num2++;
                    if (this[x, num2] == null)
                    {
                        return;
                    }
                }
                num = num2 - 1;
                if (this[x, num] == null)
                {
                    return;
                }
                while (this[x, num] != null && this[x, num].liquid > 0 && num > 50)
                {
                    if ((this[x, num].active() && this[x, num].type != 519) || this[x, num].liquidType() != 0)
                    {
                        flag = true;
                    }
                    num--;
                    if (this[x, num] == null)
                    {
                        return;
                    }
                }
                num++;
                if (this[x, num] == null)
                {
                    return;
                }
                int num3 = num;
                int num4 = WorldGen.catTailDistance;
                if (num2 - num3 > num4)
                {
                    flag = true;
                }
                int type = this[x, num2].type;
                int num5 = -1;
                switch (type)
                {
                    case 2:
                    case 477:
                        num5 = 0;
                        break;
                    case 53:
                        num5 = 18;
                        break;
                    case 199:
                    case 234:
                        num5 = 54;
                        break;
                    case 23:
                    case 112:
                        num5 = 72;
                        break;
                    case 70:
                        num5 = 90;
                        break;
                }
                if (!this[x, num2].nactive())
                {
                    flag = true;
                }
                if (num5 < 0)
                {
                    flag = true;
                }
                num = num2 - 1;
                if (this[x, num] != null && !this[x, num].active())
                {
                    for (int num6 = num; num6 >= num3; num6--)
                    {
                        if (this[x, num6] == null)
                        {
                            return;
                        }
                        if (this[x, num6].active() && this[x, num6].type == 519)
                        {
                            num = num6;
                            break;
                        }
                    }
                }
                while (this[x, num] != null && this[x, num].active() && this[x, num].type == 519)
                {
                    num--;
                }
                num++;
                if (this[x, num2 - 1] != null && this[x, num2 - 1].liquid < 127 && WorldGen.genRand.Next(4) == 0)
                {
                    flag = true;
                }
                if (this[x, num] != null && this[x, num].frameX >= 180 && this[x, num].liquid > 127 && WorldGen.genRand.Next(4) == 0)
                {
                    flag = true;
                }
                if (this[x, num] != null && this[x, num2 - 1] != null && this[x, num].frameX > 18)
                {
                    if (this[x, num2 - 1].frameX < 36 || this[x, num2 - 1].frameX > 72)
                    {
                        flag = true;
                    }
                    else if (this[x, num].frameX < 90)
                    {
                        flag = true;
                    }
                    else if (this[x, num].frameX >= 108 && this[x, num].frameX <= 162)
                    {
                        this[x, num].frameX = 90;
                    }
                }
                if (num2 > num + 4 && this[x, num + 4] != null && this[x, num + 3] != null && this[x, num + 4].liquid == 0 && this[x, num + 3].type == 519)
                {
                    flag = true;
                }
                if (flag)
                {
                    int num7 = num3;
                    if (num < num3)
                    {
                        num7 = num;
                    }
                    num7 -= 4;
                    for (int i = num7; i <= num2; i++)
                    {
                        if (this[x, i] != null && this[x, i].active() && this[x, i].type == 519)
                        {
                            KillTile(x, i);
                            if (Main.netMode == 2)
                            {
                                SendDataToPlayer(17, -1, -1, null, 0, x, i);
                            }
                            SquareTileFrame(x, i);
                        }
                    }
                }
                else
                {
                    if (num5 == this[x, num].frameY)
                    {
                        return;
                    }
                    for (int k = num; k < num2; k++)
                    {
                        if (this[x, k] != null && this[x, k].active() && this[x, k].type == 519)
                        {
                            this[x, k].frameY = (short)num5;
                            if (Main.netMode == 2)
                            {
                                SendTileSquare(-1, x, num, 2);
                            }
                        }
                    }
                }
            }
            public void CheckBamboo(int x, int y)
            {
                ITile tile = this[x, y + 1];
                if (tile == null)
                {
                    return;
                }
                if (!tile.active() || (tile.type != 60 && tile.type != 571))
                {
                    KillTile(x, y);
                    if (Main.netMode == 2)
                    {
                        SendDataToPlayer(17, -1, -1, null, 0, x, y);
                    }
                    SquareTileFrame(x, y);
                    return;
                }
                ITile tile2 = this[x, y - 1];
                if (tile2 == null)
                {
                    return;
                }
                ITile tile3 = this[x, y];
                if (tile3 == null)
                {
                    return;
                }
                bool num = tile2.active() && tile2.type == 571;
                bool flag = tile.active() && tile.type == 571;
                int num2 = tile3.frameX / 18;
                tile3.frameY = 0;
                if (num)
                {
                    if (flag)
                    {
                        if (num2 < 5 || num2 > 14)
                        {
                            tile3.frameX = (short)(WorldGen.genRand.Next(5, 15) * 18);
                            if (Main.netMode == 2)
                            {
                                SendTileSquare(-1, x, y, 1);
                            }
                        }
                    }
                    else if (num2 < 1 || num2 > 4)
                    {
                        tile3.frameX = (short)(WorldGen.genRand.Next(1, 5) * 18);
                        if (Main.netMode == 2)
                        {
                            SendTileSquare(-1, x, y, 1);
                        }
                    }
                }
                else if (flag)
                {
                    if (num2 < 15 || num2 > 19)
                    {
                        tile3.frameX = (short)(WorldGen.genRand.Next(15, 20) * 18);
                        if (Main.netMode == 2)
                        {
                            SendTileSquare(-1, x, y, 1);
                        }
                    }
                }
                else if (num2 != 0)
                {
                    tile3.frameX = 0;
                    if (Main.netMode == 2)
                    {
                        SendTileSquare(-1, x, y, 1);
                    }
                }
            }
            public void CheckTorch(int x, int y)
            {
                for (int i = x - 1; i <= x + 1; i++)
                {
                    for (int j = y - 1; j <= y + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            return;
                        }
                    }
                }
                ITile tile = this[x, y];
                ITile tile2 = this[x, y - 1];
                ITile tile3 = this[x, y + 1];
                ITile tile4 = this[x - 1, y];
                ITile tile5 = this[x + 1, y];
                ITile tile6 = this[x - 1, y + 1];
                ITile tile7 = this[x + 1, y + 1];
                ITile tile8 = this[x - 1, y - 1];
                ITile tile9 = this[x + 1, y - 1];
                short num = 0;
                if (tile.frameX >= 66)
                {
                    num = 66;
                }
                int num2 = -1;
                int num3 = -1;
                int num4 = -1;
                int tree = -1;
                int tree2 = -1;
                int tree3 = -1;
                int tree4 = -1;
                if (tile2 != null && tile2.active() && !tile2.bottomSlope())
                {
                    _ = tile2.type;
                }
                if (tile3 != null && tile3.active() && ((TileID.Sets.Platforms[tile3.type] && TopEdgeCanBeAttachedTo(x, y + 1)) || (!tile3.halfBrick() && !tile3.topSlope())))
                {
                    num2 = tile3.type;
                }
                if (tile4 != null && tile4.active() && (tile4.slope() == 0 || (int)tile4.slope() % 2 != 1))
                {
                    num3 = tile4.type;
                }
                if (tile5 != null && tile5.active() && (tile5.slope() == 0 || (int)tile5.slope() % 2 != 0))
                {
                    num4 = tile5.type;
                }
                if (tile6 != null && tile6.active())
                {
                    tree = tile6.type;
                }
                if (tile7 != null && tile7.active())
                {
                    tree2 = tile7.type;
                }
                if (tile8 != null && tile8.active())
                {
                    tree3 = tile8.type;
                }
                if (tile9 != null && tile9.active())
                {
                    tree4 = tile9.type;
                }
                if (num2 >= 0 && Main.tileSolid[num2] && (!Main.tileNoAttach[num2] || TileID.Sets.Platforms[num2]))
                {
                    tile.frameX = num;
                }
                else if ((num3 >= 0 && Main.tileSolid[num3] && !Main.tileNoAttach[num3]) || (num3 >= 0 && TileID.Sets.IsBeam[num3]) || (WorldGen.IsTreeType(num3) && WorldGen.IsTreeType(tree3) && WorldGen.IsTreeType(tree)))
                {
                    tile.frameX = (short)(22 + num);
                }
                else if ((num4 >= 0 && Main.tileSolid[num4] && !Main.tileNoAttach[num4]) || (num4 >= 0 && TileID.Sets.IsBeam[num4]) || (WorldGen.IsTreeType(num4) && WorldGen.IsTreeType(tree4) && WorldGen.IsTreeType(tree2)))
                {
                    tile.frameX = (short)(44 + num);
                }
                else if (tile.wall > 0)
                {
                    tile.frameX = num;
                }
                else
                {
                    KillTile(x, y);
                }
            }
            public bool TopEdgeCanBeAttachedTo(int i, int j)
            {
                try
                {
                    ITile tile = this[i, j];
                    if (tile == null)
                    {
                        return true;
                    }
                    if (tile.active() && (Main.tileSolid[tile.type] || Main.tileSolidTop[tile.type]) && (!tile.topSlope() || (TileID.Sets.Platforms[tile.type] && PlatformProperTopFrame(tile.frameX))) && !tile.halfBrick() && !tile.inActive())
                    {
                        return true;
                    }
                }
                catch
                {
                }
                return false;
            }
            public void CheckUnderwaterPlant(ushort type, int x, int y)
            {
                if (!CanUnderwaterPlantGrowHere(type, x, y, ignoreSelf: true))
                {
                    KillTile(x, y);
                    if (Main.netMode == 2)
                    {
                        SendDataToPlayer(17, -1, -1, null, 0, x, y);
                    }
                    SquareTileFrame(x, y);
                    return;
                }
                ITile tileSafely = GetTileSafely(x, y - 1);
                ITile tileSafely2 = GetTileSafely(x, y);
                ITile tileSafely3 = GetTileSafely(x, y + 1);
                bool num = tileSafely.active() && tileSafely.type == type;
                bool flag = tileSafely3.active() && tileSafely3.type == type;
                int num2 = tileSafely2.frameX / 18;
                tileSafely2.frameY = 0;
                if (num)
                {
                    if (1 > num2 || num2 > 7)
                    {
                        tileSafely2.frameX = (short)(WorldGen.genRand.Next(1, 8) * 18);
                        if (Main.netMode == 2)
                        {
                            SendTileSquare(-1, x, y, 1);
                        }
                    }
                }
                else if (flag)
                {
                    if (7 > num2 || num2 > 12)
                    {
                        tileSafely2.frameX = (short)(WorldGen.genRand.Next(7, 13) * 18);
                        if (Main.netMode == 2)
                        {
                            SendTileSquare(-1, x, y, 1);
                        }
                    }
                }
                else if (num2 != 0)
                {
                    tileSafely2.frameX = 0;
                    if (Main.netMode == 2)
                    {
                        SendTileSquare(-1, x, y, 1);
                    }
                }
            }
            public void CheckProjectilePressurePad_GetPossiblePlacementDirections(int i, int j, out bool canUp, out bool canLeft, out bool canRight, out bool canDown)
            {
                canUp = false;
                canLeft = false;
                canRight = false;
                canDown = false;
                _ = this[i, j];
                ITile tile = this[i, j - 1];
                ITile tile2 = this[i, j + 1];
                ITile tile3 = this[i - 1, j];
                ITile tile4 = this[i + 1, j];
                ITile tile5 = this[i - 1, j + 1];
                ITile tile6 = this[i + 1, j + 1];
                ITile tile7 = this[i - 1, j - 1];
                ITile tile8 = this[i + 1, j - 1];
                int num = -1;
                int num2 = -1;
                int num3 = -1;
                int num4 = -1;
                int tree = -1;
                int tree2 = -1;
                int tree3 = -1;
                int tree4 = -1;
                if (tile != null && tile.nactive() && !tile.bottomSlope())
                {
                    num2 = tile.type;
                }
                if (tile2 != null && tile2.nactive() && !tile2.halfBrick() && !tile2.topSlope())
                {
                    num = tile2.type;
                }
                if (tile3 != null && tile3.nactive() && (tile3.slope() == 0 || (int)tile3.slope() % 2 != 1))
                {
                    num3 = tile3.type;
                }
                if (tile4 != null && tile4.nactive() && (tile4.slope() == 0 || (int)tile4.slope() % 2 != 0))
                {
                    num4 = tile4.type;
                }
                if (tile5 != null && tile5.nactive())
                {
                    tree = tile5.type;
                }
                if (tile6 != null && tile6.nactive())
                {
                    tree2 = tile6.type;
                }
                if (tile7 != null && tile7.nactive())
                {
                    tree3 = tile7.type;
                }
                if (tile8 != null && tile8.nactive())
                {
                    tree4 = tile8.type;
                }
                if (num >= 0 && Main.tileSolid[num] && (!Main.tileNoAttach[num] || TileID.Sets.Platforms[num]) && (tile2.bottomSlope() || tile2.slope() == 0) && !tile2.halfBrick())
                {
                    canDown = true;
                }
                if (num2 >= 0 && Main.tileSolid[num2] && (!Main.tileNoAttach[num2] || (TileID.Sets.Platforms[num2] && tile.halfBrick())) && (tile.topSlope() || tile.slope() == 0 || tile.halfBrick()))
                {
                    canUp = true;
                }
                if ((num3 >= 0 && Main.tileSolid[num3] && !Main.tileNoAttach[num3] && (tile3.leftSlope() || tile3.slope() == 0) && !tile3.halfBrick()) || (num3 >= 0 && TileID.Sets.IsBeam[num3]) || (WorldGen.IsTreeType(num3) && WorldGen.IsTreeType(tree3) && WorldGen.IsTreeType(tree)))
                {
                    canLeft = true;
                }
                if ((num4 >= 0 && Main.tileSolid[num4] && !Main.tileNoAttach[num4] && (tile4.rightSlope() || tile4.slope() == 0) && !tile4.halfBrick()) || (num4 >= 0 && TileID.Sets.IsBeam[num4]) || (WorldGen.IsTreeType(num4) && WorldGen.IsTreeType(tree4) && WorldGen.IsTreeType(tree2)))
                {
                    canRight = true;
                }
            }
            public void CheckProjectilePressurePad(int i, int j)
            {
                CheckProjectilePressurePad_GetPossiblePlacementDirections(i, j, out bool canUp, out bool canLeft, out bool canRight, out bool canDown);
                ITile tile = this[i, j];
                int num = tile.frameX / 22;
                bool flag = false;
                switch (num)
                {
                    case 0:
                        flag = !canDown;
                        break;
                    case 1:
                        flag = !canUp;
                        break;
                    case 2:
                        flag = !canLeft;
                        break;
                    case 3:
                        flag = !canRight;
                        break;
                    default:
                        flag = true;
                        break;
                }
                if (flag)
                {
                    if (canDown)
                    {
                        tile.frameX = 0;
                    }
                    else if (canUp)
                    {
                        tile.frameX = 22;
                    }
                    else if (canLeft)
                    {
                        tile.frameX = 44;
                    }
                    else if (canRight)
                    {
                        tile.frameX = 66;
                    }
                    else
                    {
                        KillTile(i, j);
                    }
                }
            }
            public void PlantCheck(int x, int y)
            {
                x = Terraria.Utils.Clamp(x, 1, MaxTilesX - 2);
                y = Terraria.Utils.Clamp(y, 1, MaxTilesY - 2);
                for (int i = x - 1; i <= x + 1; i++)
                {
                    for (int j = y - 1; j <= y + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            return;
                        }
                    }
                }
                int num = -1;
                int num2 = this[x, y].type;
                _ = x - 1;
                _ = 0;
                _ = x + 1;
                _ = MaxTilesX;
                _ = y - 1;
                _ = 0;
                if (y + 1 >= MaxTilesY)
                {
                    num = num2;
                }
                if (x - 1 >= 0 && this[x - 1, y] != null && this[x - 1, y].nactive())
                {
                    _ = this[x - 1, y].type;
                }
                if (x + 1 < MaxTilesX && this[x + 1, y] != null && this[x + 1, y].nactive())
                {
                    _ = this[x + 1, y].type;
                }
                if (y - 1 >= 0 && this[x, y - 1] != null && this[x, y - 1].nactive())
                {
                    _ = this[x, y - 1].type;
                }
                if (y + 1 < MaxTilesY && this[x, y + 1] != null && this[x, y + 1].nactive() && !this[x, y + 1].halfBrick() && this[x, y + 1].slope() == 0)
                {
                    num = this[x, y + 1].type;
                }
                if (x - 1 >= 0 && y - 1 >= 0 && this[x - 1, y - 1] != null && this[x - 1, y - 1].nactive())
                {
                    _ = this[x - 1, y - 1].type;
                }
                if (x + 1 < MaxTilesX && y - 1 >= 0 && this[x + 1, y - 1] != null && this[x + 1, y - 1].nactive())
                {
                    _ = this[x + 1, y - 1].type;
                }
                if (x - 1 >= 0 && y + 1 < MaxTilesY && this[x - 1, y + 1] != null && this[x - 1, y + 1].nactive())
                {
                    _ = this[x - 1, y + 1].type;
                }
                if (x + 1 < MaxTilesX && y + 1 < MaxTilesY && this[x + 1, y + 1] != null && this[x + 1, y + 1].nactive())
                {
                    _ = this[x + 1, y + 1].type;
                }
                if ((num2 != 3 || num == 2 || num == 477 || num == 78 || num == 380 || num == 579) && (num2 != 73 || num == 2 || num == 477 || num == 78 || num == 380 || num == 579) && (num2 != 24 || num == 23) && (num2 != 61 || num == 60) && (num2 != 74 || num == 60) && (num2 != 71 || num == 70) && (num2 != 110 || num == 109 || num == 492) && (num2 != 113 || num == 109 || num == 492) && (num2 != 201 || num == 199))
                {
                    return;
                }
                if ((num2 == 3 || num2 == 73) && num != 2 && num != 477 && this[x, y].frameX >= 162)
                {
                    this[x, y].frameX = 126;
                }
                if (num2 == 74 && num != 60 && this[x, y].frameX >= 162)
                {
                    this[x, y].frameX = 126;
                }
                switch (num)
                {
                    case 23:
                        num2 = 24;
                        if (this[x, y].frameX >= 162)
                        {
                            this[x, y].frameX = 126;
                        }
                        break;
                    case 2:
                    case 477:
                        num2 = ((num2 != 113) ? 3 : 73);
                        break;
                    case 109:
                    case 492:
                        num2 = ((num2 != 73) ? 110 : 113);
                        break;
                    case 199:
                        num2 = 201;
                        break;
                    case 70:
                        num2 = 71;
                        while (this[x, y].frameX > 72)
                        {
                            this[x, y].frameX -= 72;
                        }
                        break;
                }
                if (num2 != this[x, y].type)
                {
                    this[x, y].type = (ushort)num2;
                }
                else
                {
                    KillTile(x, y);
                }
            }
            public void CheckDye(int x, int y)
            {
                switch (this[x, y].frameX / 34)
                {
                    case 7:
                        if (!SolidTile(x, y - 1))
                        {
                            KillTile(x, y);
                        }
                        break;
                    case 6:
                        if (!this[x, y + 1].nactive() || this[x, y + 1].type != 80)
                        {
                            KillTile(x, y);
                        }
                        break;
                    default:
                        if (!SolidTile(x, y + 1))
                        {
                            KillTile(x, y);
                        }
                        break;
                }
            }
            public void CheckRockGolemHead(int x, int y)
            {
                if (!SolidTileAllowBottomSlope(x, y + 1))
                {
                    KillTile(x, y);
                }
            }
            public void CheckOrb(int i, int j, int type)
            {
                short frameX = this[i, j].frameX;
                bool flag = false;
                if (frameX >= 36)
                {
                    flag = true;
                }
                if (destroyObject)
                {
                    return;
                }
                int num = i;
                int num2 = j;
                num = ((this[i, j].frameX != 0 && this[i, j].frameX != 36) ? (i - 1) : i);
                num2 = ((this[i, j].frameY != 0) ? (j - 1) : j);
                for (int k = 0; k < 2; k++)
                {
                    for (int l = 0; l < 2; l++)
                    {
                        ITile tile = this[num + k, num2 + l];
                        if (tile != null && (!tile.nactive() || tile.type != type))
                        {
                            destroyObject = true;
                            break;
                        }
                    }
                    if (destroyObject)
                    {
                        break;
                    }
                    if (type == 12)
                    {
                        ITile tile = this[num + k, num2 + 2];
                        if (tile != null && (!tile.nactive() || !Main.tileSolid[tile.type] || tile.blockType() != 0))
                        {
                            destroyObject = true;
                            break;
                        }
                    }
                }
                if (!destroyObject)
                {
                    return;
                }
                for (int m = num; m < num + 2; m++)
                {
                    for (int n = num2; n < num2 + 2; n++)
                    {
                        if (this[m, n].type == type)
                        {
                            KillTile(m, n);
                        }
                    }
                }
                if (Main.netMode != 1 && !WorldGen.noTileActions)
                {
                    switch (type)
                    {
                        case 12:
                            NewItem(num * 16, num2 * 16, 32, 32, 29);
                            break;
                        case 31:
                            if (flag)
                            {
                                int num3 = Main.rand.Next(5);
                                if (!WorldGen.shadowOrbSmashed)
                                {
                                    num3 = 0;
                                }
                                switch (num3)
                                {
                                    case 0:
                                        {
                                            NewItem(num * 16, num2 * 16, 32, 32, 800, 1, noBroadcast: false, -1);
                                            int stack = WorldGen.genRand.Next(100, 101);
                                            NewItem(num * 16, num2 * 16, 32, 32, 97, stack);
                                            break;
                                        }
                                    case 1:
                                        NewItem(num * 16, num2 * 16, 32, 32, 1256, 1, noBroadcast: false, -1);
                                        break;
                                    case 2:
                                        NewItem(num * 16, num2 * 16, 32, 32, 802, 1, noBroadcast: false, -1);
                                        break;
                                    case 3:
                                        NewItem(num * 16, num2 * 16, 32, 32, 3062, 1, noBroadcast: false, -1);
                                        break;
                                    case 4:
                                        NewItem(num * 16, num2 * 16, 32, 32, 1290, 1, noBroadcast: false, -1);
                                        break;
                                }
                            }
                            else
                            {
                                int num4 = Main.rand.Next(5);
                                if (!WorldGen.shadowOrbSmashed)
                                {
                                    num4 = 0;
                                }
                                switch (num4)
                                {
                                    case 0:
                                        {
                                            NewItem(num * 16, num2 * 16, 32, 32, 96, 1, noBroadcast: false, -1);
                                            int stack2 = WorldGen.genRand.Next(100, 101);
                                            NewItem(num * 16, num2 * 16, 32, 32, 97, stack2);
                                            break;
                                        }
                                    case 1:
                                        NewItem(num * 16, num2 * 16, 32, 32, 64, 1, noBroadcast: false, -1);
                                        break;
                                    case 2:
                                        NewItem(num * 16, num2 * 16, 32, 32, 162, 1, noBroadcast: false, -1);
                                        break;
                                    case 3:
                                        NewItem(num * 16, num2 * 16, 32, 32, 115, 1, noBroadcast: false, -1);
                                        break;
                                    case 4:
                                        NewItem(num * 16, num2 * 16, 32, 32, 111, 1, noBroadcast: false, -1);
                                        break;
                                }
                            }
                            WorldGen.shadowOrbSmashed = true;
                            WorldGen.shadowOrbCount++;
                            if (WorldGen.shadowOrbCount >= 3)
                            {
                                if (!(NPC.AnyNPCs(266) && flag) && (!NPC.AnyNPCs(13) || flag))
                                {
                                    WorldGen.shadowOrbCount = 0;
                                    float num5 = num * 16;
                                    float num6 = num2 * 16;
                                    float num7 = -1f;
                                    int plr = 0;
                                    for (int num8 = 0; num8 < 255; num8++)
                                    {
                                        float num9 = Math.Abs(Main.player[num8].position.X - num5) + Math.Abs(Main.player[num8].position.Y - num6);
                                        if (num9 < num7 || num7 == -1f)
                                        {
                                            plr = num8;
                                            num7 = num9;
                                        }
                                    }
                                    if (flag)
                                    {
                                        NPC.SpawnOnPlayer(plr, 266);
                                    }
                                    else
                                    {
                                        NPC.SpawnOnPlayer(plr, 13);
                                    }
                                }
                            }
                            else
                            {
                                LocalizedText localizedText = Lang.misc[10];
                                if (WorldGen.shadowOrbCount == 2)
                                {
                                    localizedText = Lang.misc[11];
                                }
                                if (Main.netMode == 0)
                                {
                                    Main.NewText(localizedText.ToString(), 50, byte.MaxValue, 130);
                                }
                                else if (Main.netMode == 2)
                                {
                                    Terraria.Chat.ChatHelper.BroadcastChatMessage(NetworkText.FromKey(localizedText.Key), new Color(50, 255, 130));
                                }
                            }
                            //AchievementsHelper.NotifyProgressionEvent(7);
                            break;
                    }
                }
                destroyObject = false;
            }
            public void CheckTreeWithSettings(int x, int y, WorldGen.CheckTreeSettings settings)
            {
                int num = -1;
                int num2 = -1;
                int num3 = -1;
                int num4 = -1;
                ITile tile = this[x, y];
                int type = tile.type;
                int frameX = tile.frameX;
                int frameY = tile.frameY;
                if (this[x - 1, y] != null && this[x - 1, y].active())
                {
                    num2 = this[x - 1, y].type;
                }
                if (this[x + 1, y] != null && this[x + 1, y].active())
                {
                    num3 = this[x + 1, y].type;
                }
                if (this[x, y - 1] != null && this[x, y - 1].active())
                {
                    num = this[x, y - 1].type;
                }
                if (this[x, y + 1] != null && this[x, y + 1].active())
                {
                    num4 = this[x, y + 1].type;
                }
                bool flag = settings.IsGroundValid(num4);
                bool flag2 = num3 == type;
                bool flag3 = num2 == type;
                if (!flag && num4 != type && ((tile.frameX == 0 && tile.frameY <= 130) || (tile.frameX == 22 && tile.frameY <= 130) || (tile.frameX == 44 && tile.frameY <= 130)))
                {
                    KillTile(x, y);
                }
                if (tile.frameX >= 22 && tile.frameX <= 44 && tile.frameY >= 132 && tile.frameY <= 176)
                {
                    if (!flag)
                    {
                        KillTile(x, y);
                    }
                    else if (!(tile.frameX == 22 && flag3) && !(tile.frameX == 44 && flag2))
                    {
                        KillTile(x, y);
                    }
                }
                else if ((tile.frameX == 88 && tile.frameY >= 0 && tile.frameY <= 44) || (tile.frameX == 66 && tile.frameY >= 66 && tile.frameY <= 130) || (tile.frameX == 110 && tile.frameY >= 66 && tile.frameY <= 110) || (tile.frameX == 132 && tile.frameY >= 0 && tile.frameY <= 176))
                {
                    if (flag3 && flag2)
                    {
                        if (tile.frameNumber() == 0)
                        {
                            tile.frameX = 110;
                            tile.frameY = 66;
                        }
                        if (tile.frameNumber() == 1)
                        {
                            tile.frameX = 110;
                            tile.frameY = 88;
                        }
                        if (tile.frameNumber() == 2)
                        {
                            tile.frameX = 110;
                            tile.frameY = 110;
                        }
                    }
                    else if (flag3)
                    {
                        if (tile.frameNumber() == 0)
                        {
                            tile.frameX = 88;
                            tile.frameY = 0;
                        }
                        if (tile.frameNumber() == 1)
                        {
                            tile.frameX = 88;
                            tile.frameY = 22;
                        }
                        if (tile.frameNumber() == 2)
                        {
                            tile.frameX = 88;
                            tile.frameY = 44;
                        }
                    }
                    else if (flag2)
                    {
                        if (tile.frameNumber() == 0)
                        {
                            tile.frameX = 66;
                            tile.frameY = 66;
                        }
                        if (tile.frameNumber() == 1)
                        {
                            tile.frameX = 66;
                            tile.frameY = 88;
                        }
                        if (tile.frameNumber() == 2)
                        {
                            tile.frameX = 66;
                            tile.frameY = 110;
                        }
                    }
                    else
                    {
                        if (tile.frameNumber() == 0)
                        {
                            tile.frameX = 0;
                            tile.frameY = 0;
                        }
                        if (tile.frameNumber() == 1)
                        {
                            tile.frameX = 0;
                            tile.frameY = 22;
                        }
                        if (tile.frameNumber() == 2)
                        {
                            tile.frameX = 0;
                            tile.frameY = 44;
                        }
                    }
                }
                if (tile.frameY >= 132 && tile.frameY <= 176 && (tile.frameX == 0 || tile.frameX == 66 || tile.frameX == 88))
                {
                    if (!flag)
                    {
                        KillTile(x, y);
                    }
                    if (!flag3 && !flag2)
                    {
                        if (tile.frameNumber() == 0)
                        {
                            tile.frameX = 0;
                            tile.frameY = 0;
                        }
                        if (tile.frameNumber() == 1)
                        {
                            tile.frameX = 0;
                            tile.frameY = 22;
                        }
                        if (tile.frameNumber() == 2)
                        {
                            tile.frameX = 0;
                            tile.frameY = 44;
                        }
                    }
                    else if (!flag3)
                    {
                        if (tile.frameNumber() == 0)
                        {
                            tile.frameX = 0;
                            tile.frameY = 132;
                        }
                        if (tile.frameNumber() == 1)
                        {
                            tile.frameX = 0;
                            tile.frameY = 154;
                        }
                        if (tile.frameNumber() == 2)
                        {
                            tile.frameX = 0;
                            tile.frameY = 176;
                        }
                    }
                    else if (!flag2)
                    {
                        if (tile.frameNumber() == 0)
                        {
                            tile.frameX = 66;
                            tile.frameY = 132;
                        }
                        if (tile.frameNumber() == 1)
                        {
                            tile.frameX = 66;
                            tile.frameY = 154;
                        }
                        if (tile.frameNumber() == 2)
                        {
                            tile.frameX = 66;
                            tile.frameY = 176;
                        }
                    }
                    else
                    {
                        if (tile.frameNumber() == 0)
                        {
                            tile.frameX = 88;
                            tile.frameY = 132;
                        }
                        if (tile.frameNumber() == 1)
                        {
                            tile.frameX = 88;
                            tile.frameY = 154;
                        }
                        if (tile.frameNumber() == 2)
                        {
                            tile.frameX = 88;
                            tile.frameY = 176;
                        }
                    }
                }
                if ((tile.frameX == 66 && (tile.frameY == 0 || tile.frameY == 22 || tile.frameY == 44)) || (tile.frameX == 44 && (tile.frameY == 198 || tile.frameY == 220 || tile.frameY == 242)))
                {
                    if (!flag2)
                    {
                        KillTile(x, y);
                    }
                }
                else if ((tile.frameX == 88 && (tile.frameY == 66 || tile.frameY == 88 || tile.frameY == 110)) || (tile.frameX == 66 && (tile.frameY == 198 || tile.frameY == 220 || tile.frameY == 242)))
                {
                    if (!flag3)
                    {
                        KillTile(x, y);
                    }
                }
                else if (num4 == -1)
                {
                    KillTile(x, y);
                }
                else if (num != type && tile.frameY < 198 && ((tile.frameX != 22 && tile.frameX != 44) || tile.frameY < 132))
                {
                    if (flag3 || flag2)
                    {
                        if (num4 == type)
                        {
                            if (flag3 && flag2)
                            {
                                if (tile.frameNumber() == 0)
                                {
                                    tile.frameX = 132;
                                    tile.frameY = 132;
                                }
                                if (tile.frameNumber() == 1)
                                {
                                    tile.frameX = 132;
                                    tile.frameY = 154;
                                }
                                if (tile.frameNumber() == 2)
                                {
                                    tile.frameX = 132;
                                    tile.frameY = 176;
                                }
                            }
                            else if (flag3)
                            {
                                if (tile.frameNumber() == 0)
                                {
                                    tile.frameX = 132;
                                    tile.frameY = 0;
                                }
                                if (tile.frameNumber() == 1)
                                {
                                    tile.frameX = 132;
                                    tile.frameY = 22;
                                }
                                if (tile.frameNumber() == 2)
                                {
                                    tile.frameX = 132;
                                    tile.frameY = 44;
                                }
                            }
                            else if (flag2)
                            {
                                if (tile.frameNumber() == 0)
                                {
                                    tile.frameX = 132;
                                    tile.frameY = 66;
                                }
                                if (tile.frameNumber() == 1)
                                {
                                    tile.frameX = 132;
                                    tile.frameY = 88;
                                }
                                if (tile.frameNumber() == 2)
                                {
                                    tile.frameX = 132;
                                    tile.frameY = 110;
                                }
                            }
                        }
                        else if (flag3 && flag2)
                        {
                            if (tile.frameNumber() == 0)
                            {
                                tile.frameX = 154;
                                tile.frameY = 132;
                            }
                            if (tile.frameNumber() == 1)
                            {
                                tile.frameX = 154;
                                tile.frameY = 154;
                            }
                            if (tile.frameNumber() == 2)
                            {
                                tile.frameX = 154;
                                tile.frameY = 176;
                            }
                        }
                        else if (flag3)
                        {
                            if (tile.frameNumber() == 0)
                            {
                                tile.frameX = 154;
                                tile.frameY = 0;
                            }
                            if (tile.frameNumber() == 1)
                            {
                                tile.frameX = 154;
                                tile.frameY = 22;
                            }
                            if (tile.frameNumber() == 2)
                            {
                                tile.frameX = 154;
                                tile.frameY = 44;
                            }
                        }
                        else if (flag2)
                        {
                            if (tile.frameNumber() == 0)
                            {
                                tile.frameX = 154;
                                tile.frameY = 66;
                            }
                            if (tile.frameNumber() == 1)
                            {
                                tile.frameX = 154;
                                tile.frameY = 88;
                            }
                            if (tile.frameNumber() == 2)
                            {
                                tile.frameX = 154;
                                tile.frameY = 110;
                            }
                        }
                    }
                    else
                    {
                        if (tile.frameNumber() == 0)
                        {
                            tile.frameX = 110;
                            tile.frameY = 0;
                        }
                        if (tile.frameNumber() == 1)
                        {
                            tile.frameX = 110;
                            tile.frameY = 22;
                        }
                        if (tile.frameNumber() == 2)
                        {
                            tile.frameX = 110;
                            tile.frameY = 44;
                        }
                    }
                }
                if (tile.frameX != frameX && tile.frameY != frameY && frameX >= 0 && frameY >= 0)
                {
                    TileFrame(x - 1, y);
                    TileFrame(x + 1, y);
                    TileFrame(x, y - 1);
                    TileFrame(x, y + 1);
                }
            }
            public void CheckPalmTree(int i, int j)
            {
                int num = -1;
                int num2 = -1;
                int type = this[i, j].type;
                int frameX = this[i, j].frameX;
                int frameY = this[i, j].frameY;
                if (this[i, j - 1] != null && this[i, j - 1].active())
                {
                    num = this[i, j - 1].type;
                }
                if (this[i, j + 1] != null && this[i, j + 1].active())
                {
                    num2 = this[i, j + 1].type;
                }
                if (num2 == 53)
                {
                    num2 = 53;
                }
                if (num2 == 234)
                {
                    num2 = 53;
                }
                if (num2 == 116)
                {
                    num2 = 53;
                }
                if (num2 == 112)
                {
                    num2 = 53;
                }
                if (num2 != 53 && num2 != type)
                {
                    KillTile(i, j);
                }
                if ((this[i, j].frameX == 66 || this[i, j].frameX == 220) && num2 != 53)
                {
                    KillTile(i, j);
                }
                if (num != type && this[i, j].frameX <= 44)
                {
                    this[i, j].frameX = (short)(WorldGen.genRand.Next(7, 10) * 22);
                }
                else if (num != type && this[i, j].frameX == 66)
                {
                    this[i, j].frameX = 220;
                }
                if (this[i, j].frameX != frameX && this[i, j].frameY != frameY && frameX >= 0 && frameY >= 0)
                {
                    TileFrame(i - 1, j);
                    TileFrame(i + 1, j);
                    TileFrame(i, j - 1);
                    TileFrame(i, j + 1);
                }
            }
            public void Kill(int x, int y)
            {
                if (TileEntity.ByPosition.TryGetValue(new Terraria.DataStructures.Point16(x, y), out TileEntity value))
                {
                    TileEntity.ByID.Remove(value.ID);
                    TileEntity.ByPosition.Remove(new Terraria.DataStructures.Point16(x, y));
                }
            }
            public void Framing_CheckTile(int callX, int callY)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = callX;
                int num2 = callY;
                ITile tileSafely = GetTileSafely(callX, callY);
                num -= tileSafely.frameX / 18 % 2;
                num2 -= tileSafely.frameY / 18 % 3;
                bool flag = false;
                for (int i = num; i < num + 2; i++)
                {
                    for (int j = num2; j < num2 + 3; j++)
                    {
                        ITile tile = this[i, j];
                        if (!tile.active() || tile.type != 470)
                        {
                            flag = true;
                        }
                    }
                }
                if (!SolidTileAllowBottomSlope(num, num2 + 3) || !SolidTileAllowBottomSlope(num + 1, num2 + 3))
                {
                    flag = true;
                }
                if (!flag)
                {
                    return;
                }
                Kill(num, num2);
                if (this[callX, callY].frameX / 72 != 1)
                {
                    NewItem(num * 16, num2 * 16, 32, 48, 498);
                }
                else
                {
                    NewItem(num * 16, num2 * 16, 32, 48, 1989);
                }
                destroyObject = true;
                for (int k = num; k < num + 2; k++)
                {
                    for (int l = num2; l < num2 + 3; l++)
                    {
                        if (this[k, l].active() && this[k, l].type == 470)
                        {
                            KillTile(k, l);
                        }
                    }
                }
                destroyObject = false;
            }
            public void CheckJunglePlant(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                if (this[i, j].frameY >= 36 || this[i, j].type == 236 || this[i, j].type == 238)
                {
                    bool flag = false;
                    int num = this[i, j].frameX / 18;
                    int num2 = 0;
                    while (num > 1)
                    {
                        num -= 2;
                        num2++;
                    }
                    num = i - num;
                    int num3 = 36;
                    if (type == 236 || type == 238)
                    {
                        num3 = 0;
                    }
                    int num4;
                    for (num4 = this[i, j].frameY / 18; num4 > 1; num4 -= 2)
                    {
                    }
                    num4 = j - num4;
                    int num5 = num2 * 36;
                    for (int k = num; k < num + 2; k++)
                    {
                        for (int l = num4; l < num4 + 2; l++)
                        {
                            if (this[k, l] == null)
                            {
                                this[k, l] = CreateTile();
                            }
                            if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != (k - num) * 18 + num5 || this[k, l].frameY != (l - num4) * 18 + num3)
                            {
                                flag = true;
                            }
                        }
                        if (this[k, num4 + 2] == null)
                        {
                            this[k, num4 + 2] = CreateTile();
                        }
                        if (!SolidTile(k, num4 + 2) || this[k, num4 + 2].type != 60)
                        {
                            flag = true;
                        }
                    }
                    if (!flag)
                    {
                        return;
                    }
                    if (type == 238)
                    {
                        float num6 = i * 16;
                        float num7 = j * 16;
                        float num8 = -1f;
                        int plr = 0;
                        for (int m = 0; m < 255; m++)
                        {
                            float num9 = Math.Abs(Main.player[m].position.X - num6) + Math.Abs(Main.player[m].position.Y - num7);
                            if (num9 < num8 || num8 == -1f)
                            {
                                plr = m;
                                num8 = num9;
                            }
                        }
                        if (num8 / 16f < 50f)
                        {
                            NPC.SpawnOnPlayer(plr, 262);
                        }
                    }
                    if (type == 236)
                    {
                        NewItem(i * 16, j * 16, 32, 32, 1291);
                    }
                    _ = this[i, j].frameX;
                    destroyObject = true;
                    for (int n = num; n < num + 2; n++)
                    {
                        for (int num10 = num4; num10 < num4 + 2; num10++)
                        {
                            if (this[n, num10] == null)
                            {
                                this[n, num10] = CreateTile();
                            }
                            if (this[n, num10].type == type && this[n, num10].active())
                            {
                                KillTile(n, num10);
                            }
                        }
                    }
                    destroyObject = false;
                    return;
                }
                bool flag2 = false;
                int num11 = j;
                num11 += this[i, j].frameY / 18 * -1;
                int num12 = this[i, j].frameX / 18;
                int num13 = 0;
                while (num12 > 2)
                {
                    num12 -= 3;
                    num13++;
                }
                num12 = i - num12;
                int num14 = num13 * 54;
                for (int num15 = num12; num15 < num12 + 3; num15++)
                {
                    for (int num16 = num11; num16 < num11 + 2; num16++)
                    {
                        if (this[num15, num16] == null)
                        {
                            this[num15, num16] = CreateTile();
                        }
                        if (!this[num15, num16].active() || this[num15, num16].type != type || this[num15, num16].frameX != (num15 - num12) * 18 + num14 || this[num15, num16].frameY != (num16 - num11) * 18)
                        {
                            flag2 = true;
                        }
                    }
                    if (this[num15, num11 + 2] == null)
                    {
                        this[num15, num11 + 2] = CreateTile();
                    }
                    if (!SolidTile(num15, num11 + 2) || this[num15, num11 + 2].type != 60)
                    {
                        flag2 = true;
                    }
                }
                if (!flag2)
                {
                    return;
                }
                _ = this[i, j].frameX;
                destroyObject = true;
                for (int num17 = num12; num17 < num12 + 3; num17++)
                {
                    for (int num18 = num11; num18 < num11 + 3; num18++)
                    {
                        if (this[num17, num18] == null)
                        {
                            this[num17, num18] = CreateTile();
                        }
                        if (this[num17, num18].type == type && this[num17, num18].active())
                        {
                            KillTile(num17, num18);
                        }
                    }
                }
                destroyObject = false;
            }
            public void CheckOasisPlant(int i, int j, int type = 530)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = j;
                ITile tileSafely = GetTileSafely(i, j);
                int num2 = tileSafely.frameY % 36;
                num += num2 / 18 * -1;
                int num3 = tileSafely.frameX / 18;
                int num4 = 0;
                _ = GetTileSafely(num3, num).frameY / 36;
                while (num3 > 2)
                {
                    num3 -= 3;
                    num4++;
                }
                num3 = i - num3;
                int num5 = num4 * 54;
                for (int k = num3; k < num3 + 3; k++)
                {
                    for (int l = num; l < num + 2; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != (k - num3) * 18 + num5 || this[k, l].frameY != (l - num) * 18)
                        {
                            flag = true;
                        }
                    }
                    if (this[k, num + 2] == null)
                    {
                        this[k, num + 2] = CreateTile();
                    }
                    if (!SolidTile(k, num + 2) || !TileID.Sets.Conversion.Sand[this[k, num + 2].type])
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                _ = this[i, j].frameX;
                destroyObject = true;
                for (int m = num3; m < num3 + 3; m++)
                {
                    for (int n = num; n < num + 2; n++)
                    {
                        if (this[m, n] == null)
                        {
                            this[m, n] = CreateTile();
                        }
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            KillTile(m, n);
                        }
                    }
                }
                destroyObject = false;
                for (int num6 = num3 - 1; num6 < num3 + 4; num6++)
                {
                    for (int num7 = num - 1; num7 < num + 3; num7++)
                    {
                        TileFrame(num6, num7);
                    }
                }
            }
            public void Check3x3Wall(int x, int y)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int type = this[x, y].type;
                int num = 0;
                int num2 = 0;
                int num3 = this[x, y].frameX / 18;
                while (num3 >= 3)
                {
                    num3 -= 3;
                    num++;
                }
                int num4 = x - num3;
                int num5 = this[x, y].frameY / 18;
                while (num5 >= 3)
                {
                    num5 -= 3;
                    num2++;
                }
                int num6 = y - num5;
                num5 = num2 * 54;
                num3 = num * 54;
                for (int i = num4; i < num4 + 3; i++)
                {
                    for (int j = num6; j < num6 + 3; j++)
                    {
                        if (this[i, j].type != type || !this[i, j].active() || this[i, j].wall <= 0 || this[i, j].frameX != num3 + (i - num4) * 18 || this[i, j].frameY != num5 + (j - num6) * 18)
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int k = num4; k < num4 + 3; k++)
                {
                    for (int l = num6; l < num6 + 3; l++)
                    {
                        if (this[k, l].type == type && this[k, l].active())
                        {
                            KillTile(k, l);
                        }
                    }
                }
                switch (type)
                {
                    case 240:
                        num += num2 * 36;
                        switch (num)
                        {
                            case 37:
                                NewItem(x * 16, y * 16, 32, 32, 1856);
                                break;
                            case 36:
                                NewItem(x * 16, y * 16, 32, 32, 1855);
                                break;
                            case 38:
                                NewItem(x * 16, y * 16, 32, 32, 1960);
                                break;
                            case 39:
                                NewItem(x * 16, y * 16, 32, 32, 1961);
                                break;
                            case 40:
                                NewItem(x * 16, y * 16, 32, 32, 1962);
                                break;
                            case 33:
                                NewItem(x * 16, y * 16, 32, 32, 1574);
                                break;
                            case 34:
                                NewItem(x * 16, y * 16, 32, 32, 1575);
                                break;
                            case 35:
                                NewItem(x * 16, y * 16, 32, 32, 1576);
                                break;
                            case 18:
                                NewItem(x * 16, y * 16, 32, 32, 1419);
                                break;
                            case 19:
                                NewItem(x * 16, y * 16, 32, 32, 1420);
                                break;
                            case 20:
                                NewItem(x * 16, y * 16, 32, 32, 1427);
                                break;
                            case 21:
                                NewItem(x * 16, y * 16, 32, 32, 1428);
                                break;
                            case 54:
                                NewItem(x * 16, y * 16, 32, 32, 2489);
                                break;
                            case 55:
                                NewItem(x * 16, y * 16, 32, 32, 2589);
                                break;
                            case 56:
                                NewItem(x * 16, y * 16, 32, 32, 3357);
                                break;
                            case 57:
                                NewItem(x * 16, y * 16, 32, 32, 3358);
                                break;
                            case 58:
                                NewItem(x * 16, y * 16, 32, 32, 3359);
                                break;
                            case 59:
                                NewItem(x * 16, y * 16, 32, 32, 3595);
                                break;
                            case 60:
                                NewItem(x * 16, y * 16, 32, 32, 3867);
                                break;
                            case 61:
                                NewItem(x * 16, y * 16, 32, 32, 3866);
                                break;
                            case 62:
                                NewItem(x * 16, y * 16, 32, 32, 3868);
                                break;
                            case 69:
                                NewItem(x * 16, y * 16, 32, 32, 4660);
                                break;
                            case 70:
                                NewItem(x * 16, y * 16, 32, 32, 4723);
                                break;
                            case 71:
                                NewItem(x * 16, y * 16, 32, 32, 4724);
                                break;
                            case 72:
                                NewItem(x * 16, y * 16, 32, 32, 4783);
                                break;
                            case 73:
                                NewItem(x * 16, y * 16, 32, 32, 4958);
                                break;
                            case 63:
                            case 64:
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                                NewItem(x * 16, y * 16, 32, 32, 4626 + num - 63);
                                break;
                            default:
                                if (num >= 41 && num <= 45)
                                {
                                    NewItem(x * 16, y * 16, 32, 32, 2114 + num - 41);
                                }
                                else if (num >= 46 && num <= 53)
                                {
                                    NewItem(x * 16, y * 16, 32, 32, 2442 + num - 46);
                                }
                                else if (num >= 22 && num <= 25)
                                {
                                    NewItem(x * 16, y * 16, 32, 32, 1440 + num - 22);
                                }
                                else if (num >= 26 && num <= 29)
                                {
                                    NewItem(x * 16, y * 16, 32, 32, 1496 + num - 26);
                                }
                                else if (num >= 30 && num <= 32)
                                {
                                    NewItem(x * 16, y * 16, 32, 32, 1538 + num - 30);
                                }
                                else
                                {
                                    NewItem(x * 16, y * 16, 32, 32, 1360 + num);
                                }
                                break;
                        }
                        break;
                    case 440:
                        {
                            int num7 = -1;
                            int num8 = -1;
                            switch (num)
                            {
                                case 0:
                                    num7 = 3644;
                                    num8 = 1526;
                                    break;
                                case 1:
                                    num7 = 3645;
                                    num8 = 1524;
                                    break;
                                case 2:
                                    num7 = 3646;
                                    num8 = 1525;
                                    break;
                                case 3:
                                    num7 = 3647;
                                    num8 = 1523;
                                    break;
                                case 4:
                                    num7 = 3648;
                                    num8 = 1522;
                                    break;
                                case 5:
                                    num7 = 3649;
                                    num8 = 1527;
                                    break;
                                case 6:
                                    num7 = 3650;
                                    num8 = 3643;
                                    break;
                            }
                            if (num7 != -1)
                            {
                                NewItem(x * 16, y * 16, 32, 32, num7);
                            }
                            if (num8 != -1 && num2 == 1)
                            {
                                NewItem(x * 16, y * 16, 32, 32, num8);
                            }
                            break;
                        }
                }
                destroyObject = false;
            }
            public void Check2x3Wall(int x, int y)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int type = this[x, y].type;
                int num = 0;
                int num2 = this[x, y].frameX / 18;
                while (num2 >= 2)
                {
                    num2 -= 2;
                    num++;
                }
                int num3 = x - num2;
                int num4 = y - this[x, y].frameY / 18;
                num2 = num * 36;
                for (int i = num3; i < num3 + 2; i++)
                {
                    for (int j = num4; j < num4 + 3; j++)
                    {
                        if (this[i, j].type != type || !this[i, j].active() || this[i, j].wall <= 0 || this[i, j].frameX != num2 + (i - num3) * 18 || this[i, j].frameY != (j - num4) * 18)
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int k = num3; k < num3 + 2; k++)
                {
                    for (int l = num4; l < num4 + 3; l++)
                    {
                        if (this[k, l].type == type && this[k, l].active())
                        {
                            KillTile(k, l);
                        }
                    }
                }
                if (type == 245)
                {
                    switch (num)
                    {
                        case 12:
                            NewItem(x * 16, y * 16, 32, 32, 4728);
                            break;
                        case 11:
                            NewItem(x * 16, y * 16, 32, 32, 4727);
                            break;
                        case 10:
                            NewItem(x * 16, y * 16, 32, 32, 4726);
                            break;
                        case 9:
                            NewItem(x * 16, y * 16, 32, 32, 4659);
                            break;
                        case 8:
                            NewItem(x * 16, y * 16, 32, 32, 4639);
                            break;
                        case 7:
                            NewItem(x * 16, y * 16, 32, 32, 4638);
                            break;
                        case 6:
                            NewItem(x * 16, y * 16, 32, 32, 1577);
                            break;
                        case 5:
                            NewItem(x * 16, y * 16, 32, 32, 1495);
                            break;
                        default:
                            NewItem(x * 16, y * 16, 32, 32, 1474 + num);
                            break;
                    }
                }
                destroyObject = false;
            }
            public void Check3x2Wall(int x, int y)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int type = this[x, y].type;
                int num = 0;
                int num2 = this[x, y].frameY / 18;
                while (num2 >= 2)
                {
                    num2 -= 2;
                    num++;
                }
                int num3 = y - num2;
                int num4 = x - this[x, y].frameX / 18;
                num2 = num * 36;
                for (int i = num4; i < num4 + 3; i++)
                {
                    for (int j = num3; j < num3 + 2; j++)
                    {
                        if (this[i, j].type != type || !this[i, j].active() || this[i, j].wall <= 0 || this[i, j].frameY != num2 + (j - num3) * 18 || this[i, j].frameX != (i - num4) * 18)
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int k = num4; k < num4 + 3; k++)
                {
                    for (int l = num3; l < num3 + 2; l++)
                    {
                        if (this[k, l].type == type && this[k, l].active())
                        {
                            KillTile(k, l);
                        }
                    }
                }
                if (type == 246)
                {
                    switch (num)
                    {
                        case 16:
                            NewItem(x * 16, y * 16, 32, 32, 1541);
                            break;
                        case 17:
                            NewItem(x * 16, y * 16, 32, 32, 1542);
                            break;
                        case 18:
                            NewItem(x * 16, y * 16, 32, 32, 1908);
                            break;
                        case 19:
                            NewItem(x * 16, y * 16, 32, 32, 4661);
                            break;
                        case 20:
                            NewItem(x * 16, y * 16, 32, 32, 4729);
                            break;
                        default:
                            NewItem(x * 16, y * 16, 32, 32, 1479 + num);
                            break;
                    }
                }
                destroyObject = false;
            }
            public void Check4x3Wall(int x, int y)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int type = this[x, y].type;
                int num = 0;
                int num2 = this[x, y].frameY / 18;
                while (num2 >= 3)
                {
                    num2 -= 3;
                    num++;
                }
                int num3 = y - num2;
                int num4 = x - this[x, y].frameX / 18;
                num2 = num * 54;
                for (int i = num4; i < num4 + 4; i++)
                {
                    for (int j = num3; j < num3 + 3; j++)
                    {
                        if (this[i, j].type != type || !this[i, j].active() || this[i, j].wall <= 0 || this[i, j].frameY != num2 + (j - num3) * 18 || this[i, j].frameX != (i - num4) * 18)
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int k = num4; k < num4 + 4; k++)
                {
                    for (int l = num3; l < num3 + 3; l++)
                    {
                        if (this[k, l].type == type && this[k, l].active())
                        {
                            KillTile(k, l);
                        }
                    }
                }
                if (type == 241)
                {
                    NewItem(x * 16, y * 16, 32, 32, 1417);
                }
                destroyObject = false;
            }
            public void Check6x4Wall(int x, int y)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int type = this[x, y].type;
                int num = 0;
                int num2 = this[x, y].frameY / 18;
                int num3 = this[x, y].frameX / 18;
                num = 27 * (num3 / 6) + (num2 >> 2);
                num2 %= 4;
                num3 %= 6;
                int num4 = y - num2;
                int num5 = x - this[x, y].frameX / 18 % 6;
                num2 = num % 27 * 72;
                num3 = num / 27 * 108;
                for (int i = num5; i < num5 + 6; i++)
                {
                    for (int j = num4; j < num4 + 4; j++)
                    {
                        if (this[i, j].type != type || !this[i, j].active() || this[i, j].wall <= 0 || this[i, j].frameY != num2 + (j - num4) * 18 || this[i, j].frameX != num3 + (i - num5) * 18)
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int k = num5; k < num5 + 6; k++)
                {
                    for (int l = num4; l < num4 + 4; l++)
                    {
                        if (this[k, l].type == type && this[k, l].active())
                        {
                            KillTile(k, l);
                        }
                    }
                }
                if (type == 242)
                {
                    switch (num)
                    {
                        case 30:
                            NewItem(x * 16, y * 16, 32, 32, 2995);
                            break;
                        case 44:
                            NewItem(x * 16, y * 16, 32, 32, 4725);
                            break;
                        case 43:
                            NewItem(x * 16, y * 16, 32, 32, 4658);
                            break;
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                            NewItem(x * 16, y * 16, 32, 32, 4632 + num - 37);
                            break;
                        default:
                            if (num >= 31 && num <= 35)
                            {
                                NewItem(x * 16, y * 16, 32, 32, 3055 + num - 31);
                            }
                            else if (num >= 27 && num <= 29)
                            {
                                NewItem(x * 16, y * 16, 32, 32, 2865 + num - 27);
                            }
                            else if (num == 36)
                            {
                                NewItem(x * 16, y * 16, 32, 32, 3596);
                            }
                            else if (num == 26)
                            {
                                NewItem(x * 16, y * 16, 32, 32, 2497);
                            }
                            else if (num == 25)
                            {
                                NewItem(x * 16, y * 16, 32, 32, 2495);
                            }
                            else if (num >= 22)
                            {
                                NewItem(x * 16, y * 16, 32, 32, 2281 + num - 22);
                            }
                            else if (num >= 17)
                            {
                                NewItem(x * 16, y * 16, 32, 32, 1846 + num - 17);
                            }
                            else if (num == 16)
                            {
                                NewItem(x * 16, y * 16, 32, 32, 1573);
                            }
                            else if (num >= 13)
                            {
                                NewItem(x * 16, y * 16, 32, 32, 1500 + num - 13);
                            }
                            else if (num >= 6)
                            {
                                NewItem(x * 16, y * 16, 32, 32, 1433 + num - 6);
                            }
                            else
                            {
                                NewItem(x * 16, y * 16, 32, 32, 1421 + num);
                            }
                            break;
                    }
                }
                destroyObject = false;
            }
            public void Check5x4(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = i;
                int num2 = j;
                int num3 = 0;
                int num4;
                for (num4 = this[i, j].frameX / 18; num4 >= 5; num4 -= 5)
                {
                    num3++;
                }
                num -= num4;
                num2 += this[i, j].frameY / 18 * -1;
                for (int k = num; k < num + 5; k++)
                {
                    for (int l = num2; l < num2 + 4; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != num3 * 90 + (k - num) * 18 || this[k, l].frameY != (l - num2) * 18)
                        {
                            flag = true;
                        }
                    }
                    if (this[k, num2 + 4] == null)
                    {
                        this[k, num2 + 4] = CreateTile();
                    }
                    if (!SolidTileAllowBottomSlope(k, num2 + 4))
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int m = num; m < num + 5; m++)
                {
                    for (int n = num2; n < num2 + 4; n++)
                    {
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            KillTile(m, n);
                        }
                    }
                }
                if (type == 464)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3814);
                }
                if (type == 466)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3816);
                }
                destroyObject = false;
                for (int num5 = num - 1; num5 < num + 6; num5++)
                {
                    for (int num6 = num2 - 1; num6 < num2 + 5; num6++)
                    {
                        TileFrame(num5, num6);
                    }
                }
            }
            public void CheckWeaponsRack(int i, int j)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = i;
                int num2 = j - this[i, j].frameY / 18;
                int num3 = this[i, j].frameX;
                int num4 = 0;
                while (num3 >= 5000)
                {
                    num3 -= 5000;
                    num4++;
                }
                if (num4 != 0)
                {
                    num3 = (num4 - 1) * 18;
                }
                num3 %= 54;
                num -= num3 / 18;
                bool flag = false;
                for (int k = 0; k < 3; k++)
                {
                    for (int l = 0; l < 3; l++)
                    {
                        int x = num + k;
                        int y = num2 + l;
                        int num5 = this[x, y].frameX;
                        int num6 = 0;
                        while (num5 >= 5000)
                        {
                            num5 -= 5000;
                            num6++;
                        }
                        if (num6 != 0)
                        {
                            num5 = (num6 - 1) * 18;
                        }
                        num5 %= 54;
                        if (!this[x, y].active() || this[x, y].type != 334 || this[x, y].wall <= 0 || this[x, y].frameY != l * 18 || num5 != k * 18)
                        {
                            flag = true;
                        }
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                NewItem(i * 16, j * 16, 48, 48, 2699);
                for (int m = 0; m < 3; m++)
                {
                    for (int n = 0; n < 3; n++)
                    {
                        int num7 = num + m;
                        int num8 = num2 + n;
                        if (this[num7, num8].active() && this[num7, num8].type == 334)
                        {
                            KillTile(num7, num8);
                        }
                    }
                }
                destroyObject = false;
            }
            public void CheckChand(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = i;
                int num2 = j;
                int num3 = 3;
                if (type == 454)
                {
                    num3 = 4;
                }
                num = this[i, j].frameX / 18;
                int num4 = 0;
                while (num >= num3)
                {
                    num4++;
                    num -= num3;
                }
                int num5 = i - num;
                int num6 = 18 * num3 * num4;
                if (num >= num3)
                {
                    num -= num3;
                }
                num = i - num;
                num2 = this[i, j].frameY / 18;
                int num7 = 0;
                while (num2 >= 3)
                {
                    num7++;
                    num2 -= 3;
                }
                if (num6 >= 108)
                {
                    num7 += 37 * (num6 / 108);
                }
                int num8 = 54 * num7;
                if (num6 >= 108)
                {
                    num8 -= 54 * (num6 / 108) * 37;
                }
                if (num2 >= 3)
                {
                    num2 -= 3;
                }
                num2 = j - num2;
                for (int k = num; k < num + num3; k++)
                {
                    for (int l = num2; l < num2 + 3; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != (k - num5) * 18 + num6 || this[k, l].frameY != (l - num2) * 18 + num8)
                        {
                            flag = true;
                        }
                    }
                }
                if (this[num + 1, num2 - 1] == null)
                {
                    this[num + 1, num2 - 1] = CreateTile();
                }
                if (!this[num + 1, num2 - 1].nactive() || !Main.tileSolid[this[num + 1, num2 - 1].type] || Main.tileSolidTop[this[num + 1, num2 - 1].type])
                {
                    flag = true;
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int m = num; m < num + num3; m++)
                {
                    for (int n = num2; n < num2 + 3; n++)
                    {
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            KillTile(m, n);
                        }
                    }
                }
                if (type == 454)
                {
                    switch (Main.rand.Next(9))
                    {
                        case 2:
                        case 3:
                        case 4:
                            {
                                int num13 = Main.rand.Next(10, 31);
                                while (num13 > 0)
                                {
                                    int num14 = Main.rand.Next(2, 11);
                                    if (num14 > num13)
                                    {
                                        num14 = num13;
                                    }
                                    num13 -= num14;
                                    NewItem(i * 16, j * 16, 32, 32, 72, num14);
                                }
                                break;
                            }
                        case 5:
                        case 6:
                            {
                                int num17 = Main.rand.Next(60, 80);
                                while (num17 > 0)
                                {
                                    int num18 = Main.rand.Next(3, 16);
                                    if (num18 > num17)
                                    {
                                        num18 = num17;
                                    }
                                    num17 -= num18;
                                    NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 72, num18);
                                }
                                NewItem(i * 16, j * 16, 32, 32, 1358);
                                break;
                            }
                        case 7:
                            {
                                int num15 = Main.rand.Next(10, 31);
                                while (num15 > 0)
                                {
                                    int num16 = Main.rand.Next(2, 9);
                                    if (num16 > num15)
                                    {
                                        num16 = num15;
                                    }
                                    num15 -= num16;
                                    NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 72, num16);
                                }
                                if (Main.rand.Next(8) == 0)
                                {
                                    NewItem(i * 16, j * 16, 32, 32, 3532);
                                }
                                if (Main.rand.Next(8) == 0)
                                {
                                    NewItem(i * 16, j * 16, 32, 32, 3532);
                                }
                                NewItem(i * 16, j * 16, 32, 32, 73);
                                break;
                            }
                        case 8:
                            {
                                int num9 = 100;
                                while (num9 > 0)
                                {
                                    int num10 = Main.rand.Next(3, 16);
                                    if (num10 > num9)
                                    {
                                        num10 = num9;
                                    }
                                    num9 -= num10;
                                    NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 72, num10);
                                }
                                int num11 = Main.rand.Next(30, 91);
                                while (num11 > 0)
                                {
                                    int num12 = Main.rand.Next(7, 14);
                                    if (num12 > num11)
                                    {
                                        num12 = num11;
                                    }
                                    num11 -= num12;
                                    NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 1349, num12);
                                }
                                NewItem(i * 16, j * 16, 32, 32, 1358);
                                NewItem(i * 16, j * 16, 32, 32, 73);
                                break;
                            }
                    }
                }
                if (type == 34)
                {
                    int type2;
                    switch (num7)
                    {
                        case 1:
                            type2 = 107;
                            break;
                        case 2:
                            type2 = 108;
                            break;
                        case 3:
                            type2 = 710;
                            break;
                        case 4:
                            type2 = 711;
                            break;
                        case 5:
                            type2 = 712;
                            break;
                        case 6:
                            type2 = 1812;
                            break;
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                            type2 = 2055 + num7 - 7;
                            break;
                        default:
                            if (num7 >= 18 && num7 <= 21)
                            {
                                type2 = 2141 + num7 - 18;
                                break;
                            }
                            switch (num7)
                            {
                                case 22:
                                    type2 = 2224;
                                    break;
                                case 23:
                                    type2 = 2525;
                                    break;
                                case 24:
                                    type2 = 2543;
                                    break;
                                case 25:
                                    type2 = 2558;
                                    break;
                                case 26:
                                    type2 = 2573;
                                    break;
                                case 27:
                                    type2 = 2652;
                                    break;
                                case 28:
                                    type2 = 2653;
                                    break;
                                case 29:
                                    type2 = 2654;
                                    break;
                                case 30:
                                    type2 = 2655;
                                    break;
                                case 31:
                                    type2 = 2656;
                                    break;
                                case 32:
                                    type2 = 2657;
                                    break;
                                case 33:
                                    type2 = 2813;
                                    break;
                                case 34:
                                    type2 = 3177;
                                    break;
                                case 35:
                                    type2 = 3179;
                                    break;
                                case 36:
                                    type2 = 3178;
                                    break;
                                case 37:
                                    type2 = 3894;
                                    break;
                                case 38:
                                    type2 = 3938;
                                    break;
                                case 39:
                                    type2 = 3964;
                                    break;
                                case 40:
                                    type2 = 4152;
                                    break;
                                case 41:
                                    type2 = 4173;
                                    break;
                                case 42:
                                    type2 = 4194;
                                    break;
                                case 43:
                                    type2 = 4215;
                                    break;
                                case 44:
                                    type2 = 4305;
                                    break;
                                case 45:
                                    type2 = 4573;
                                    break;
                                default:
                                    type2 = 106;
                                    break;
                            }
                            break;
                    }
                    NewItem(i * 16, j * 16, 32, 32, type2);
                }
                destroyObject = false;
                for (int num19 = num - 1; num19 < num + num3 + 1; num19++)
                {
                    for (int num20 = num2 - 1; num20 < num2 + 4; num20++)
                    {
                        TileFrame(num19, num20);
                    }
                }
            }
            public void Check2x5(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = i;
                int num2 = j;
                num = this[i, j].frameX / 18;
                int num3 = 0;
                while (num >= 2)
                {
                    num3++;
                    num -= 2;
                }
                int num4 = i - num;
                int num5 = 36 * num3;
                int num6 = this[i, j].frameY % 80 / 18;
                if (num >= 3)
                {
                    num -= 2;
                }
                num = i - num;
                num2 -= num6;
                for (int k = num; k < num + 2; k++)
                {
                    for (int l = num2; l < num2 + 5; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != (k - num4) * 18 + num5 || this[k, l].frameY != (l - num2) * 18)
                        {
                            flag = true;
                        }
                    }
                }
                for (int m = num; m < num + 2; m++)
                {
                    if (this[m, num2 + 5] == null)
                    {
                        this[m, num2 + 5] = CreateTile();
                    }
                    if (!SolidTileAllowBottomSlope(m, num2 + 5))
                    {
                        flag = true;
                        break;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int n = num; n < num + 2; n++)
                {
                    for (int num7 = num2; num7 < num2 + 5; num7++)
                    {
                        if (this[n, num7].type == type && this[n, num7].active())
                        {
                            KillTile(n, num7);
                        }
                    }
                }
                if (type == 547)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4430 + num3);
                }
                destroyObject = false;
                for (int num8 = num - 1; num8 < num + 3; num8++)
                {
                    for (int num9 = num2 - 1; num9 < num2 + 6; num9++)
                    {
                        TileFrame(num8, num9);
                    }
                }
            }
            public void Check3x6(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = i;
                int num2 = j;
                num = this[i, j].frameX / 18;
                int num3 = 0;
                while (num >= 3)
                {
                    num3++;
                    num -= 3;
                }
                int num4 = i - num;
                int num5 = 54 * num3;
                int num6 = this[i, j].frameY % 96 / 18;
                if (num >= 4)
                {
                    num -= 3;
                }
                num = i - num;
                num2 -= num6;
                for (int k = num; k < num + 3; k++)
                {
                    for (int l = num2; l < num2 + 6; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != (k - num4) * 18 + num5 || this[k, l].frameY != (l - num2) * 18)
                        {
                            flag = true;
                        }
                    }
                }
                for (int m = num; m < num + 3; m++)
                {
                    if (this[m, num2 + 6] == null)
                    {
                        this[m, num2 + 6] = CreateTile();
                    }
                    if (!SolidTileAllowBottomSlope(m, num2 + 6))
                    {
                        flag = true;
                        break;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int n = num; n < num + 3; n++)
                {
                    for (int num7 = num2; num7 < num2 + 6; num7++)
                    {
                        if (this[n, num7].type == type && this[n, num7].active())
                        {
                            KillTile(n, num7);
                        }
                    }
                }
                if (type == 548)
                {
                    if (num3 >= 7)
                    {
                        NewItem(i * 16, j * 16, 32, 32, 4902 + num3 - 7);
                    }
                    else
                    {
                        NewItem(i * 16, j * 16, 32, 32, 4435 + num3);
                    }
                }
                if (type == 614)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4906);
                }
                destroyObject = false;
                for (int num8 = num - 1; num8 < num + 4; num8++)
                {
                    for (int num9 = num2 - 1; num9 < num2 + 7; num9++)
                    {
                        TileFrame(num8, num9);
                    }
                }
            }
            public void Check1x2(int x, int j, ushort type)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = j;
                bool flag = true;
                if (this[x, num] == null)
                {
                    this[x, num] = CreateTile();
                }
                if (this[x, num + 1] == null)
                {
                    this[x, num + 1] = CreateTile();
                }
                int num2 = this[x, num].frameY;
                int num3 = 0;
                while (num2 >= 40)
                {
                    num2 -= 40;
                    num3++;
                }
                if (num2 == 18)
                {
                    num--;
                }
                int num4 = this[x, num].frameX / 18;
                if (this[x, num].frameX == -1)
                {
                    num4 = this[x, num + 1].frameX / 18;
                }
                if (this[x, num] == null)
                {
                    this[x, num] = CreateTile();
                }
                if (this[x, num].frameY == 40 * num3 && this[x, num + 1].frameY == 40 * num3 + 18 && this[x, num].type == type && this[x, num + 1].type == type)
                {
                    flag = false;
                }
                if (this[x, num + 2] == null)
                {
                    this[x, num + 2] = CreateTile();
                }
                if (!SolidTileAllowBottomSlope(x, num + 2) && !TileID.Sets.Platforms[this[x, num + 2].type])
                {
                    flag = true;
                }
                if (this[x, num].type == 20)
                {
                    int num5 = this[x, num].frameX / 54;
                    int type2 = this[x, num + 2].type;
                    int num6 = -1;
                    switch (type2)
                    {
                        case 2:
                        case 477:
                            num6 = 0;
                            break;
                        case 147:
                            num6 = 1;
                            break;
                        case 60:
                            num6 = 2;
                            break;
                        case 23:
                            num6 = 3;
                            break;
                        case 199:
                            num6 = 4;
                            break;
                        case 109:
                        case 492:
                            num6 = 5;
                            break;
                        case 53:
                            num6 = 6;
                            break;
                        case 116:
                            num6 = 7;
                            break;
                        case 234:
                            num6 = 8;
                            break;
                        case 112:
                            num6 = 9;
                            break;
                        default:
                            flag = true;
                            break;
                    }
                    if (!flag && num5 != num6)
                    {
                        int num7 = 54 * num6;
                        num7 += WorldGen.genRand.Next(3) * 18;
                        this[x, num].frameX = (short)num7;
                        this[x, num + 1].frameX = (short)num7;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                if (this[x, num].type == type)
                {
                    KillTile(x, num);
                }
                if (this[x, num + 1].type == type)
                {
                    KillTile(x, num + 1);
                }
                if (type == 216)
                {
                    NewItem(x * 16, num * 16, 32, 32, 970 + num3);
                }
                if (type == 338)
                {
                    NewItem(x * 16, num * 16, 32, 32, 2738);
                }
                if (type == 390)
                {
                    NewItem(x * 16, num * 16, 16, 32, 3253);
                }
                if (type == 493)
                {
                    int num8 = 0;
                    switch (num4)
                    {
                        case 0:
                            num8 = 4083;
                            break;
                        case 1:
                            num8 = 4084;
                            break;
                        case 2:
                            num8 = 4085;
                            break;
                        case 3:
                            num8 = 4086;
                            break;
                        case 4:
                            num8 = 4087;
                            break;
                        case 5:
                            num8 = 4088;
                            break;
                    }
                    if (num8 > 0)
                    {
                        NewItem(x * 16, num * 16, 32, 32, num8);
                    }
                }
                if (type == 15)
                {
                    int itemDrop_Chair = WorldGen.GetItemDrop_Chair(num3);
                    NewItem(x * 16, num * 16, 32, 32, itemDrop_Chair);
                }
                switch (type)
                {
                    case 497:
                        {
                            int itemDrop_Toilet = WorldGen.GetItemDrop_Toilet(num3);
                            NewItem(x * 16, num * 16, 32, 32, itemDrop_Toilet);
                            break;
                        }
                    case 134:
                        if (num3 == 1)
                        {
                            NewItem(x * 16, num * 16, 32, 32, 1220);
                        }
                        else
                        {
                            NewItem(x * 16, num * 16, 32, 32, 525);
                        }
                        break;
                }
                destroyObject = false;
            }
            public void Check3x5(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = i;
                int num2 = j;
                num = this[i, j].frameX / 18;
                int num3 = 0;
                while (num >= 3)
                {
                    num3++;
                    num -= 3;
                }
                int num4 = i - num;
                int num5 = 54 * num3;
                int num6 = this[i, j].frameY % 90 / 18;
                if (num >= 4)
                {
                    num -= 3;
                }
                num = i - num;
                num2 -= num6;
                for (int k = num; k < num + 3; k++)
                {
                    for (int l = num2; l < num2 + 5; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != (k - num4) * 18 + num5 || this[k, l].frameY != (l - num2) * 18)
                        {
                            flag = true;
                        }
                    }
                }
                for (int m = num; m < num + 3; m++)
                {
                    if (this[m, num2 + 5] == null)
                    {
                        this[m, num2 + 5] = CreateTile();
                    }
                    if (!SolidTileAllowBottomSlope(m, num2 + 5))
                    {
                        flag = true;
                        break;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int n = num; n < num + 3; n++)
                {
                    for (int num7 = num2; num7 < num2 + 5; num7++)
                    {
                        if (this[n, num7].type == type && this[n, num7].active())
                        {
                            KillTile(n, num7);
                        }
                    }
                }
                if (type == 613)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4904 + num3);
                }
                destroyObject = false;
                for (int num8 = num - 1; num8 < num + 4; num8++)
                {
                    for (int num9 = num2 - 1; num9 < num2 + 6; num9++)
                    {
                        TileFrame(num8, num9);
                    }
                }
            }
            public void Check1x1(int x, int y, int type)
            {
                if (this[x, y + 1] != null && !SolidTileAllowBottomSlope(x, y + 1))
                {
                    KillTile(x, y);
                }
            }
            public void CheckGolf1x1(int x, int y, int type)
            {
                ITile tile = this[x, y];
                bool flag = false;
                if (tile.frameX % 18 != 0)
                {
                    flag = true;
                }
                if (tile.frameY % 18 != 0)
                {
                    flag = true;
                }
                if (!SolidTileAllowBottomSlope(x, y + 1))
                {
                    flag = true;
                }
                if (flag)
                {
                    KillTile(x, y);
                }
            }
            public void CheckLogicTiles(int x, int y, int type)
            {
                if (type == 419)
                {
                    ITile tile = this[x, y + 1];
                    if (tile != null && (!tile.active() || (tile.type != 420 && tile.type != 419)))
                    {
                        KillTile(x, y);
                        return;
                    }
                }
                ITile tile2 = this[x, y];
                bool flag = false;
                if (tile2.frameX % 18 != 0)
                {
                    flag = true;
                }
                if (tile2.frameY % 18 != 0)
                {
                    flag = true;
                }
                if (flag)
                {
                    KillTile(x, y);
                }
            }
            UnifiedRandom genRand => WorldGen.genRand;
            public void Check2x1(int i, int y, ushort type)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = i;
                bool flag = true;
                if (this[num, y] == null)
                {
                    this[num, y] = CreateTile();
                }
                int num2 = this[num, y].frameX / 18;
                int num3 = num2 >> 1;
                num2 %= 2;
                num -= num2;
                if (this[num, y] == null)
                {
                    this[num, y] = CreateTile();
                }
                if (this[num + 1, y] == null)
                {
                    this[num + 1, y] = CreateTile();
                }
                if (this[num, y + 1] == null)
                {
                    this[num, y + 1] = CreateTile();
                }
                if (this[num + 1, y + 1] == null)
                {
                    this[num + 1, y + 1] = CreateTile();
                }
                if (this[num + 1, y].frameX == this[num, y].frameX + 18 && this[num, y].type == type && this[num + 1, y].type == type)
                {
                    flag = false;
                }
                if (type == 29 || type == 103 || type == 462)
                {
                    if (!this[num, y + 1].active() || !Main.tileTable[this[num, y + 1].type] || this[num, y + 1].halfBrick() || this[num, y + 1].topSlope())
                    {
                        flag = true;
                    }
                    if (!this[num + 1, y + 1].active() || !Main.tileTable[this[num + 1, y + 1].type] || this[num + 1, y + 1].halfBrick() || this[num + 1, y + 1].topSlope())
                    {
                        flag = true;
                    }
                }
                else
                {
                    if (!SolidTileAllowBottomSlope(num, y + 1))
                    {
                        flag = true;
                    }
                    if (!SolidTileAllowBottomSlope(num + 1, y + 1))
                    {
                        flag = true;
                    }
                }
                if (type == 185 && this[num, y].frameX >= 1368 && this[num, y].frameX <= 1458 && this[num, y + 1].type != 2 && this[num + 1, y + 1].type != 2 && this[num, y + 1].type != 477 && this[num + 1, y + 1].type != 477 && this[num, y + 1].type != 492 && this[num + 1, y + 1].type != 492)
                {
                    this[num, y].frameX -= 1368;
                    this[num + 1, y].frameX -= 1368;
                }
                if (!flag)
                {
                    return;
                }
                int frameX = this[num, y].frameX;
                if (!this[num, y].active())
                {
                    frameX = this[num + 1, y].frameX;
                }
                destroyObject = true;
                if (this[num, y].type == type)
                {
                    KillTile(num, y);
                }
                if (this[num + 1, y].type == type)
                {
                    KillTile(num + 1, y);
                }
                if (type == 16)
                {
                    if (num3 == 1)
                    {
                        NewItem(num * 16, y * 16, 32, 32, 716);
                    }
                    else
                    {
                        NewItem(num * 16, y * 16, 32, 32, 35);
                    }
                }
                if (type == 18)
                {
                    int type2 = 36;
                    if (num3 >= 1 && num3 <= 3)
                    {
                        type2 = 634 + num3;
                    }
                    else if (num3 >= 4 && num3 <= 8)
                    {
                        type2 = 807 + num3;
                    }
                    else
                    {
                        switch (num3)
                        {
                            case 9:
                                type2 = 916;
                                break;
                            case 10:
                                type2 = 1145;
                                break;
                            case 11:
                                type2 = 1398;
                                break;
                            case 12:
                                type2 = 1401;
                                break;
                            case 13:
                                type2 = 1404;
                                break;
                            case 14:
                                type2 = 1461;
                                break;
                            case 15:
                                type2 = 1511;
                                break;
                            case 16:
                                type2 = 1795;
                                break;
                            case 17:
                                type2 = 1817;
                                break;
                            case 18:
                                type2 = 2229;
                                break;
                            case 19:
                                type2 = 2251;
                                break;
                            case 20:
                                type2 = 2252;
                                break;
                            case 21:
                                type2 = 2253;
                                break;
                            case 22:
                                type2 = 2534;
                                break;
                            case 23:
                                type2 = 673;
                                break;
                            case 24:
                                type2 = 2631;
                                break;
                            case 25:
                                type2 = 2632;
                                break;
                            case 26:
                                type2 = 2633;
                                break;
                            case 27:
                                type2 = 2826;
                                break;
                            case 28:
                                type2 = 3156;
                                break;
                            case 29:
                                type2 = 3158;
                                break;
                            case 30:
                                type2 = 3157;
                                break;
                            case 31:
                                type2 = 3909;
                                break;
                            case 32:
                                type2 = 3910;
                                break;
                            case 33:
                                type2 = 3949;
                                break;
                            case 34:
                                type2 = 3975;
                                break;
                            case 35:
                                type2 = 4163;
                                break;
                            case 36:
                                type2 = 4184;
                                break;
                            case 37:
                                type2 = 4205;
                                break;
                            case 38:
                                type2 = 4226;
                                break;
                            case 39:
                                type2 = 4315;
                                break;
                            case 40:
                                type2 = 4584;
                                break;
                        }
                    }
                    NewItem(num * 16, y * 16, 32, 32, type2);
                }
                if (type == 185)
                {
                    if (frameX >= 576 && frameX <= 610)
                    {
                        NewItem(num * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100));
                        NewItem(num * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100));
                        if (WorldGen.genRand.Next(3) != 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100));
                        }
                        if (WorldGen.genRand.Next(3) != 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100));
                        }
                        if (genRand.Next(2) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 71, genRand.Next(10, 100));
                        }
                        if (genRand.Next(2) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 71, genRand.Next(20, 100));
                        }
                        if (genRand.Next(3) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 71, genRand.Next(10, 100));
                        }
                        if (genRand.Next(3) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 71, genRand.Next(20, 100));
                        }
                        if (genRand.Next(4) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 71, genRand.Next(10, 100));
                        }
                        if (genRand.Next(4) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 71, genRand.Next(20, 100));
                        }
                        if (genRand.Next(5) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 71, genRand.Next(10, 100));
                        }
                        if (genRand.Next(5) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 71, genRand.Next(20, 100));
                        }
                    }
                    if (frameX >= 612 && frameX <= 646)
                    {
                        NewItem(num * 16, y * 16, 32, 32, 72, genRand.Next(10, 100));
                        if (genRand.Next(2) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 72, genRand.Next(20, 100));
                        }
                        if (genRand.Next(3) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 72, genRand.Next(30, 100));
                        }
                    }
                    if (frameX >= 648 && frameX <= 682)
                    {
                        NewItem(num * 16, y * 16, 32, 32, 73, genRand.Next(1, 6));
                        if (genRand.Next(2) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 73, genRand.Next(2, 6));
                        }
                        if (genRand.Next(3) == 0)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 73, genRand.Next(3, 6));
                        }
                    }
                    if (frameX >= 684 && frameX <= 718)
                    {
                        NewItem(num * 16, y * 16, 32, 32, 181, genRand.Next(1, 4));
                    }
                    if (frameX >= 720 && frameX <= 754)
                    {
                        NewItem(num * 16, y * 16, 32, 32, 180, genRand.Next(1, 4));
                    }
                    if (frameX >= 756 && frameX <= 790)
                    {
                        NewItem(num * 16, y * 16, 32, 32, 177, genRand.Next(1, 4));
                    }
                    if (frameX >= 792 && frameX <= 826)
                    {
                        NewItem(num * 16, y * 16, 32, 32, 179, genRand.Next(1, 4));
                    }
                    if (frameX >= 828 && frameX <= 862)
                    {
                        NewItem(num * 16, y * 16, 32, 32, 178, genRand.Next(1, 4));
                    }
                    if (frameX >= 864 && frameX <= 898)
                    {
                        NewItem(num * 16, y * 16, 32, 32, 182, genRand.Next(1, 4));
                    }
                }
                if (type == 462)
                {
                    NewItem(num * 16, y * 16, 32, 32, 3795);
                }
                if (type == 29)
                {
                    NewItem(num * 16, y * 16, 32, 32, 87);
                }
                switch (type)
                {
                    case 103:
                        {
                            int type3 = 356;
                            if (num3 == 1)
                            {
                                type3 = 2235;
                            }
                            if (num3 == 2)
                            {
                                type3 = 2242;
                            }
                            if (num3 == 3)
                            {
                                type3 = 2243;
                            }
                            NewItem(num * 16, y * 16, 32, 32, type3);
                            break;
                        }
                    case 134:
                        if (num3 == 1)
                        {
                            NewItem(num * 16, y * 16, 32, 32, 1220);
                        }
                        else
                        {
                            NewItem(num * 16, y * 16, 32, 32, 525);
                        }
                        break;
                }
                destroyObject = false;
                SquareTileFrame(num, y);
                SquareTileFrame(num + 1, y);
            }
            public void CheckOnTable1x1(int x, int y, int type)
            {
                if (this[x, y + 1] == null)
                {
                    return;
                }
                if (this[x, y + 1].topSlope())
                {
                    if (TileID.Sets.Platforms[this[x, y + 1].type])
                    {
                        if ((this[x, y + 1].blockType() != 3 || !this[x - 1, y + 1].active() || this[x - 1, y + 1].blockType() != 0 || !TileID.Sets.Platforms[this[x - 1, y + 1].type]) && (this[x, y + 1].blockType() != 2 || !this[x + 1, y + 1].active() || this[x + 1, y + 1].blockType() != 0 || !TileID.Sets.Platforms[this[x + 1, y + 1].type]))
                        {
                            KillTile(x, y);
                        }
                    }
                    else
                    {
                        KillTile(x, y);
                    }
                }
                else
                {
                    if (this[x, y + 1].active() && Main.tileTable[this[x, y + 1].type] && !this[x, y + 1].halfBrick())
                    {
                        return;
                    }
                    if (type == 78)
                    {
                        if (!SolidTileAllowBottomSlope(x, y + 1))
                        {
                            KillTile(x, y);
                        }
                    }
                    else
                    {
                        KillTile(x, y);
                    }
                }
            }
            public void CheckChest(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = 0;
                int num2 = j;
                num += this[i, j].frameX / 18;
                num2 += this[i, j].frameY / 18 * -1;
                while (num > 1)
                {
                    num -= 2;
                }
                num *= -1;
                num += i;
                for (int k = num; k < num + 2; k++)
                {
                    for (int l = num2; l < num2 + 2; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        int num3;
                        for (num3 = this[k, l].frameX / 18; num3 > 1; num3 -= 2)
                        {
                        }
                        if (!this[k, l].active() || this[k, l].type != type || num3 != k - num || this[k, l].frameY != (l - num2) * 18)
                        {
                            flag = true;
                        }
                    }
                    if (this[k, num2 + 2] == null)
                    {
                        this[k, num2 + 2] = CreateTile();
                    }
                    if ((!this[k, num2 + 2].active() || !Main.tileSolid[this[k, num2 + 2].type]) && CanDestroyChest(num, num2))
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                int chestItemDrop = GetChestItemDrop(i, j, type);
                destroyObject = true;
                for (int m = num; m < num + 2; m++)
                {
                    for (int n = num2; n < num2 + 3; n++)
                    {
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            DestroyChest(m, n);
                            KillTile(m, n);
                        }
                    }
                }
                NewItem(i * 16, j * 16, 32, 32, chestItemDrop);
                destroyObject = false;
            }
            public bool CanDestroyChest(int X, int Y)
            {
                short i = (short)FindChest(X, Y);
                if (i == -1) return false;
                Chest chest = Chest[i];
                for (int j = 0; j < 40; j++)
                {
                    if (chest.item[j] != null && chest.item[j].type > 0 && chest.item[j].stack > 0)
                    {
                        return false;
                    }
                }
                return true;

            }
            public void CheckMan(int i, int j)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = i;
                int num2 = j - this[i, j].frameY / 18;
                int num3;
                for (num3 = this[i, j].frameX; num3 >= 100; num3 -= 100)
                {
                }
                while (num3 >= 36)
                {
                    num3 -= 36;
                }
                num -= num3 / 18;
                bool flag = false;
                for (int k = 0; k <= 1; k++)
                {
                    for (int l = 0; l <= 2; l++)
                    {
                        int x = num + k;
                        int y = num2 + l;
                        int num4;
                        for (num4 = this[x, y].frameX; num4 >= 100; num4 -= 100)
                        {
                        }
                        if (num4 >= 36)
                        {
                            num4 -= 36;
                        }
                        if (!this[x, y].active() || this[x, y].type != 128 || this[x, y].frameY != l * 18 || num4 != k * 18)
                        {
                            flag = true;
                        }
                    }
                }
                if (!SolidTileAllowBottomSlope(num, num2 + 3) || !SolidTileAllowBottomSlope(num + 1, num2 + 3))
                {
                    flag = true;
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                NewItem(i * 16, j * 16, 32, 32, 498);
                for (int m = 0; m <= 1; m++)
                {
                    for (int n = 0; n <= 2; n++)
                    {
                        int num5 = num + m;
                        int num6 = num2 + n;
                        if (this[num5, num6].active() && this[num5, num6].type == 128)
                        {
                            KillTile(num5, num6);
                        }
                    }
                }
                destroyObject = false;
            }
            public void CheckWoman(int i, int j)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = i;
                int num2 = j - this[i, j].frameY / 18;
                int num3;
                for (num3 = this[i, j].frameX; num3 >= 100; num3 -= 100)
                {
                }
                while (num3 >= 36)
                {
                    num3 -= 36;
                }
                num -= num3 / 18;
                bool flag = false;
                for (int k = 0; k <= 1; k++)
                {
                    for (int l = 0; l <= 2; l++)
                    {
                        int x = num + k;
                        int y = num2 + l;
                        int num4;
                        for (num4 = this[x, y].frameX; num4 >= 100; num4 -= 100)
                        {
                        }
                        if (num4 >= 36)
                        {
                            num4 -= 36;
                        }
                        if (!this[x, y].active() || this[x, y].type != 269 || this[x, y].frameY != l * 18 || num4 != k * 18)
                        {
                            flag = true;
                        }
                    }
                }
                if (!SolidTileAllowBottomSlope(num, num2 + 3) || !SolidTileAllowBottomSlope(num + 1, num2 + 3))
                {
                    flag = true;
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                NewItem(i * 16, j * 16, 32, 32, 1989);
                for (int m = 0; m <= 1; m++)
                {
                    for (int n = 0; n <= 2; n++)
                    {
                        int num5 = num + m;
                        int num6 = num2 + n;
                        if (this[num5, num6].active() && this[num5, num6].type == 269)
                        {
                            KillTile(num5, num6);
                        }
                    }
                }
                destroyObject = false;
            }
            public void CheckSunflower(int i, int j, int type = 27)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = 0;
                int num2 = j;
                num += this[i, j].frameX / 18;
                num2 += this[i, j].frameY / 18 * -1;
                while (num > 1)
                {
                    num -= 2;
                }
                num *= -1;
                num += i;
                for (int k = num; k < num + 2; k++)
                {
                    for (int l = num2; l < num2 + 4; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        int num3;
                        for (num3 = this[k, l].frameX / 18; num3 > 1; num3 -= 2)
                        {
                        }
                        if (!this[k, l].nactive() || this[k, l].type != type || num3 != k - num || this[k, l].frameY != (l - num2) * 18)
                        {
                            flag = true;
                        }
                    }
                    if (this[k, num2 + 4] == null)
                    {
                        this[k, num2 + 4] = CreateTile();
                    }
                    if (!this[k, num2 + 4].nactive() || (this[k, num2 + 4].type != 2 && this[k, num2 + 4].type != 477 && this[k, num2 + 4].type != 492 && this[k, num2 + 4].type != 109 && this[k, num2 + 4].type != 60))
                    {
                        flag = true;
                    }
                    if (!SolidTile(k, num2 + 4))
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int m = num; m < num + 2; m++)
                {
                    for (int n = num2; n < num2 + 4; n++)
                    {
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            KillTile(m, n);
                        }
                    }
                }
                NewItem(i * 16, j * 16, 32, 32, 63);
                destroyObject = false;
            }
            public void CheckPot(int i, int j, int type = 28)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = 0;
                int num2 = j;
                for (num += this[i, j].frameX / 18; num > 1; num -= 2)
                {
                }
                num *= -1;
                num += i;
                int num3 = this[i, j].frameY / 18;
                int num4 = 0;
                while (num3 > 1)
                {
                    num3 -= 2;
                    num4++;
                }
                num2 -= num3;
                for (int k = num; k < num + 2; k++)
                {
                    for (int l = num2; l < num2 + 2; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        int num5;
                        for (num5 = this[k, l].frameX / 18; num5 > 1; num5 -= 2)
                        {
                        }
                        if (!this[k, l].active() || this[k, l].type != type || num5 != k - num || this[k, l].frameY != (l - num2) * 18 + num4 * 36)
                        {
                            flag = true;
                        }
                    }
                    if (this[k, num2 + 2] == null)
                    {
                        this[k, num2 + 2] = CreateTile();
                    }
                    if (!SolidTile2(k, num2 + 2))
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int m = num; m < num + 2; m++)
                {
                    for (int n = num2; n < num2 + 2; n++)
                    {
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            KillTile(m, n);
                        }
                    }
                }
                float num6 = 1f;
                bool flag2 = false;
                switch (num4)
                {
                    case 0:
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 51);
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 52);
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 53);
                        break;
                    case 1:
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 166);
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 167);
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 168);
                        break;
                    case 2:
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 169);
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 170);
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 171);
                        break;
                    case 3:
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 172);
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 173);
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 174);
                        break;
                    case 4:
                    case 5:
                    case 6:
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 197);
                        Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 198);
                        num6 = 1.25f;
                        break;
                    default:
                        if (num4 >= 7 && num4 <= 9)
                        {
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 199);
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 200);
                            num6 = 1.75f;
                        }
                        else if (num4 >= 10 && num4 <= 12)
                        {
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 201);
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 202);
                            num6 = 1.9f;
                        }
                        else if (num4 >= 13 && num4 <= 15)
                        {
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 203);
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 204);
                            num6 = 2.1f;
                        }
                        else if (num4 >= 16 && num4 <= 18)
                        {
                            num6 = 1.6f;
                        }
                        else if (num4 >= 19 && num4 <= 21)
                        {
                            num6 = 3.5f;
                        }
                        else if (num4 >= 22 && num4 <= 24)
                        {
                            num6 = 1.6f;
                        }
                        else if (num4 >= 25 && num4 <= 27)
                        {
                            num6 = 10f;
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), genRand.Next(217, 220));
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), genRand.Next(217, 220));
                        }
                        else if (num4 >= 28 && num4 <= 30)
                        {
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), genRand.Next(315, 317));
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), genRand.Next(315, 317));
                            if (Main.hardMode)
                            {
                                num6 = 4f;
                            }
                        }
                        else if (num4 >= 31 && num4 <= 33)
                        {
                            int num7 = genRand.Next(2, 5);
                            for (int num8 = 0; num8 < num7; num8++)
                            {
                                Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 698 + genRand.Next(6));
                            }
                            num6 = 2f;
                        }
                        else if (num4 >= 34 && num4 <= 36)
                        {
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 1122);
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 1123);
                            Gore.NewGore(new Vector2(i * 16, j * 16), default(Vector2), 1124);
                            num6 = 1.25f;
                            flag2 = true;
                        }
                        break;
                }
                num6 = (num6 * 2f + 1f) / 3f;
                int range = (int)(500f / ((num6 + 1f) / 2f));
                if (!WorldGen.gen)
                {
                    if (GetClosestRollLuck(i, j, range) == 0f)
                    {
                        if (Main.netMode != 1)
                        {
                            Projectile.NewProjectile(i * 16 + 16, j * 16 + 16, 0f, -12f, 518, 0, 0f, Main.myPlayer);
                        }
                    }
                    else if (genRand.Next(35) == 0 && Main.wallDungeon[this[i, j].wall] && (double)j > Main.worldSurface)
                    {
                        NewItem(i * 16, j * 16, 16, 16, 327);
                    }
                    else if (Main.getGoodWorld && genRand.Next(4) == 0)
                    {
                        Projectile.NewProjectile(i * 16 + 16, j * 16 + 8, (float)Main.rand.Next(-100, 101) * 0.002f, 0f, 28, 0, 0f, Terraria.Player.FindClosest(new Vector2(i * 16, j * 16), 16, 16));
                    }
                    else if (genRand.Next(45) == 0 || (Main.rand.Next(45) == 0 && Main.expertMode))
                    {
                        if ((double)j < Main.worldSurface)
                        {
                            int num9 = genRand.Next(10);
                            if (num9 == 0)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 292);
                            }
                            if (num9 == 1)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 298);
                            }
                            if (num9 == 2)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 299);
                            }
                            if (num9 == 3)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 290);
                            }
                            if (num9 == 4)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2322);
                            }
                            if (num9 == 5)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2324);
                            }
                            if (num9 == 6)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2325);
                            }
                            if (num9 >= 7)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2350, genRand.Next(1, 3));
                            }
                        }
                        else if ((double)j < Main.rockLayer)
                        {
                            int num10 = genRand.Next(11);
                            if (num10 == 0)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 289);
                            }
                            if (num10 == 1)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 298);
                            }
                            if (num10 == 2)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 299);
                            }
                            if (num10 == 3)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 290);
                            }
                            if (num10 == 4)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 303);
                            }
                            if (num10 == 5)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 291);
                            }
                            if (num10 == 6)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 304);
                            }
                            if (num10 == 7)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2322);
                            }
                            if (num10 == 8)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2329);
                            }
                            if (num10 >= 7)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2350, genRand.Next(1, 3));
                            }
                        }
                        else if (j < Main.UnderworldLayer)
                        {
                            int num11 = genRand.Next(15);
                            if (num11 == 0)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 296);
                            }
                            if (num11 == 1)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 295);
                            }
                            if (num11 == 2)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 299);
                            }
                            if (num11 == 3)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 302);
                            }
                            if (num11 == 4)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 303);
                            }
                            if (num11 == 5)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 305);
                            }
                            if (num11 == 6)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 301);
                            }
                            if (num11 == 7)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 302);
                            }
                            if (num11 == 8)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 297);
                            }
                            if (num11 == 9)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 304);
                            }
                            if (num11 == 10)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2322);
                            }
                            if (num11 == 11)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2323);
                            }
                            if (num11 == 12)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2327);
                            }
                            if (num11 == 13)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2329);
                            }
                            if (num11 >= 7)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2350, genRand.Next(1, 3));
                            }
                        }
                        else
                        {
                            int num12 = genRand.Next(14);
                            if (num12 == 0)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 296);
                            }
                            if (num12 == 1)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 295);
                            }
                            if (num12 == 2)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 293);
                            }
                            if (num12 == 3)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 288);
                            }
                            if (num12 == 4)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 294);
                            }
                            if (num12 == 5)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 297);
                            }
                            if (num12 == 6)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 304);
                            }
                            if (num12 == 7)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 305);
                            }
                            if (num12 == 8)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 301);
                            }
                            if (num12 == 9)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 302);
                            }
                            if (num12 == 10)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 288);
                            }
                            if (num12 == 11)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 300);
                            }
                            if (num12 == 12)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2323);
                            }
                            if (num12 == 13)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 2326);
                            }
                            if (genRand.Next(5) == 0)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 4870);
                            }
                        }
                    }
                    else if (Main.netMode == 2 && Main.rand.Next(30) == 0)
                    {
                        NewItem(i * 16, j * 16, 16, 16, 2997);
                    }
                    else
                    {
                        int num13 = Main.rand.Next(7);
                        if (Main.expertMode)
                        {
                            num13--;
                        }
                        Player player = Main.player[Terraria.Player.FindClosest(new Vector2(i * 16, j * 16), 16, 16)];
                        if (num13 == 0 && player.statLife < player.statLifeMax2)
                        {
                            NewItem(i * 16, j * 16, 16, 16, 58);
                            if (Main.rand.Next(2) == 0)
                            {
                                NewItem(i * 16, j * 16, 16, 16, 58);
                            }
                            if (Main.expertMode)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    NewItem(i * 16, j * 16, 16, 16, 58);
                                }
                                if (Main.rand.Next(2) == 0)
                                {
                                    NewItem(i * 16, j * 16, 16, 16, 58);
                                }
                            }
                        }
                        else if (num13 == 1)
                        {
                            int num14 = Main.rand.Next(2, 7);
                            if (Main.expertMode)
                            {
                                num14 += Main.rand.Next(1, 7);
                            }
                            int type2 = 8;
                            int type3 = 282;
                            if (player.ZoneHallow)
                            {
                                num14 += Main.rand.Next(2, 7);
                                type2 = 4387;
                            }
                            else if ((num4 >= 22 && num4 <= 24) || player.ZoneCrimson)
                            {
                                num14 += Main.rand.Next(2, 7);
                                type2 = 4386;
                            }
                            else if ((num4 >= 16 && num4 <= 18) || player.ZoneCorrupt)
                            {
                                num14 += Main.rand.Next(2, 7);
                                type2 = 4385;
                            }
                            else if (num4 >= 7 && num4 <= 9)
                            {
                                num14 += Main.rand.Next(2, 7);
                                type2 = 4388;
                            }
                            else if (num4 >= 4 && num4 <= 6)
                            {
                                type2 = 974;
                                type3 = 286;
                            }
                            else if (num4 >= 34 && num4 <= 36)
                            {
                                num14 += Main.rand.Next(2, 7);
                                type2 = 4383;
                            }
                            if (this[i, j].liquid > 0)
                            {
                                NewItem(i * 16, j * 16, 16, 16, type3, num14);
                            }
                            else
                            {
                                NewItem(i * 16, j * 16, 16, 16, type2, num14);
                            }
                        }
                        else if (num13 == 2)
                        {
                            int stack = Main.rand.Next(10, 21);
                            int type4 = 40;
                            if ((double)j < Main.rockLayer && genRand.Next(2) == 0)
                            {
                                type4 = ((!Main.hardMode) ? 42 : 168);
                            }
                            if (j > Main.UnderworldLayer)
                            {
                                type4 = 265;
                            }
                            else if (Main.hardMode)
                            {
                                type4 = ((Main.rand.Next(2) != 0) ? 47 : ((WorldGen.SavedOreTiers.Silver != 168) ? 278 : 4915));
                            }
                            NewItem(i * 16, j * 16, 16, 16, type4, stack);
                        }
                        else if (num13 == 3)
                        {
                            int type5 = 28;
                            if (j > Main.UnderworldLayer || Main.hardMode)
                            {
                                type5 = 188;
                            }
                            int num15 = 1;
                            if (Main.expertMode && Main.rand.Next(3) != 0)
                            {
                                num15++;
                            }
                            NewItem(i * 16, j * 16, 16, 16, type5, num15);
                        }
                        else if (num13 == 4 && (flag2 || (double)j > Main.rockLayer))
                        {
                            int type6 = 166;
                            if (flag2)
                            {
                                type6 = 4423;
                            }
                            int num16 = Main.rand.Next(4) + 1;
                            if (Main.expertMode)
                            {
                                num16 += Main.rand.Next(4);
                            }
                            NewItem(i * 16, j * 16, 16, 16, type6, num16);
                        }
                        else if ((num13 == 4 || num13 == 5) && j < Main.UnderworldLayer && !Main.hardMode)
                        {
                            int stack2 = Main.rand.Next(20, 41);
                            NewItem(i * 16, j * 16, 16, 16, 965, stack2);
                        }
                        else
                        {
                            float num17 = 200 + genRand.Next(-100, 101);
                            if ((double)j < Main.worldSurface)
                            {
                                num17 *= 0.5f;
                            }
                            else if ((double)j < Main.rockLayer)
                            {
                                num17 *= 0.75f;
                            }
                            else if (j > MaxTilesY - 250)
                            {
                                num17 *= 1.25f;
                            }
                            num17 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
                            if (Main.rand.Next(4) == 0)
                            {
                                num17 *= 1f + (float)Main.rand.Next(5, 11) * 0.01f;
                            }
                            if (Main.rand.Next(8) == 0)
                            {
                                num17 *= 1f + (float)Main.rand.Next(10, 21) * 0.01f;
                            }
                            if (Main.rand.Next(12) == 0)
                            {
                                num17 *= 1f + (float)Main.rand.Next(20, 41) * 0.01f;
                            }
                            if (Main.rand.Next(16) == 0)
                            {
                                num17 *= 1f + (float)Main.rand.Next(40, 81) * 0.01f;
                            }
                            if (Main.rand.Next(20) == 0)
                            {
                                num17 *= 1f + (float)Main.rand.Next(50, 101) * 0.01f;
                            }
                            if (Main.expertMode)
                            {
                                num17 *= 2.5f;
                            }
                            if (Main.expertMode && Main.rand.Next(2) == 0)
                            {
                                num17 *= 1.25f;
                            }
                            if (Main.expertMode && Main.rand.Next(3) == 0)
                            {
                                num17 *= 1.5f;
                            }
                            if (Main.expertMode && Main.rand.Next(4) == 0)
                            {
                                num17 *= 1.75f;
                            }
                            num17 *= num6;
                            if (NPC.downedBoss1)
                            {
                                num17 *= 1.1f;
                            }
                            if (NPC.downedBoss2)
                            {
                                num17 *= 1.1f;
                            }
                            if (NPC.downedBoss3)
                            {
                                num17 *= 1.1f;
                            }
                            if (NPC.downedMechBoss1)
                            {
                                num17 *= 1.1f;
                            }
                            if (NPC.downedMechBoss2)
                            {
                                num17 *= 1.1f;
                            }
                            if (NPC.downedMechBoss3)
                            {
                                num17 *= 1.1f;
                            }
                            if (NPC.downedPlantBoss)
                            {
                                num17 *= 1.1f;
                            }
                            if (NPC.downedQueenBee)
                            {
                                num17 *= 1.1f;
                            }
                            if (NPC.downedGolemBoss)
                            {
                                num17 *= 1.1f;
                            }
                            if (NPC.downedPirates)
                            {
                                num17 *= 1.1f;
                            }
                            if (NPC.downedGoblins)
                            {
                                num17 *= 1.1f;
                            }
                            if (NPC.downedFrost)
                            {
                                num17 *= 1.1f;
                            }
                            while ((int)num17 > 0)
                            {
                                if (num17 > 1000000f)
                                {
                                    int num18 = (int)(num17 / 1000000f);
                                    if (num18 > 50 && Main.rand.Next(2) == 0)
                                    {
                                        num18 /= Main.rand.Next(3) + 1;
                                    }
                                    if (Main.rand.Next(2) == 0)
                                    {
                                        num18 /= Main.rand.Next(3) + 1;
                                    }
                                    num17 -= (float)(1000000 * num18);
                                    NewItem(i * 16, j * 16, 16, 16, 74, num18);
                                    continue;
                                }
                                if (num17 > 10000f)
                                {
                                    int num19 = (int)(num17 / 10000f);
                                    if (num19 > 50 && Main.rand.Next(2) == 0)
                                    {
                                        num19 /= Main.rand.Next(3) + 1;
                                    }
                                    if (Main.rand.Next(2) == 0)
                                    {
                                        num19 /= Main.rand.Next(3) + 1;
                                    }
                                    num17 -= (float)(10000 * num19);
                                    NewItem(i * 16, j * 16, 16, 16, 73, num19);
                                    continue;
                                }
                                if (num17 > 100f)
                                {
                                    int num20 = (int)(num17 / 100f);
                                    if (num20 > 50 && Main.rand.Next(2) == 0)
                                    {
                                        num20 /= Main.rand.Next(3) + 1;
                                    }
                                    if (Main.rand.Next(2) == 0)
                                    {
                                        num20 /= Main.rand.Next(3) + 1;
                                    }
                                    num17 -= (float)(100 * num20);
                                    NewItem(i * 16, j * 16, 16, 16, 72, num20);
                                    continue;
                                }
                                int num21 = (int)num17;
                                if (num21 > 50 && Main.rand.Next(2) == 0)
                                {
                                    num21 /= Main.rand.Next(3) + 1;
                                }
                                if (Main.rand.Next(2) == 0)
                                {
                                    num21 /= Main.rand.Next(4) + 1;
                                }
                                if (num21 < 1)
                                {
                                    num21 = 1;
                                }
                                num17 -= (float)num21;
                                NewItem(i * 16, j * 16, 16, 16, 71, num21);
                            }
                        }
                    }
                }
                destroyObject = false;
            }
            public void CheckXmasTree(int x, int y)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = x;
                int num2 = y;
                if (this[x, y].frameX < 10)
                {
                    num -= this[x, y].frameX;
                    num2 -= this[x, y].frameY;
                }
                bool flag = false;
                int num3 = 0;
                for (int i = num; i < num + 4; i++)
                {
                    int num4 = 0;
                    for (int j = num2; j < num2 + 8; j++)
                    {
                        if (this[i, j].active() && this[i, j].type == 171)
                        {
                            if (num3 != 0 && num4 != 0 && this[i, j].frameX != num3 && this[i, j].frameY != num4)
                            {
                                flag = true;
                            }
                        }
                        else
                        {
                            flag = true;
                        }
                        num4++;
                    }
                    num3++;
                    if (i > num && i < num + 3 && !SolidTile2(i, num2 + 8))
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int k = num; k < num + 4; k++)
                {
                    for (int l = num2; l < num2 + 8; l++)
                    {
                        if (this[k, l].type == 171)
                        {
                            KillTile(k, l);
                        }
                    }
                }
                NewItem(x * 16, y * 16, 32, 32, 1873);
                destroyObject = false;
            }
            public void CheckTree(int i, int j)
            {
                int num = -1;
                int num2 = -1;
                int num3 = -1;
                int num4 = -1;
                int type = this[i, j].type;
                int frameX = this[i, j].frameX;
                int frameY = this[i, j].frameY;
                if (this[i - 1, j] != null && this[i - 1, j].active())
                {
                    num2 = this[i - 1, j].type;
                }
                if (this[i + 1, j] != null && this[i + 1, j].active())
                {
                    num3 = this[i + 1, j].type;
                }
                if (this[i, j - 1] != null && this[i, j - 1].active())
                {
                    num = this[i, j - 1].type;
                }
                if (this[i, j + 1] != null && this[i, j + 1].active())
                {
                    num4 = this[i, j + 1].type;
                }
                if (this[i - 1, j - 1] != null && this[i - 1, j - 1].active())
                {
                    _ = this[i - 1, j - 1].type;
                }
                if (this[i + 1, j - 1] != null && this[i + 1, j - 1].active())
                {
                    _ = this[i + 1, j - 1].type;
                }
                if (this[i - 1, j + 1] != null && this[i - 1, j + 1].active())
                {
                    _ = this[i - 1, j + 1].type;
                }
                if (this[i + 1, j + 1] != null && this[i + 1, j + 1].active())
                {
                    _ = this[i + 1, j + 1].type;
                }
                if (num4 == 23)
                {
                    num4 = 2;
                }
                if (num4 == 477)
                {
                    num4 = 2;
                }
                if (num4 == 60)
                {
                    num4 = 2;
                }
                if (num4 == 70)
                {
                    num4 = 2;
                }
                if (num4 == 109)
                {
                    num4 = 2;
                }
                if (num4 == 147)
                {
                    num4 = 2;
                }
                if (num4 == 199)
                {
                    num4 = 2;
                }
                if (num4 == 492)
                {
                    num4 = 2;
                }
                if (num4 != 2 && num4 != type && ((this[i, j].frameX == 0 && this[i, j].frameY <= 130) || (this[i, j].frameX == 22 && this[i, j].frameY <= 130) || (this[i, j].frameX == 44 && this[i, j].frameY <= 130)))
                {
                    KillTile(i, j);
                }
                if (this[i, j].frameX >= 22 && this[i, j].frameX <= 44 && this[i, j].frameY >= 132 && this[i, j].frameY <= 176)
                {
                    if (num4 != 2)
                    {
                        KillTile(i, j);
                    }
                    else if ((this[i, j].frameX != 22 || num2 != type) && (this[i, j].frameX != 44 || num3 != type))
                    {
                        KillTile(i, j);
                    }
                }
                else if ((this[i, j].frameX == 88 && this[i, j].frameY >= 0 && this[i, j].frameY <= 44) || (this[i, j].frameX == 66 && this[i, j].frameY >= 66 && this[i, j].frameY <= 130) || (this[i, j].frameX == 110 && this[i, j].frameY >= 66 && this[i, j].frameY <= 110) || (this[i, j].frameX == 132 && this[i, j].frameY >= 0 && this[i, j].frameY <= 176))
                {
                    if (num2 == type && num3 == type)
                    {
                        if (this[i, j].frameNumber() == 0)
                        {
                            this[i, j].frameX = 110;
                            this[i, j].frameY = 66;
                        }
                        if (this[i, j].frameNumber() == 1)
                        {
                            this[i, j].frameX = 110;
                            this[i, j].frameY = 88;
                        }
                        if (this[i, j].frameNumber() == 2)
                        {
                            this[i, j].frameX = 110;
                            this[i, j].frameY = 110;
                        }
                    }
                    else if (num2 == type)
                    {
                        if (this[i, j].frameNumber() == 0)
                        {
                            this[i, j].frameX = 88;
                            this[i, j].frameY = 0;
                        }
                        if (this[i, j].frameNumber() == 1)
                        {
                            this[i, j].frameX = 88;
                            this[i, j].frameY = 22;
                        }
                        if (this[i, j].frameNumber() == 2)
                        {
                            this[i, j].frameX = 88;
                            this[i, j].frameY = 44;
                        }
                    }
                    else if (num3 == type)
                    {
                        if (this[i, j].frameNumber() == 0)
                        {
                            this[i, j].frameX = 66;
                            this[i, j].frameY = 66;
                        }
                        if (this[i, j].frameNumber() == 1)
                        {
                            this[i, j].frameX = 66;
                            this[i, j].frameY = 88;
                        }
                        if (this[i, j].frameNumber() == 2)
                        {
                            this[i, j].frameX = 66;
                            this[i, j].frameY = 110;
                        }
                    }
                    else
                    {
                        if (this[i, j].frameNumber() == 0)
                        {
                            this[i, j].frameX = 0;
                            this[i, j].frameY = 0;
                        }
                        if (this[i, j].frameNumber() == 1)
                        {
                            this[i, j].frameX = 0;
                            this[i, j].frameY = 22;
                        }
                        if (this[i, j].frameNumber() == 2)
                        {
                            this[i, j].frameX = 0;
                            this[i, j].frameY = 44;
                        }
                    }
                }
                if (this[i, j].frameY >= 132 && this[i, j].frameY <= 176 && (this[i, j].frameX == 0 || this[i, j].frameX == 66 || this[i, j].frameX == 88))
                {
                    if (num4 != 2)
                    {
                        KillTile(i, j);
                    }
                    if (num2 != type && num3 != type)
                    {
                        if (this[i, j].frameNumber() == 0)
                        {
                            this[i, j].frameX = 0;
                            this[i, j].frameY = 0;
                        }
                        if (this[i, j].frameNumber() == 1)
                        {
                            this[i, j].frameX = 0;
                            this[i, j].frameY = 22;
                        }
                        if (this[i, j].frameNumber() == 2)
                        {
                            this[i, j].frameX = 0;
                            this[i, j].frameY = 44;
                        }
                    }
                    else if (num2 != type)
                    {
                        if (this[i, j].frameNumber() == 0)
                        {
                            this[i, j].frameX = 0;
                            this[i, j].frameY = 132;
                        }
                        if (this[i, j].frameNumber() == 1)
                        {
                            this[i, j].frameX = 0;
                            this[i, j].frameY = 154;
                        }
                        if (this[i, j].frameNumber() == 2)
                        {
                            this[i, j].frameX = 0;
                            this[i, j].frameY = 176;
                        }
                    }
                    else if (num3 != type)
                    {
                        if (this[i, j].frameNumber() == 0)
                        {
                            this[i, j].frameX = 66;
                            this[i, j].frameY = 132;
                        }
                        if (this[i, j].frameNumber() == 1)
                        {
                            this[i, j].frameX = 66;
                            this[i, j].frameY = 154;
                        }
                        if (this[i, j].frameNumber() == 2)
                        {
                            this[i, j].frameX = 66;
                            this[i, j].frameY = 176;
                        }
                    }
                    else
                    {
                        if (this[i, j].frameNumber() == 0)
                        {
                            this[i, j].frameX = 88;
                            this[i, j].frameY = 132;
                        }
                        if (this[i, j].frameNumber() == 1)
                        {
                            this[i, j].frameX = 88;
                            this[i, j].frameY = 154;
                        }
                        if (this[i, j].frameNumber() == 2)
                        {
                            this[i, j].frameX = 88;
                            this[i, j].frameY = 176;
                        }
                    }
                }
                if ((this[i, j].frameX == 66 && (this[i, j].frameY == 0 || this[i, j].frameY == 22 || this[i, j].frameY == 44)) || (this[i, j].frameX == 44 && (this[i, j].frameY == 198 || this[i, j].frameY == 220 || this[i, j].frameY == 242)))
                {
                    if (num3 != type)
                    {
                        KillTile(i, j);
                    }
                }
                else if ((this[i, j].frameX == 88 && (this[i, j].frameY == 66 || this[i, j].frameY == 88 || this[i, j].frameY == 110)) || (this[i, j].frameX == 66 && (this[i, j].frameY == 198 || this[i, j].frameY == 220 || this[i, j].frameY == 242)))
                {
                    if (num2 != type)
                    {
                        KillTile(i, j);
                    }
                }
                else if (num4 == -1 || num4 == 23)
                {
                    KillTile(i, j);
                }
                else if (num != type && this[i, j].frameY < 198 && ((this[i, j].frameX != 22 && this[i, j].frameX != 44) || this[i, j].frameY < 132))
                {
                    if (num2 == type || num3 == type)
                    {
                        if (num4 == type)
                        {
                            if (num2 == type && num3 == type)
                            {
                                if (this[i, j].frameNumber() == 0)
                                {
                                    this[i, j].frameX = 132;
                                    this[i, j].frameY = 132;
                                }
                                if (this[i, j].frameNumber() == 1)
                                {
                                    this[i, j].frameX = 132;
                                    this[i, j].frameY = 154;
                                }
                                if (this[i, j].frameNumber() == 2)
                                {
                                    this[i, j].frameX = 132;
                                    this[i, j].frameY = 176;
                                }
                            }
                            else if (num2 == type)
                            {
                                if (this[i, j].frameNumber() == 0)
                                {
                                    this[i, j].frameX = 132;
                                    this[i, j].frameY = 0;
                                }
                                if (this[i, j].frameNumber() == 1)
                                {
                                    this[i, j].frameX = 132;
                                    this[i, j].frameY = 22;
                                }
                                if (this[i, j].frameNumber() == 2)
                                {
                                    this[i, j].frameX = 132;
                                    this[i, j].frameY = 44;
                                }
                            }
                            else if (num3 == type)
                            {
                                if (this[i, j].frameNumber() == 0)
                                {
                                    this[i, j].frameX = 132;
                                    this[i, j].frameY = 66;
                                }
                                if (this[i, j].frameNumber() == 1)
                                {
                                    this[i, j].frameX = 132;
                                    this[i, j].frameY = 88;
                                }
                                if (this[i, j].frameNumber() == 2)
                                {
                                    this[i, j].frameX = 132;
                                    this[i, j].frameY = 110;
                                }
                            }
                        }
                        else if (num2 == type && num3 == type)
                        {
                            if (this[i, j].frameNumber() == 0)
                            {
                                this[i, j].frameX = 154;
                                this[i, j].frameY = 132;
                            }
                            if (this[i, j].frameNumber() == 1)
                            {
                                this[i, j].frameX = 154;
                                this[i, j].frameY = 154;
                            }
                            if (this[i, j].frameNumber() == 2)
                            {
                                this[i, j].frameX = 154;
                                this[i, j].frameY = 176;
                            }
                        }
                        else if (num2 == type)
                        {
                            if (this[i, j].frameNumber() == 0)
                            {
                                this[i, j].frameX = 154;
                                this[i, j].frameY = 0;
                            }
                            if (this[i, j].frameNumber() == 1)
                            {
                                this[i, j].frameX = 154;
                                this[i, j].frameY = 22;
                            }
                            if (this[i, j].frameNumber() == 2)
                            {
                                this[i, j].frameX = 154;
                                this[i, j].frameY = 44;
                            }
                        }
                        else if (num3 == type)
                        {
                            if (this[i, j].frameNumber() == 0)
                            {
                                this[i, j].frameX = 154;
                                this[i, j].frameY = 66;
                            }
                            if (this[i, j].frameNumber() == 1)
                            {
                                this[i, j].frameX = 154;
                                this[i, j].frameY = 88;
                            }
                            if (this[i, j].frameNumber() == 2)
                            {
                                this[i, j].frameX = 154;
                                this[i, j].frameY = 110;
                            }
                        }
                    }
                    else
                    {
                        if (this[i, j].frameNumber() == 0)
                        {
                            this[i, j].frameX = 110;
                            this[i, j].frameY = 0;
                        }
                        if (this[i, j].frameNumber() == 1)
                        {
                            this[i, j].frameX = 110;
                            this[i, j].frameY = 22;
                        }
                        if (this[i, j].frameNumber() == 2)
                        {
                            this[i, j].frameX = 110;
                            this[i, j].frameY = 44;
                        }
                    }
                }
                if (this[i, j].frameX != frameX && this[i, j].frameY != frameY && frameX >= 0 && frameY >= 0)
                {
                    TileFrame(i - 1, j);
                    TileFrame(i + 1, j);
                    TileFrame(i, j - 1);
                    TileFrame(i, j + 1);
                }
            }
            public void Check2x2(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = 0;
                int num2 = this[i, j].frameX / 18 * -1;
                if (num2 < -1)
                {
                    num2 += 2;
                    num = 36;
                }
                num2 += i;
                int num3 = (type == 172) ? 38 : 36;
                int num4 = this[i, j].frameY;
                int num5 = 0;
                while (num4 >= num3)
                {
                    num4 -= num3;
                    num5++;
                }
                int num6 = j - num4 / 18;
                for (int k = num2; k < num2 + 2; k++)
                {
                    for (int l = num6; l < num6 + 2; l++)
                    {
                        ITile tileSafely = GetTileSafely(k, l);
                        if (!tileSafely.active() || tileSafely.type != type || tileSafely.frameX != (k - num2) * 18 + num || tileSafely.frameY != (l - num6) * 18 + num5 * num3)
                        {
                            flag = true;
                        }
                    }
                    switch (type)
                    {
                        case 95:
                        case 126:
                            GetTileSafely(k, num6 - 1);
                            if (!this[k, num6 - 1].active() || !Main.tileSolid[this[k, num6 - 1].type] || Main.tileSolidTop[this[k, num6 - 1].type])
                            {
                                flag = true;
                            }
                            continue;
                        case 132:
                        case 138:
                        case 484:
                            continue;
                    }
                    ITile tileSafely2 = GetTileSafely(k, num6 + 2);
                    if (!tileSafely2.active() || (!Main.tileSolid[tileSafely2.type] && !Main.tileTable[tileSafely2.type]))
                    {
                        flag = true;
                    }
                    if (tileSafely2.halfBrick())
                    {
                        flag = true;
                    }
                }
                switch (type)
                {
                    case 138:
                    case 484:
                        {
                            ushort type4 = this[num2, num6 - 1].type;
                            ushort type5 = this[num2 + 1, num6 - 1].type;
                            if (!TileID.Sets.BasicChest[type4] && !TileID.Sets.BasicChest[type5] && type4 != 88 && type5 != 88 && !TileID.Sets.BasicChestFake[type4] && !TileID.Sets.BasicChestFake[type5] && type4 != 470 && type5 != 470 && type4 != 475 && type5 != 475 && !SolidTileAllowBottomSlope(num2, num6 + 2) && !SolidTileAllowBottomSlope(num2 + 1, num6 + 2))
                            {
                                flag = true;
                            }
                            break;
                        }
                    case 132:
                        {
                            flag = false;
                            num6 = this[i, j].frameY / 18 * -1;
                            num6 += j;
                            num = 0;
                            num2 = this[i, j].frameX / 18 * -1;
                            while (num2 < -1)
                            {
                                num2 += 2;
                                num += 36;
                            }
                            num2 += i;
                            for (int m = num2; m < num2 + 2; m++)
                            {
                                for (int n = num6; n < num6 + 2; n++)
                                {
                                    if (this[m, n] == null)
                                    {
                                        this[m, n] = CreateTile();
                                    }
                                    if (!this[m, n].active() || this[m, n].type != type || this[m, n].frameX != (m - num2) * 18 + num || this[m, n].frameY != (n - num6) * 18)
                                    {
                                        flag = true;
                                    }
                                }
                            }
                            if (this[num2, num6 + 2] == null)
                            {
                                this[num2, num6 + 2] = CreateTile();
                            }
                            if (this[num2 + 1, num6 + 2] == null)
                            {
                                this[num2 + 1, num6 + 2] = CreateTile();
                            }
                            bool flag2 = false;
                            ushort type2 = this[num2, num6 + 2].type;
                            ushort type3 = this[num2 + 1, num6 + 2].type;
                            if (!this[num2, num6 + 2].active() || (!Main.tileSolid[type2] && !Main.tileSolidTop[type2]) || this[num2, num6 + 2].halfBrick() || (this[num2, num6 + 2].slope() != 0 && !this[num2, num6 + 2].bottomSlope()))
                            {
                                flag2 = true;
                            }
                            if (!this[num2 + 1, num6 + 2].active() || (!Main.tileSolid[type3] && !Main.tileSolidTop[type3]) || this[num2 + 1, num6 + 2].halfBrick() || (this[num2 + 1, num6 + 2].slope() != 0 && !this[num2 + 1, num6 + 2].bottomSlope()))
                            {
                                flag2 = true;
                            }
                            if (flag2)
                            {
                                if (this[num2, num6].wall < 1 || this[num2 + 1, num6].wall < 1 || this[num2, num6 + 1].wall < 1 || this[num2 + 1, num6 + 1].wall < 1)
                                {
                                    flag = true;
                                }
                                else
                                {
                                    if (num >= 72)
                                    {
                                        break;
                                    }
                                    for (int num7 = num2; num7 < num2 + 2; num7++)
                                    {
                                        for (int num8 = num6; num8 < num6 + 2; num8++)
                                        {
                                            this[num7, num8].frameX += 72;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (num < 72)
                                {
                                    break;
                                }
                                for (int num9 = num2; num9 < num2 + 2; num9++)
                                {
                                    for (int num10 = num6; num10 < num6 + 2; num10++)
                                    {
                                        this[num9, num10].frameX -= 72;
                                    }
                                }
                            }
                            break;
                        }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int num11 = num2; num11 < num2 + 2; num11++)
                {
                    for (int num12 = num6; num12 < num6 + 2; num12++)
                    {
                        if (this[num11, num12].type == type && this[num11, num12].active())
                        {
                            KillTile(num11, num12);
                        }
                    }
                }
                int num13 = 0;
                switch (type)
                {
                    case 521:
                        num13 = 4327;
                        break;
                    case 522:
                        num13 = 4328;
                        break;
                    case 523:
                        num13 = 4329;
                        break;
                    case 524:
                        num13 = 4330;
                        break;
                    case 525:
                        num13 = 4331;
                        break;
                    case 526:
                        num13 = 4332;
                        break;
                    case 527:
                        num13 = 4333;
                        break;
                    case 564:
                        num13 = 4553;
                        break;
                    case 565:
                        num13 = 4552;
                        break;
                    case 594:
                        num13 = 4869;
                        break;
                    case 621:
                        num13 = 3750;
                        break;
                    case 622:
                        num13 = 5008;
                        break;
                }
                if (type == 598)
                {
                    num13 = 4880;
                }
                if (type == 360)
                {
                    num13 = 3072;
                }
                if (type == 580)
                {
                    num13 = 4846;
                }
                if (type == 620)
                {
                    num13 = 4964;
                }
                if (type == 505)
                {
                    num13 = 4275;
                }
                if (type == 543)
                {
                    num13 = 4398;
                }
                if (type == 568)
                {
                    num13 = 4655;
                }
                if (type == 569)
                {
                    num13 = 4656;
                }
                if (type == 570)
                {
                    num13 = 4657;
                }
                if (type >= 288 && type <= 295)
                {
                    num13 = 2178 + type - 288;
                }
                if (type >= 316 && type <= 318)
                {
                    num13 = 2439 + type - 316;
                }
                if (type == 85)
                {
                    num13 = 321;
                }
                if (type == 94)
                {
                    num13 = 352;
                }
                if (type == 95)
                {
                    num13 = 344;
                }
                if (type == 96)
                {
                    num13 = 345;
                }
                if (type == 97)
                {
                    num13 = 346;
                }
                if (type == 98)
                {
                    num13 = 347;
                }
                if (type == 99)
                {
                    num13 = 348;
                }
                if (type == 335)
                {
                    num13 = 2700;
                }
                if (type == 411)
                {
                    num13 = 3545;
                }
                if (type == 100)
                {
                    switch (num5)
                    {
                        case 0:
                            num13 = 349;
                            break;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                            num13 = 2092 + num5 - 1;
                            break;
                        default:
                            if (num5 >= 13 && num5 <= 16)
                            {
                                num13 = 2149 + num5 - 13;
                                break;
                            }
                            switch (num5)
                            {
                                case 17:
                                    num13 = 2227;
                                    break;
                                case 18:
                                    num13 = 2522;
                                    break;
                                case 19:
                                    num13 = 2541;
                                    break;
                                case 20:
                                    num13 = 2555;
                                    break;
                                case 21:
                                    num13 = 2570;
                                    break;
                                case 22:
                                    num13 = 2664;
                                    break;
                                case 23:
                                    num13 = 2665;
                                    break;
                                case 24:
                                    num13 = 2666;
                                    break;
                                case 25:
                                    num13 = 2667;
                                    break;
                                case 26:
                                    num13 = 2668;
                                    break;
                                case 27:
                                    num13 = 2825;
                                    break;
                                case 28:
                                    num13 = 3168;
                                    break;
                                case 29:
                                    num13 = 3170;
                                    break;
                                case 30:
                                    num13 = 3169;
                                    break;
                                case 31:
                                    num13 = 3893;
                                    break;
                                case 32:
                                    num13 = 3935;
                                    break;
                                case 33:
                                    num13 = 3961;
                                    break;
                                case 34:
                                    num13 = 4149;
                                    break;
                                case 35:
                                    num13 = 4170;
                                    break;
                                case 36:
                                    num13 = 4191;
                                    break;
                                case 37:
                                    num13 = 4212;
                                    break;
                                case 38:
                                    num13 = 4302;
                                    break;
                                case 39:
                                    num13 = 4570;
                                    break;
                            }
                            break;
                    }
                }
                if (type == 173)
                {
                    num13 = 714;
                }
                if (type == 125)
                {
                    num13 = 487;
                }
                if (type == 287)
                {
                    num13 = 2177;
                }
                if (type == 126)
                {
                    num13 = 488;
                }
                if (type == 132)
                {
                    num13 = 513;
                }
                if (type == 142)
                {
                    num13 = 581;
                }
                if (type == 143)
                {
                    num13 = 582;
                }
                if (type == 282)
                {
                    num13 = 250;
                }
                if (type == 319)
                {
                    num13 = 2490;
                }
                if (type == 490)
                {
                    num13 = 4075;
                }
                if (type == 172)
                {
                    num13 = 2827 + num5;
                    switch (num5)
                    {
                        case 29:
                            num13 = 3147;
                            break;
                        case 30:
                            num13 = 3149;
                            break;
                        case 31:
                            num13 = 3148;
                            break;
                        case 32:
                            num13 = 3896;
                            break;
                        case 33:
                            num13 = 3946;
                            break;
                        case 34:
                            num13 = 3972;
                            break;
                        case 35:
                            num13 = 4160;
                            break;
                        case 36:
                            num13 = 4181;
                            break;
                        case 37:
                            num13 = 4202;
                            break;
                        case 38:
                            num13 = 4223;
                            break;
                        case 39:
                            num13 = 4312;
                            break;
                        case 40:
                            num13 = 4581;
                            break;
                    }
                }
                if (num13 != 0)
                {
                    NewItem(i * 16, j * 16, 32, 32, num13);
                }
                if (type == 138 && !WorldGen.gen && Main.netMode != 1)
                {
                    Projectile.NewProjectile((float)(num2 * 16) + 15.5f, num6 * 16 + 16, 0f, 0f, 99, 70, 10f, Main.myPlayer);
                }
                if (type == 484 && !WorldGen.gen && Main.netMode != 1)
                {
                    Projectile.NewProjectile((float)(num2 * 16) + 15.5f, num6 * 16 + 16, 0f, 0f, 727, 70, 10f, Main.myPlayer);
                }
                destroyObject = false;
                for (int num14 = num2 - 1; num14 < num2 + 3; num14++)
                {
                    for (int num15 = num6 - 1; num15 < num6 + 3; num15++)
                    {
                        TileFrame(num14, num15);
                    }
                }
            }
            public void CheckSuper(int x, int y, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                ITile tile = this[x, y];
                int num = 0;
                if (type == 376)
                {
                    num = tile.frameX / 36;
                }
                if (type == 443)
                {
                    num = tile.frameX / 36;
                }
                if (type == 485)
                {
                    num = tile.frameX / 36;
                }
                bool flag = type == 376;
                bool flag2 = type == 443;
                bool flag3 = type == 444;
                bool flag4 = type == 485;
                TileObjectData tileData = TileObjectData.GetTileData(type, num);
                bool styleHorizontal = tileData.StyleHorizontal;
                int width = tileData.Width;
                int height = tileData.Height;
                int num2 = x;
                int num3 = y;
                num2 -= tile.frameX / 18 % width;
                num3 -= tile.frameY / 18 % height;
                int num4 = 0;
                int num5 = 0;
                if (styleHorizontal)
                {
                    num4 = tile.frameX / tileData.CoordinateFullWidth;
                }
                else
                {
                    num5 = tile.frameY / tileData.CoordinateFullHeight;
                }
                bool flag5 = false;
                bool flag6 = false;
                for (int i = 0; i < width; i++)
                {
                    for (int j = 0; j < height; j++)
                    {
                        ITile tileSafely = GetTileSafely(num2 + i, num3 + j);
                        if (!tileSafely.active() || tileSafely.type != type || tileSafely.frameX != num4 * tileData.CoordinateFullWidth + i * (tileData.CoordinateWidth + 2) || tileSafely.frameY != num5 * tileData.CoordinateFullHeight + j * (tileData.CoordinateHeights[0] + 2))
                        {
                            flag5 = true;
                        }
                    }
                }
                if (flag)
                {
                    for (int k = 0; k < width; k++)
                    {
                        ITile tileSafely = GetTileSafely(num2 + k, num3 + height);
                        if (!tileSafely.active() || (!Main.tileSolid[tileSafely.type] && !Main.tileTable[tileSafely.type]))
                        {
                            flag5 = true;
                        }
                        if (tileSafely.halfBrick())
                        {
                            flag5 = true;
                        }
                    }
                }
                if (flag2)
                {
                    bool flag7 = true;
                    bool flag8 = true;
                    for (int l = 0; l < width; l++)
                    {
                        if (!AnchorValid(GetTileSafely(num2 + l, num3 + height), AnchorType.SolidTile | AnchorType.SolidWithTop | AnchorType.SolidSide))
                        {
                            flag8 = false;
                        }
                        if (!AnchorValid(GetTileSafely(num2 + l, num3 - 1), AnchorType.SolidBottom))
                        {
                            flag7 = false;
                        }
                    }
                    if (!flag7 && !flag8)
                    {
                        flag5 = true;
                    }
                    if (!flag5)
                    {
                        int num6 = 0;
                        if (flag8)
                        {
                            for (int m = 0; m < width; m++)
                            {
                                GetTileSafely(num2 + m, num3).frameX = (short)(m * 18 + num / 2 * 36 + num6 * 36);
                            }
                        }
                        else
                        {
                            for (int n = 0; n < width; n++)
                            {
                                GetTileSafely(num2 + n, num3).frameX = (short)(n * 18 + (num - 2) / 2 * 36 + 72 + num6 * 36);
                            }
                        }
                    }
                }
                if (flag3)
                {
                    bool flag9 = true;
                    for (int num7 = 0; num7 < width; num7++)
                    {
                        if (!AnchorValid(GetTileSafely(num2 + num7, num3 - 1), AnchorType.SolidTile))
                        {
                            flag9 = false;
                        }
                    }
                    if (!flag9)
                    {
                        flag5 = true;
                    }
                    for (int num8 = 0; num8 < width; num8++)
                    {
                        for (int num9 = 0; num9 < height; num9++)
                        {
                            ITile tileSafely = GetTileSafely(num2 + num8, num3 + num9);
                            if (tileSafely.liquid > 0)
                            {
                                flag5 = true;
                                flag6 = true;
                            }
                        }
                    }
                }
                if (flag4)
                {
                    bool flag10 = true;
                    for (int num10 = 0; num10 < width; num10++)
                    {
                        if (!AnchorValid(GetTileSafely(num2 + num10, num3 + height), AnchorType.SolidTile))
                        {
                            flag10 = false;
                        }
                    }
                    if (!flag10)
                    {
                        flag5 = true;
                    }
                }
                if (!flag5)
                {
                    return;
                }
                destroyObject = true;
                for (int num11 = 0; num11 < width; num11++)
                {
                    for (int num12 = 0; num12 < height; num12++)
                    {
                        if (this[num2 + num11, num3 + num12].type == type && this[num2 + num11, num3 + num12].active())
                        {
                            KillTile(num2 + num11, num3 + num12);
                        }
                    }
                }
                int num13 = 0;
                if (type == 376)
                {
                    switch (num)
                    {
                        case 0:
                            num13 = 2334;
                            break;
                        case 1:
                            num13 = 2335;
                            break;
                        case 2:
                            num13 = 2336;
                            break;
                        case 3:
                            num13 = 3203;
                            break;
                        case 4:
                            num13 = 3204;
                            break;
                        case 5:
                            num13 = 3205;
                            break;
                        case 6:
                            num13 = 3206;
                            break;
                        case 7:
                            num13 = 3207;
                            break;
                        case 8:
                            num13 = 3208;
                            break;
                        case 9:
                            num13 = 3979;
                            break;
                        case 10:
                            num13 = 3980;
                            break;
                        case 11:
                            num13 = 3981;
                            break;
                        case 12:
                            num13 = 3982;
                            break;
                        case 13:
                            num13 = 3983;
                            break;
                        case 14:
                            num13 = 3984;
                            break;
                        case 15:
                            num13 = 3985;
                            break;
                        case 16:
                            num13 = 3986;
                            break;
                        case 17:
                            num13 = 3987;
                            break;
                        case 18:
                            num13 = 4405;
                            break;
                        case 19:
                            num13 = 4406;
                            break;
                        case 20:
                            num13 = 4407;
                            break;
                        case 21:
                            num13 = 4408;
                            break;
                        case 22:
                            num13 = 4877;
                            break;
                        case 23:
                            num13 = 4878;
                            break;
                        case 24:
                            num13 = 5002;
                            break;
                        case 25:
                            num13 = 5003;
                            break;
                    }
                }
                if (type == 443)
                {
                    num13 = 3722;
                }
                if (type == 485 && !WorldGen.gen && Main.netMode != 1)
                {
                    int num14 = 1;
                    for (int num15 = 0; num15 < num14; num15++)
                    {
                        int num16 = NPC.NewNPC(num2 * 16, num3 * 16 + 32, 582);
                        Main.npc[num16].TargetClosest();
                        Main.npc[num16].velocity = new Vector2((float)Main.npc[num16].direction * 1.5f, -5f);
                        SendDataToPlayer(23, -1, -1, null, num16);
                        int num17 = 20;
                        int num18 = -1;
                        Main.npc[num16].GetImmuneTime(num18, num17);
                        SendDataToPlayer(131, -1, -1, null, num16, 1f, num18, num17);
                    }
                }
                if (type == 444 && Main.netMode != 1 && !flag6)
                {
                    Projectile.NewProjectile(num2 * 16 + 16, num3 * 16 + 16, 0f, 0f, 655, 0, 0f, Main.myPlayer);
                }
                if (num13 != 0)
                {
                    NewItem(num2 * 16, num3 * 16, tileData.CoordinateFullWidth, tileData.CoordinateFullHeight, num13);
                }
                destroyObject = false;
                for (int num19 = -1; num19 < width + 1; num19++)
                {
                    for (int num20 = -1; num20 < height + 1; num20++)
                    {
                        TileFrame(num2 + num19, num3 + num20);
                    }
                }
            }
            public void CheckBanner(int x, int j, byte type)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = this[x, j].frameY / 18;
                int num2 = 0;
                while (num >= 3)
                {
                    num -= 3;
                    num2++;
                }
                num = j - num;
                int frameX = this[x, j].frameX;
                bool flag = false;
                for (int i = 0; i < 3; i++)
                {
                    if (this[x, num + i] == null)
                    {
                        this[x, num + i] = CreateTile();
                    }
                    if (!this[x, num + i].active())
                    {
                        flag = true;
                    }
                    else if (this[x, num + i].type != type)
                    {
                        flag = true;
                    }
                    else if (this[x, num + i].frameY != i * 18 + num2 * 18 * 3)
                    {
                        flag = true;
                    }
                    else if (this[x, num + i].frameX != frameX)
                    {
                        flag = true;
                    }
                }
                if (this[x, num - 1] == null)
                {
                    this[x, num - 1] = CreateTile();
                }
                if (!this[x, num - 1].nactive())
                {
                    flag = true;
                }
                if ((!this[x, num - 1].topSlope() && !this[x, num - 1].halfBrick() && !Main.tileSolid[this[x, num - 1].type]) || (Main.tileSolidTop[this[x, num - 1].type] && (!TileID.Sets.Platforms[this[x, num - 1].type] || (!this[x, num - 1].halfBrick() && !this[x, num - 1].topSlope()))) || TileID.Sets.NotReallySolid[this[x, num - 1].type] || this[x, num - 1].bottomSlope())
                {
                    flag = true;
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int k = 0; k < 3; k++)
                {
                    if (this[x, num + k].type == type)
                    {
                        KillTile(x, num + k);
                    }
                }
                if (type == 91)
                {
                    int num3 = frameX / 18;
                    num3 += num2 * 111;
                    if (num3 >= 297)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 4668 + num3);
                    }
                    else if (num3 >= 295)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 4392 + num3);
                    }
                    else if (num3 >= 294)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 4602);
                    }
                    else if (num3 >= 288)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 4253 + num3);
                    }
                    else if (num3 >= 278)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 3559 + num3);
                    }
                    else if (num3 >= 273)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 3516 + num3);
                    }
                    else if (num3 >= 272)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 3780);
                    }
                    else if (num3 >= 270)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 3323 + num3);
                    }
                    else if (num3 >= 207)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 3183 + num3);
                    }
                    else if (num3 >= 109)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 2788 + num3);
                    }
                    else if (num3 >= 22)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 1593 + num3);
                    }
                    else if (num3 >= 10 && num3 <= 15)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 1441 + num3);
                    }
                    else if (num3 >= 16 && num3 <= 21)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 1448 + num3);
                    }
                    else if (num3 >= 7 && num3 <= 9)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 838 + num3);
                    }
                    else if (num3 >= 4 && num3 <= 6)
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 785 + num3);
                    }
                    else
                    {
                        NewItem(x * 16, (num + 1) * 16, 32, 32, 337 + num3);
                    }
                }
                destroyObject = false;
            }
            public void CheckMB(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = i;
                int num2 = j;
                int num3 = 0;
                int num4;
                for (num4 = this[i, j].frameY / 18; num4 >= 2; num4 -= 2)
                {
                    num3++;
                }
                int num5 = this[i, j].frameX / 18;
                int num6 = 0;
                if (num5 >= 2)
                {
                    num5 -= 2;
                    num6++;
                }
                num = i - num5;
                num2 = j - num4;
                for (int k = num; k < num + 2; k++)
                {
                    for (int l = num2; l < num2 + 2; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != (k - num) * 18 + num6 * 36 || this[k, l].frameY != (l - num2) * 18 + num3 * 36)
                        {
                            flag = true;
                        }
                    }
                    if (!this[k, num2 + 2].nactive())
                    {
                        flag = true;
                    }
                    else if (!Main.tileSolid[this[k, num2 + 2].type] && !Main.tileTable[this[k, num2 + 2].type])
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int m = num; m < num + 2; m++)
                {
                    for (int n = num2; n < num2 + 3; n++)
                    {
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            KillTile(m, n);
                        }
                    }
                }
                if (type == 35)
                {
                    NewItem(i * 16, j * 16, 32, 32, 1813);
                }
                else if (num3 == 28)
                {
                    NewItem(i * 16, j * 16, 32, 32, 1963);
                }
                else if (num3 == 29)
                {
                    NewItem(i * 16, j * 16, 32, 32, 1964);
                }
                else if (num3 == 30)
                {
                    NewItem(i * 16, j * 16, 32, 32, 1965);
                }
                else if (num3 == 31)
                {
                    NewItem(i * 16, j * 16, 32, 32, 2742);
                }
                else if (num3 == 32)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3044);
                }
                else if (num3 == 33)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3235);
                }
                else if (num3 == 34)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3236);
                }
                else if (num3 == 35)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3237);
                }
                else if (num3 == 36)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3370);
                }
                else if (num3 == 37)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3371);
                }
                else if (num3 == 38)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3796);
                }
                else if (num3 == 39)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3869);
                }
                else if (num3 == 43)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4077);
                }
                else if (num3 == 41)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4078);
                }
                else if (num3 == 42)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4079);
                }
                else if (num3 == 44)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4080);
                }
                else if (num3 == 45)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4081);
                }
                else if (num3 == 40)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4082);
                }
                else if (num3 == 46)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4237);
                }
                else if (num3 == 47)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4356);
                }
                else if (num3 == 48)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4357);
                }
                else if (num3 == 49)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4358);
                }
                else if (num3 == 50)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4421);
                }
                else if (num3 == 51)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4606);
                }
                else if (num3 == 52)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4979);
                }
                else if (num3 == 53)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4985);
                }
                else if (num3 == 54)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4990);
                }
                else if (num3 == 55)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4991);
                }
                else if (num3 == 56)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4992);
                }
                else if (num3 == 57)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5006);
                }
                else if (num3 == 58)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5014);
                }
                else if (num3 == 59)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5015);
                }
                else if (num3 == 60)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5016);
                }
                else if (num3 == 61)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5017);
                }
                else if (num3 == 62)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5018);
                }
                else if (num3 == 63)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5019);
                }
                else if (num3 == 64)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5020);
                }
                else if (num3 == 65)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5021);
                }
                else if (num3 == 66)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5022);
                }
                else if (num3 == 67)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5023);
                }
                else if (num3 == 68)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5024);
                }
                else if (num3 == 69)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5025);
                }
                else if (num3 == 70)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5026);
                }
                else if (num3 == 71)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5027);
                }
                else if (num3 == 72)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5028);
                }
                else if (num3 == 73)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5029);
                }
                else if (num3 == 74)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5030);
                }
                else if (num3 == 75)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5031);
                }
                else if (num3 == 76)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5032);
                }
                else if (num3 == 77)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5033);
                }
                else if (num3 == 78)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5034);
                }
                else if (num3 == 79)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5035);
                }
                else if (num3 == 80)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5036);
                }
                else if (num3 == 81)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5037);
                }
                else if (num3 == 82)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5038);
                }
                else if (num3 == 83)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5039);
                }
                else if (num3 == 84)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5040);
                }
                else if (num3 == 85)
                {
                    NewItem(i * 16, j * 16, 32, 32, 5044);
                }
                else if (num3 >= 13)
                {
                    NewItem(i * 16, j * 16, 32, 32, 1596 + num3 - 13);
                }
                else
                {
                    NewItem(i * 16, j * 16, 32, 32, 562 + num3);
                }
                for (int num7 = num - 1; num7 < num + 3; num7++)
                {
                    for (int num8 = num2 - 1; num8 < num2 + 3; num8++)
                    {
                        TileFrame(num7, num8);
                    }
                }
                destroyObject = false;
            }
            public bool CheckTileFrames(int type, int sx, int sy, int w, int h, int styleX, int frameXinc, int styleY, int frameYinc)
            {
                for (int i = 0; i < w; i++)
                {
                    for (int j = 0; j < h; j++)
                    {
                        ITile tileSafely = GetTileSafely(sx + i, sy + j);
                        if (!tileSafely.active() || tileSafely.type != type || tileSafely.frameX != styleX * w * frameXinc + i * frameXinc || tileSafely.frameY != styleY * h * frameYinc + j * frameYinc)
                        {
                            return false;
                        }
                    }
                }
                return true;
            }
            public void CheckTrapDoor(int x, int y, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = 0;
                int num2 = 0;
                Point point = default(Point);
                if (type == 387)
                {
                    num = 2;
                    num2 = 1;
                    point = GetTopLeftAndStyles(ref x, ref y, num, num2, 18, 18);
                    flag = (flag || !CheckTileFrames(type, x, y, num, num2, point.X, 18, point.Y, 18) || !CheckTileAnchors(x, y, num, num2, 1, AnchorType.SolidTile));
                }
                if (type == 386)
                {
                    num = 2;
                    num2 = 2;
                    point = GetTopLeftAndStyles(ref x, ref y, num, num2, 18, 18);
                    flag = (flag || !CheckTileFrames(type, x, y, num, num2, point.X, 18, point.Y, 18));
                    if (point.X == 0)
                    {
                        flag = (flag || !CheckTileAnchors(x, y + 1, num, 1, 1, AnchorType.SolidTile));
                    }
                    else if (point.X == 1)
                    {
                        flag = (flag || !CheckTileAnchors(x, y, num, 1, 1, AnchorType.SolidTile));
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int i = x; i < x + num; i++)
                {
                    for (int j = y; j < y + num2; j++)
                    {
                        KillTile(i, j);
                    }
                }
                int type2 = 3239;
                if (point.Y == 0)
                {
                    type2 = 3239;
                }
                NewItem(x * 16, y * 16, num * 16, num2 * 16, type2);
                for (int k = x - 1; k < x + num + 1; k++)
                {
                    for (int l = y - 1; l < y + num2 + 1; l++)
                    {
                        TileFrame(k, l);
                    }
                }
                destroyObject = false;
            }
            public Point GetTopLeftAndStyles(ref int x, ref int y, int w, int h, int frameXinc, int frameYinc)
            {
                ITile tileSafely = GetTileSafely(x, y);
                Point result = new Point(tileSafely.frameX / (w * frameXinc), tileSafely.frameY / (h * frameYinc));
                if (frameXinc != 0)
                {
                    x -= tileSafely.frameX / frameXinc % w;
                }
                if (frameYinc != 0)
                {
                    y -= tileSafely.frameY / frameYinc % h;
                }
                return result;
            }
            public void CheckTallGate(int x, int y, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                ITile tileSafely = GetTileSafely(x, y);
                Point point = new Point(tileSafely.frameX / 18, 0);
                TileObjectData tileData = TileObjectData.GetTileData(type, point.X);
                point.Y = tileSafely.frameY / tileData.CoordinateFullHeight;
                int width = tileData.Width;
                int height = tileData.Height;
                int i = 0;
                for (int num = tileSafely.frameY % tileData.CoordinateFullHeight; i < height && num - tileData.CoordinateHeights[i] >= 0; i++)
                {
                    num -= tileData.CoordinateHeights[i];
                }
                _ = tileData.CoordinateFullHeight;
                y -= i;
                int num2 = point.Y * tileData.CoordinateFullHeight;
                for (int j = 0; j < height; j++)
                {
                    tileSafely = GetTileSafely(x, y + j);
                    if (tileSafely.frameX != point.X * tileData.CoordinateFullWidth || tileSafely.frameY != num2)
                    {
                        flag = true;
                        break;
                    }
                    num2 += tileData.CoordinateHeights[j] + tileData.CoordinatePadding;
                }
                if (!flag && CheckTileAnchors(x, y, width, height, 2, AnchorType.SolidTile))
                {
                    return;
                }
                destroyObject = true;
                for (int k = x; k < x + width; k++)
                {
                    for (int l = y; l < y + height; l++)
                    {
                        KillTile(k, l);
                    }
                }
                int type2 = 3240;
                if (point.Y == 0)
                {
                    type2 = 3240;
                }
                NewItem(x * 16, y * 16, width * 16, height * 16, type2);
                for (int m = x - 1; m < x + width + 1; m++)
                {
                    for (int n = y - 1; n < y + height + 1; n++)
                    {
                        TileFrame(m, n);
                    }
                }
                destroyObject = false;
            }
            public bool CheckTileAnchors(int sx, int sy, int w, int h, int mode, AnchorType anchor)
            {
                if ((mode & 1) == 1)
                {
                    for (int i = sy; i < sy + h; i++)
                    {
                        if (!AnchorValid(GetTileSafely(sx - 1, i), anchor))
                        {
                            return false;
                        }
                        if (!AnchorValid(GetTileSafely(sx + w, i), anchor))
                        {
                            return false;
                        }
                    }
                }
                if ((mode & 2) == 2)
                {
                    for (int j = sx; j < sx + w; j++)
                    {
                        if (!AnchorValid(GetTileSafely(j, sy - 1), anchor))
                        {
                            return false;
                        }
                        if (!AnchorValid(GetTileSafely(j, sy + h), anchor))
                        {
                            return false;
                        }
                    }
                }
                return true;
            }
            public bool AnchorValid(ITile tileCache, AnchorType anchor)
            {
                bool flag = false;
                if (tileCache.nactive())
                {
                    if ((anchor & AnchorType.SolidTile) == AnchorType.SolidTile && Main.tileSolid[tileCache.type] && !Main.tileSolidTop[tileCache.type] && !Main.tileNoAttach[tileCache.type] && tileCache.blockType() == 0)
                    {
                        flag = true;
                    }
                    if ((anchor & AnchorType.SolidBottom) == AnchorType.SolidBottom && ((Main.tileSolid[tileCache.type] && (!Main.tileSolidTop[tileCache.type] || (TileID.Sets.Platforms[tileCache.type] && (tileCache.halfBrick() || tileCache.topSlope())))) || tileCache.topSlope() || tileCache.halfBrick()) && !TileID.Sets.NotReallySolid[tileCache.type] && !tileCache.bottomSlope())
                    {
                        flag = true;
                    }
                    if (!flag && ((anchor & AnchorType.SolidWithTop) == AnchorType.SolidWithTop || (anchor & AnchorType.Table) == AnchorType.Table))
                    {
                        if (TileID.Sets.Platforms[tileCache.type])
                        {
                            int num = tileCache.frameX / TileObjectData.PlatformFrameWidth();
                            if ((!tileCache.halfBrick() && num >= 0 && num <= 7) || (num >= 12 && num <= 16) || (num >= 25 && num <= 26))
                            {
                                flag = true;
                            }
                        }
                        else if (Main.tileSolid[tileCache.type] && Main.tileSolidTop[tileCache.type])
                        {
                            flag = true;
                        }
                    }
                    if (!flag && (anchor & AnchorType.Table) == AnchorType.Table && !TileID.Sets.Platforms[tileCache.type] && Main.tileTable[tileCache.type] && tileCache.blockType() == 0)
                    {
                        flag = true;
                    }
                    if (!flag && (anchor & AnchorType.SolidSide) == AnchorType.SolidSide && Main.tileSolid[tileCache.type] && !Main.tileSolidTop[tileCache.type])
                    {
                        int num2 = tileCache.blockType();
                        if ((uint)(num2 - 4) <= 1u)
                        {
                            flag = true;
                        }
                    }
                }
                else if (!flag && (anchor & AnchorType.EmptyTile) == AnchorType.EmptyTile)
                {
                    flag = true;
                }
                return flag;
            }
            public void CheckSign(int x, int y, ushort type)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = x - 2;
                int num2 = x + 3;
                int num3 = y - 2;
                int num4 = y + 3;
                if (num < 0 || num2 > MaxTilesX || num3 < 0 || num4 > MaxTilesY)
                {
                    return;
                }
                bool flag = false;
                for (int i = num; i < num2; i++)
                {
                    for (int j = num3; j < num4; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                    }
                }
                int num5 = this[x, y].frameX / 18;
                int num6 = this[x, y].frameY / 18;
                num5 %= 2;
                num6 %= 2;
                int num7 = x - num5;
                int num8 = y - num6;
                int num9 = this[num7, num8].frameX / 18 / 2;
                int num10 = this[num7, num8].frameY / 18 / 2;
                int num11 = this[x, y].frameX / 18;
                int num12 = 0;
                while (num11 > 1)
                {
                    num11 -= 2;
                    num12++;
                }
                num = num7;
                num2 = num7 + 2;
                num3 = num8;
                num4 = num8 + 2;
                num5 = 0;
                for (int k = num; k < num2; k++)
                {
                    num6 = 0;
                    for (int l = num3; l < num4; l++)
                    {
                        if (!this[k, l].active() || this[k, l].type != type)
                        {
                            flag = true;
                            break;
                        }
                        if (this[k, l].frameX / 18 != num5 + num9 * 2 || this[k, l].frameY / 18 != num6 + num10 * 2)
                        {
                            flag = true;
                            break;
                        }
                        num6++;
                    }
                    num5++;
                }
                if (!flag)
                {
                    if (type == 85)
                    {
                        if (SolidTileAllowBottomSlope(num7, num8 + 2) && SolidTileAllowBottomSlope(num7 + 1, num8 + 2))
                        {
                            num9 = num12;
                        }
                        else
                        {
                            flag = true;
                        }
                    }
                    else if (TopEdgeCanBeAttachedTo(num7, num8 + 2) && TopEdgeCanBeAttachedTo(num7 + 1, num8 + 2))
                    {
                        num9 = 0;
                    }
                    else if (BottomEdgeCanBeAttachedTo(num7, num8 - 1) && BottomEdgeCanBeAttachedTo(num7 + 1, num8 - 1))
                    {
                        num9 = 1;
                    }
                    else if (RightEdgeCanBeAttachedTo(num7 - 1, num8) && RightEdgeCanBeAttachedTo(num7 - 1, num8 + 1))
                    {
                        num9 = 2;
                    }
                    else if (LeftEdgeCanBeAttachedTo(num7 + 2, num8) && LeftEdgeCanBeAttachedTo(num7 + 2, num8 + 1))
                    {
                        num9 = 3;
                    }
                    else if (this[num7, num8].wall > 0 && this[num7 + 1, num8].wall > 0 && this[num7, num8 + 1].wall > 0 && this[num7 + 1, num8 + 1].wall > 0)
                    {
                        num9 = 4;
                    }
                    else
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    if (type == 395)
                    {
                        int num13 = TEItemFrame.Find(num7, num8);
                        if (num13 != -1 && ((TEItemFrame)TileEntity.ByID[num13]).item.stack > 0)
                        {
                            ((TEItemFrame)TileEntity.ByID[num13]).DropItem();
                            if (Main.netMode != 2)
                            {
                                Main.LocalPlayer.InterruptItemUsageIfOverTile(395);
                            }
                        }
                    }
                    destroyObject = true;
                    for (int m = num; m < num2; m++)
                    {
                        for (int n = num3; n < num4; n++)
                        {
                            if (this[m, n].type == type)
                            {
                                KillTile(m, n);
                            }
                        }
                    }
                    if (type != 395)
                    {
                        KillSign(num7, num8);
                    }
                    switch (type)
                    {
                        case 85:
                            {
                                int type2 = 321;
                                if (num12 >= 6 && num12 <= 10)
                                {
                                    type2 = 3229 + num12 - 6;
                                }
                                else if (num12 >= 1 && num12 <= 5)
                                {
                                    type2 = 1173 + num12 - 1;
                                }
                                NewItem(x * 16, y * 16, 32, 32, type2);
                                if (Main.netMode != 1 && genRand.Next(2) == 0 && NPC.CountNPCS(316) < 2)
                                {
                                    int num14 = Terraria.Player.FindClosest(new Vector2(x * 16, y * 16), 16, 16);
                                    if (Main.player[num14].ZoneGraveyard || !Main.dayTime || (double)y > Main.worldSurface)
                                    {
                                        NPC.SpawnOnPlayer(num14, 316);
                                    }
                                }
                                break;
                            }
                        case 395:
                            NewItem(num7 * 16, num8 * 16, 32, 32, 3270);
                            Kill(num7, num8);
                            break;
                        case 425:
                            NewItem(num7 * 16, num8 * 16, 32, 32, 3617);
                            break;
                        case 573:
                            NewItem(num7 * 16, num8 * 16, 32, 32, 4710);
                            break;
                        case 511:
                            NewItem(num7 * 16, num8 * 16, 32, 32, 4320);
                            break;
                        case 510:
                            NewItem(num7 * 16, num8 * 16, 32, 32, 4319);
                            break;
                        default:
                            NewItem(x * 16, y * 16, 32, 32, 171);
                            break;
                    }
                    destroyObject = false;
                    return;
                }
                int num15 = 36 * num9;
                for (int num16 = 0; num16 < 2; num16++)
                {
                    for (int num17 = 0; num17 < 2; num17++)
                    {
                        this[num7 + num16, num8 + num17].active(active: true);
                        this[num7 + num16, num8 + num17].type = type;
                        this[num7 + num16, num8 + num17].frameX = (short)(num15 + 18 * num16);
                        this[num7 + num16, num8 + num17].frameY = (short)(18 * num17 + num10 * 36);
                    }
                }
            }
            public void KillSign(int x, int y)
            {
                if (GetRelative(x, y, out int X, out int Y))
                {
                    var list = Sign.Where(s => s != null && s.x == X && s.y == Y).ToList();
                    if (list.Any()) Sign.Remove(list[0]);
                }
            }
            public bool RightEdgeCanBeAttachedTo(int i, int j)
            {
                try
                {
                    ITile tile = this[i, j];
                    if (tile == null)
                    {
                        return true;
                    }
                    if (tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type] && !tile.rightSlope() && !tile.halfBrick() && !tile.inActive() && !Main.tileNoAttach[tile.type])
                    {
                        return true;
                    }
                }
                catch
                {
                }
                return false;
            }
            public bool LeftEdgeCanBeAttachedTo(int i, int j)
            {
                try
                {
                    ITile tile = this[i, j];
                    if (tile == null)
                    {
                        return true;
                    }
                    if (tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type] && !tile.leftSlope() && !tile.halfBrick() && !tile.inActive() && !Main.tileNoAttach[tile.type])
                    {
                        return true;
                    }
                }
                catch
                {
                }
                return false;
            }
            public bool BottomEdgeCanBeAttachedTo(int i, int j)
            {
                try
                {
                    ITile tile = this[i, j];
                    if (tile == null)
                    {
                        return true;
                    }
                    if (tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type] && !tile.bottomSlope() && !tile.inActive() && !Main.tileNoAttach[tile.type])
                    {
                        return true;
                    }
                }
                catch
                {
                }
                return false;
            }
            public void CheckFoodPlatter(int x, int y, int type)
            {
                if (this[x, y] == null || destroyObject || SolidTileAllowBottomSlope(x, y + 1))
                {
                    return;
                }
                if (type == 520)
                {
                    int num = TEFoodPlatter.Find(x, y);
                    if (num != -1 && ((TEFoodPlatter)TileEntity.ByID[num]).item.stack > 0)
                    {
                        ((TEFoodPlatter)TileEntity.ByID[num]).DropItem();
                        if (Main.netMode != 2)
                        {
                            Main.LocalPlayer.InterruptItemUsageIfOverTile(520);
                        }
                    }
                }
                destroyObject = true;
                if (this[x, y].type == type)
                {
                    KillTile(x, y);
                }
                if (type == 520)
                {
                    TEFoodPlatter.Kill(x, y);
                }
                destroyObject = false;
            }
            public void CheckCannon(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = this[i, j].frameX / 18;
                int num2 = 0;
                while (num >= 4)
                {
                    num2++;
                    num -= 4;
                }
                num = i - num;
                int num3 = this[i, j].frameY / 18;
                int num4 = 0;
                while (num3 >= 3)
                {
                    num4 += 54;
                    num3 -= 3;
                }
                num3 = j - num3;
                int num5 = 72 * num2;
                for (int k = num; k < num + 4; k++)
                {
                    int num6 = num4;
                    for (int l = num3; l < num3 + 3; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != num5 || this[k, l].frameY != num6)
                        {
                            flag = true;
                        }
                        num6 += 18;
                    }
                    if (this[k, num3 + 3] == null)
                    {
                        this[k, num3 + 3] = CreateTile();
                    }
                    if (!SolidTileAllowBottomSlope(k, num3 + 3) && k != num && k != num + 3)
                    {
                        flag = true;
                    }
                    num5 += 18;
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int m = num; m < num + 4; m++)
                {
                    for (int n = num3; n < num3 + 3; n++)
                    {
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            KillTile(m, n);
                        }
                    }
                }
                int type2 = 928;
                switch (num2)
                {
                    case 1:
                        type2 = 1337;
                        break;
                    case 2:
                        type2 = 3369;
                        break;
                    case 3:
                    case 4:
                        type2 = 3664;
                        break;
                }
                NewItem(i * 16, j * 16, 32, 32, type2);
                destroyObject = false;
                for (int num7 = num; num7 < num + 4; num7++)
                {
                    for (int num8 = num3; num8 < num3 + 3; num8++)
                    {
                        TileFrame(num7, num8);
                    }
                }
            }
            public void Check4x2(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = i;
                num = ((type != 487) ? (num + this[i, j].frameX / 18 * -1) : (num + this[i, j].frameX / 18 % 4 * -1));
                if ((type == 79 || type == 90) && this[i, j].frameX >= 72)
                {
                    num += 4;
                }
                int num2 = this[i, j].frameY / 18;
                int num3 = 0;
                while (num2 > 1)
                {
                    num2 -= 2;
                    num3++;
                }
                num2 = j - num2;
                if (type == 487)
                {
                    num3 = this[i, j].frameX / 72;
                }
                for (int k = num; k < num + 4; k++)
                {
                    for (int l = num2; l < num2 + 2; l++)
                    {
                        int num4 = (k - num) * 18;
                        int num5 = (l - num2) * 18;
                        if ((type == 79 || type == 90) && this[i, j].frameX >= 72)
                        {
                            num4 = (k - num + 4) * 18;
                        }
                        if (type == 487)
                        {
                            num4 += num3 * 72;
                        }
                        else
                        {
                            num5 += num3 * 36;
                        }
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != num4 || this[k, l].frameY != num5)
                        {
                            flag = true;
                        }
                    }
                    if (this[k, num2 + 2] == null)
                    {
                        this[k, num2 + 2] = CreateTile();
                    }
                    if (!SolidTileAllowBottomSlope(k, num2 + 2) && (!this[k, num2 + 2].active() || !TileID.Sets.Platforms[this[k, num2 + 2].type]))
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int m = num; m < num + 4; m++)
                {
                    for (int n = num2; n < num2 + 3; n++)
                    {
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            KillTile(m, n);
                        }
                    }
                }
                if (type == 79)
                {
                    int num6 = 0;
                    switch (num3)
                    {
                        case 0:
                            num6 = 224;
                            break;
                        case 4:
                            num6 = 920;
                            break;
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                            num6 = 1710 + num3;
                            break;
                        default:
                            if (num3 >= 5 && num3 <= 8)
                            {
                                num6 = 1465 + num3;
                                break;
                            }
                            if (num3 >= 13 && num3 <= 18)
                            {
                                num6 = 2066 + num3 - 13;
                                break;
                            }
                            switch (num3)
                            {
                                case 19:
                                    num6 = 2139;
                                    break;
                                case 20:
                                    num6 = 2140;
                                    break;
                                case 21:
                                    num6 = 2231;
                                    break;
                                case 22:
                                    num6 = 2520;
                                    break;
                                case 23:
                                    num6 = 2538;
                                    break;
                                case 24:
                                    num6 = 2553;
                                    break;
                                case 25:
                                    num6 = 2568;
                                    break;
                                case 26:
                                    num6 = 2669;
                                    break;
                                case 27:
                                    num6 = 2811;
                                    break;
                                case 28:
                                    num6 = 3162;
                                    break;
                                case 29:
                                    num6 = 3164;
                                    break;
                                case 30:
                                    num6 = 3163;
                                    break;
                                case 31:
                                    num6 = 3897;
                                    break;
                                case 32:
                                    num6 = 3932;
                                    break;
                                case 33:
                                    num6 = 3959;
                                    break;
                                case 34:
                                    num6 = 4146;
                                    break;
                                case 35:
                                    num6 = 4167;
                                    break;
                                case 36:
                                    num6 = 4188;
                                    break;
                                case 37:
                                    num6 = 4209;
                                    break;
                                case 38:
                                    num6 = 4299;
                                    break;
                                case 39:
                                    num6 = 4567;
                                    break;
                                default:
                                    num6 = num3 + 643;
                                    break;
                            }
                            break;
                    }
                    NewItem(i * 16, j * 16, 32, 32, num6);
                }
                if (type == 487)
                {
                    NewItem(i * 16, j * 16, 32, 32, WorldGen.GetItemDrop_PicnicTables(num3));
                }
                if (type == 90)
                {
                    int type2 = 0;
                    switch (num3)
                    {
                        case 0:
                            type2 = 336;
                            break;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                            type2 = 2072 + num3 - 1;
                            break;
                        default:
                            if (num3 >= 11 && num3 <= 15)
                            {
                                type2 = 2124 + num3 - 11;
                                break;
                            }
                            switch (num3)
                            {
                                case 16:
                                    type2 = 2232;
                                    break;
                                case 17:
                                    type2 = 2519;
                                    break;
                                case 18:
                                    type2 = 2537;
                                    break;
                                case 19:
                                    type2 = 2552;
                                    break;
                                case 20:
                                    type2 = 2567;
                                    break;
                                case 21:
                                    type2 = 2658;
                                    break;
                                case 22:
                                    type2 = 2659;
                                    break;
                                case 23:
                                    type2 = 2660;
                                    break;
                                case 24:
                                    type2 = 2661;
                                    break;
                                case 25:
                                    type2 = 2662;
                                    break;
                                case 26:
                                    type2 = 2663;
                                    break;
                                case 27:
                                    type2 = 2810;
                                    break;
                                case 28:
                                    type2 = 3159;
                                    break;
                                case 29:
                                    type2 = 3161;
                                    break;
                                case 30:
                                    type2 = 3160;
                                    break;
                                case 31:
                                    type2 = 3895;
                                    break;
                                case 32:
                                    type2 = 3931;
                                    break;
                                case 33:
                                    type2 = 3958;
                                    break;
                                case 34:
                                    type2 = 4145;
                                    break;
                                case 35:
                                    type2 = 4166;
                                    break;
                                case 36:
                                    type2 = 4187;
                                    break;
                                case 37:
                                    type2 = 4208;
                                    break;
                                case 38:
                                    type2 = 4298;
                                    break;
                                case 39:
                                    type2 = 4566;
                                    break;
                            }
                            break;
                    }
                    NewItem(i * 16, j * 16, 32, 32, type2);
                }
                destroyObject = false;
                for (int num7 = num - 1; num7 < num + 4; num7++)
                {
                    for (int num8 = num2 - 1; num8 < num2 + 4; num8++)
                    {
                        TileFrame(num7, num8);
                    }
                }
            }
            public void Check2x2Style(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = j;
                int num2;
                for (num2 = this[i, j].frameY / 18; num2 > 1; num2 -= 2)
                {
                }
                num -= num2;
                int num3 = this[i, j].frameX / 18;
                int num4 = 0;
                while (num3 > 1)
                {
                    num3 -= 2;
                    num4++;
                }
                num3 = i - num3;
                int num5 = num4 * 36;
                for (int k = num3; k < num3 + 2; k++)
                {
                    for (int l = num; l < num + 2; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != (k - num3) * 18 + num5)
                        {
                            flag = true;
                        }
                    }
                    if (!SolidTileAllowBottomSlope(k, num + 2))
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                int frameX = this[i, j].frameX;
                destroyObject = true;
                for (int m = num3; m < num3 + 2; m++)
                {
                    for (int n = num; n < num + 2; n++)
                    {
                        if (this[m, n] == null)
                        {
                            this[m, n] = CreateTile();
                        }
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            KillTile(m, n);
                        }
                    }
                }
                switch (type)
                {
                    case 254:
                        if (frameX < 72)
                        {
                            break;
                        }
                        if (frameX < 108)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                NewItem(i * 16, j * 16, 32, 32, 1725, genRand.Next(1, 3));
                            }
                            break;
                        }
                        if (frameX < 144)
                        {
                            NewItem(i * 16, j * 16, 32, 32, 1725, genRand.Next(2, 6));
                            break;
                        }
                        NewItem(i * 16, j * 16, 32, 32, 1725, genRand.Next(5, 11));
                        if (Main.halloween && genRand.Next(200) == 0)
                        {
                            NewItem(i * 16, j * 16, 32, 32, 1799);
                        }
                        break;
                    case 457:
                        NewItem(i * 16, j * 16, 32, 32, 3749);
                        break;
                    case 96:
                        if (num4 == 0)
                        {
                            NewItem(i * 16, j * 16, 32, 32, 345);
                        }
                        if (num4 == 1)
                        {
                            NewItem(i * 16, j * 16, 32, 32, 1791);
                        }
                        break;
                    case 441:
                        {
                            int num7 = -1;
                            switch (num4)
                            {
                                case 0:
                                    num7 = 3665;
                                    break;
                                case 1:
                                    num7 = 3666;
                                    break;
                                case 3:
                                    num7 = 3667;
                                    break;
                                case 7:
                                    num7 = 3668;
                                    break;
                                case 8:
                                    num7 = 3669;
                                    break;
                                case 9:
                                    num7 = 3670;
                                    break;
                                case 10:
                                    num7 = 3671;
                                    break;
                                case 11:
                                    num7 = 3672;
                                    break;
                                case 12:
                                    num7 = 3673;
                                    break;
                                case 13:
                                    num7 = 3674;
                                    break;
                                case 14:
                                    num7 = 3675;
                                    break;
                                case 15:
                                    num7 = 3676;
                                    break;
                                case 16:
                                    num7 = 3677;
                                    break;
                                case 17:
                                    num7 = 3678;
                                    break;
                                case 18:
                                    num7 = 3679;
                                    break;
                                case 19:
                                    num7 = 3680;
                                    break;
                                case 20:
                                    num7 = 3681;
                                    break;
                                case 21:
                                    num7 = 3682;
                                    break;
                                case 22:
                                    num7 = 3683;
                                    break;
                                case 28:
                                    num7 = 3684;
                                    break;
                                case 29:
                                    num7 = 3685;
                                    break;
                                case 30:
                                    num7 = 3686;
                                    break;
                                case 31:
                                    num7 = 3687;
                                    break;
                                case 32:
                                    num7 = 3688;
                                    break;
                                case 33:
                                    num7 = 3689;
                                    break;
                                case 34:
                                    num7 = 3690;
                                    break;
                                case 35:
                                    num7 = 3691;
                                    break;
                                case 37:
                                    num7 = 3692;
                                    break;
                                case 39:
                                    num7 = 3693;
                                    break;
                                case 41:
                                    num7 = 3694;
                                    break;
                                case 42:
                                    num7 = 3695;
                                    break;
                                case 43:
                                    num7 = 3696;
                                    break;
                                case 44:
                                    num7 = 3697;
                                    break;
                                case 45:
                                    num7 = 3698;
                                    break;
                                case 46:
                                    num7 = 3699;
                                    break;
                                case 47:
                                    num7 = 3700;
                                    break;
                                case 48:
                                    num7 = 3701;
                                    break;
                                case 49:
                                    num7 = 3702;
                                    break;
                                case 50:
                                    num7 = 3703;
                                    break;
                                case 51:
                                    num7 = 3704;
                                    break;
                            }
                            if (num7 != -1)
                            {
                                NewItem(i * 16, j * 16, 32, 32, num7);
                            }
                            break;
                        }
                    case 468:
                        {
                            int num6 = -1;
                            switch (num4)
                            {
                                case 0:
                                    num6 = 3886;
                                    break;
                                case 1:
                                    num6 = 3887;
                                    break;
                                case 2:
                                    num6 = 3950;
                                    break;
                                case 3:
                                    num6 = 3976;
                                    break;
                                case 4:
                                    num6 = -1;
                                    break;
                                case 5:
                                    num6 = 4164;
                                    break;
                                case 6:
                                    num6 = 4185;
                                    break;
                                case 7:
                                    num6 = 4206;
                                    break;
                                case 8:
                                    num6 = 4227;
                                    break;
                                case 9:
                                    num6 = 4266;
                                    break;
                                case 10:
                                    num6 = 4268;
                                    break;
                                case 11:
                                    num6 = 4585;
                                    break;
                                case 12:
                                    num6 = 4713;
                                    break;
                            }
                            if (num6 != -1)
                            {
                                NewItem(i * 16, j * 16, 32, 32, num6);
                            }
                            break;
                        }
                }
                destroyObject = false;
                for (int num8 = num3 - 1; num8 < num3 + 3; num8++)
                {
                    for (int num9 = num - 1; num9 < num + 3; num9++)
                    {
                        TileFrame(num8, num9);
                    }
                }
            }
            public void Check3x1(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = this[i, j].frameX / 18;
                int num2 = 0;
                while (num > 2)
                {
                    num -= 3;
                    num2++;
                }
                num = i - num;
                int num3 = num2 * 54;
                for (int k = num; k < num + 3; k++)
                {
                    if (this[k, j] == null)
                    {
                        this[k, j] = CreateTile();
                    }
                    if (!this[k, j].active() || this[k, j].type != type || this[k, j].frameX != (k - num) * 18 + num3 || this[k, j].frameY != 0)
                    {
                        flag = true;
                    }
                    if (this[k, j - 1].active() && (TileID.Sets.BasicChest[this[k, j - 1].type] || TileID.Sets.BasicChestFake[this[k, j - 1].type] || this[k, j - 1].type == 88 || this[k, j - 1].type == 470 || this[k, j - 1].type == 475 || this[k, j - 1].type == 597))
                    {
                        return;
                    }
                    if (!SolidTileAllowBottomSlope(k, j + 1))
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                _ = this[i, j].frameX;
                destroyObject = true;
                if (type == 235)
                {
                    NewItem(i * 16, j * 16, 32, 32, 1263);
                }
                for (int l = num; l < num + 3; l++)
                {
                    if (this[l, j] == null)
                    {
                        this[l, j] = CreateTile();
                    }
                    if (this[l, j].type == type && this[l, j].active())
                    {
                        KillTile(l, j);
                    }
                }
                destroyObject = false;
                for (int m = num - 1; m < num + 4; m++)
                {
                    TileFrame(m, j);
                }
            }
            public void CheckPile(int i, int y)
            {
                if (this[i, y] == null)
                {
                    this[i, y] = CreateTile();
                }
                if (this[i + 1, y] == null)
                {
                    this[i + 1, y] = CreateTile();
                }
                if (this[i, y + 1] == null)
                {
                    this[i, y + 1] = CreateTile();
                }
                if (this[i + 1, y + 1] == null)
                {
                    this[i + 1, y + 1] = CreateTile();
                }
                if (this[i, y].frameY == 18)
                {
                    Check2x1(i, y, this[i, y].type);
                }
                else if (!SolidTile(i, y + 1))
                {
                    KillTile(i, y);
                }
            }
            public void CheckGnome(int x, int j)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = 567;
                int num2 = j;
                bool flag = true;
                ITile tileSafely = GetTileSafely(x, num2);
                ITile tileSafely2 = GetTileSafely(x, num2 + 1);
                if (tileSafely.frameY > 0)
                {
                    num2--;
                    tileSafely = GetTileSafely(x, num2);
                    tileSafely2 = GetTileSafely(x, num2 + 1);
                }
                _ = tileSafely.frameX / 28;
                if (tileSafely.frameY == 0 && tileSafely2.frameY == 20 && tileSafely.type == num && tileSafely2.type == num)
                {
                    flag = false;
                }
                if (this[x, num2 + 2] == null)
                {
                    this[x, num2 + 2] = CreateTile();
                }
                if (!SolidTileAllowBottomSlope(x, num2 + 2) && !TileID.Sets.Platforms[this[x, num2 + 2].type])
                {
                    flag = true;
                }
                if (flag)
                {
                    destroyObject = true;
                    if (tileSafely.type == num)
                    {
                        KillTile(x, num2);
                    }
                    if (tileSafely2.type == num)
                    {
                        KillTile(x, num2 + 1);
                    }
                    NewItem(x * 16, num2 * 16, 16, 32, 4609);
                    destroyObject = false;
                }
            }
            public void CheckDoorClosed(int i, int j, ITile tileCache, int type)
            {
                if (!destroyObject)
                {
                    int num = j;
                    bool flag = false;
                    int frameY = tileCache.frameY;
                    int num2 = frameY / 54;
                    num2 += tileCache.frameX / 54 * 36;
                    num = j - frameY % 54 / 18;
                    ITile tile = this[i, num - 1];
                    ITile tile2 = this[i, num];
                    ITile tile3 = this[i, num + 1];
                    ITile tile4 = this[i, num + 2];
                    ITile tile5 = this[i, num + 3];
                    if (tile == null)
                    {
                        tile = CreateTile();
                        this[i, num - 1] = tile;
                    }
                    if (tile2 == null)
                    {
                        tile2 = CreateTile();
                        this[i, num] = tile2;
                    }
                    if (tile3 == null)
                    {
                        tile3 = CreateTile();
                        this[i, num + 1] = tile3;
                    }
                    if (tile4 == null)
                    {
                        tile4 = CreateTile();
                        this[i, num + 2] = tile4;
                    }
                    if (tile5 == null)
                    {
                        tile5 = CreateTile();
                        this[i, num + 3] = tile5;
                    }
                    if (!SolidTile(tile))
                    {
                        flag = true;
                    }
                    if (!SolidTile(tile5))
                    {
                        flag = true;
                    }
                    if (!tile2.active() || tile2.type != type)
                    {
                        flag = true;
                    }
                    if (!tile3.active() || tile3.type != type)
                    {
                        flag = true;
                    }
                    if (!tile4.active() || tile4.type != type)
                    {
                        flag = true;
                    }
                    if (flag)
                    {
                        destroyObject = true;
                        KillTile(i, num);
                        KillTile(i, num + 1);
                        KillTile(i, num + 2);
                        DropDoorItem(i, j, num2);
                    }
                    destroyObject = false;
                }
            }
            public void DropDoorItem(int x, int y, int doorStyle)
            {
                int num = 0;
                switch (doorStyle)
                {
                    case 0:
                        num = 25;
                        break;
                    case 9:
                        num = 837;
                        break;
                    case 10:
                        num = 912;
                        break;
                    case 12:
                        num = 1137;
                        break;
                    case 13:
                        num = 1138;
                        break;
                    case 14:
                        num = 1139;
                        break;
                    case 15:
                        num = 1140;
                        break;
                    case 16:
                        num = 1411;
                        break;
                    case 17:
                        num = 1412;
                        break;
                    case 18:
                        num = 1413;
                        break;
                    case 19:
                        num = 1458;
                        break;
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                        num = 1709 + doorStyle - 20;
                        break;
                    default:
                        switch (doorStyle)
                        {
                            case 24:
                                num = 1793;
                                break;
                            case 25:
                                num = 1815;
                                break;
                            case 26:
                                num = 1924;
                                break;
                            case 27:
                                num = 2044;
                                break;
                            case 28:
                                num = 2265;
                                break;
                            case 29:
                                num = 2528;
                                break;
                            case 30:
                                num = 2561;
                                break;
                            case 31:
                                num = 2576;
                                break;
                            case 32:
                                num = 2815;
                                break;
                            case 33:
                                num = 3129;
                                break;
                            case 34:
                                num = 3131;
                                break;
                            case 35:
                                num = 3130;
                                break;
                            case 36:
                                num = 3888;
                                break;
                            case 37:
                                num = 3941;
                                break;
                            case 38:
                                num = 3967;
                                break;
                            case 39:
                                num = 4155;
                                break;
                            case 40:
                                num = 4176;
                                break;
                            case 41:
                                num = 4197;
                                break;
                            case 42:
                                num = 4218;
                                break;
                            case 43:
                                num = 4307;
                                break;
                            case 44:
                                num = 4415;
                                break;
                            case 45:
                                num = 4576;
                                break;
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                                num = 812 + doorStyle;
                                break;
                            default:
                                if (doorStyle != 11)
                                {
                                    num = 649 + doorStyle;
                                }
                                break;
                        }
                        break;
                }
                if (num != 0)
                {
                    NewItem(x * 16, y * 16, 16, 16, num);
                }
            }
            public void CheckDoorOpen(int i, int j, ITile tileCache)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = 0;
                int num2 = i;
                int num3 = j;
                short frameX = tileCache.frameX;
                int frameY = tileCache.frameY;
                int num4 = frameY / 54;
                num4 += tileCache.frameX / 72 * 36;
                num3 = j - frameY % 54 / 18;
                bool flag = false;
                switch (frameX % 72)
                {
                    case 0:
                        num2 = i;
                        num = 1;
                        break;
                    case 18:
                        num2 = i - 1;
                        num = 1;
                        break;
                    case 36:
                        num2 = i + 1;
                        num = -1;
                        break;
                    case 54:
                        num2 = i;
                        num = -1;
                        break;
                }
                ITile tile = this[num2, num3 - 1];
                ITile tile2 = this[num2, num3 + 3];
                if (tile == null)
                {
                    tile = CreateTile();
                    this[num2, num3 - 1] = tile;
                }
                if (tile2 == null)
                {
                    tile2 = CreateTile();
                    this[num2, num3 + 3] = tile2;
                }
                if (!SolidTile(tile) || !SolidTile(tile2))
                {
                    flag = true;
                    destroyObject = true;
                    DropDoorItem(i, j, num4);
                }
                int num5 = num2;
                if (num == -1)
                {
                    num5 = num2 - 1;
                }
                for (int k = num5; k < num5 + 2; k++)
                {
                    for (int l = num3; l < num3 + 3; l++)
                    {
                        if (!flag)
                        {
                            ITile tile3 = this[k, l];
                            if (!tile3.active() || tile3.type != 11)
                            {
                                destroyObject = true;
                                DropDoorItem(i, j, num4);
                                flag = true;
                                k = num5;
                                l = num3;
                            }
                        }
                        if (flag)
                        {
                            KillTile(k, l);
                        }
                    }
                }
                destroyObject = false;
            }
            public void Check6x3(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = i;
                int num2 = j;
                num += this[i, j].frameX / 18 * -1;
                num2 += this[i, j].frameY / 18 * -1;
                for (int k = num; k < num + 6; k++)
                {
                    for (int l = num2; l < num2 + 3; l++)
                    {
                        int num3 = (k - num) * 18;
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != num3 || this[k, l].frameY != (l - num2) * 18)
                        {
                            flag = true;
                        }
                    }
                    if (this[k, num2 + 3] == null)
                    {
                        this[k, num2 + 3] = CreateTile();
                    }
                    if (!SolidTileAllowBottomSlope(k, num2 + 3) && (!this[k, num2 + 3].nactive() || !Main.tileSolidTop[this[k, num2 + 3].type] || this[k, num2 + 3].frameY != 0))
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int m = num; m < num + 6; m++)
                {
                    for (int n = num2; n < num2 + 3; n++)
                    {
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            KillTile(m, n);
                        }
                    }
                }
                if (type == 275)
                {
                    NewItem(i * 16, j * 16, 32, 32, 2162);
                }
                if (type == 413)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3565);
                }
                if (type == 414)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3566);
                }
                if (type == 276)
                {
                    NewItem(i * 16, j * 16, 32, 32, 2163);
                }
                if (type == 277)
                {
                    NewItem(i * 16, j * 16, 32, 32, 2164);
                }
                if (type == 278)
                {
                    NewItem(i * 16, j * 16, 32, 32, 2165);
                }
                if (type == 279)
                {
                    NewItem(i * 16, j * 16, 32, 32, 2166);
                }
                if (type == 280)
                {
                    NewItem(i * 16, j * 16, 32, 32, 2167);
                }
                if (type == 281)
                {
                    NewItem(i * 16, j * 16, 32, 32, 2168);
                }
                if (type == 296)
                {
                    NewItem(i * 16, j * 16, 32, 32, 2186);
                }
                if (type == 297)
                {
                    NewItem(i * 16, j * 16, 32, 32, 2187);
                }
                if (type == 309)
                {
                    NewItem(i * 16, j * 16, 32, 32, 2206);
                }
                if (type == 358)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3070);
                }
                if (type == 359)
                {
                    NewItem(i * 16, j * 16, 32, 32, 3071);
                }
                if (type == 542)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4396);
                }
                if (type == 550)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4461);
                }
                if (type == 551)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4462);
                }
                if (type == 553)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4473);
                }
                if (type == 554)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4474);
                }
                if (type == 558)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4481);
                }
                if (type == 559)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4483);
                }
                if (type == 599)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4882);
                }
                if (type == 600)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4883);
                }
                if (type == 601)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4884);
                }
                if (type == 602)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4885);
                }
                if (type == 603)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4886);
                }
                if (type == 604)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4887);
                }
                if (type == 605)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4888);
                }
                if (type == 606)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4889);
                }
                if (type == 607)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4890);
                }
                if (type == 608)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4891);
                }
                if (type == 609)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4892);
                }
                if (type == 610)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4893);
                }
                if (type == 611)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4894);
                }
                if (type == 612)
                {
                    NewItem(i * 16, j * 16, 32, 32, 4895);
                }
                destroyObject = false;
                for (int num4 = num - 1; num4 < num + 7; num4++)
                {
                    for (int num5 = num2 - 1; num5 < num2 + 4; num5++)
                    {
                        TileFrame(num4, num5);
                    }
                }
            }
            public void CheckAlch(int x, int y)
            {
                if (this[x, y] == null)
                {
                    this[x, y] = CreateTile();
                }
                if (this[x, y + 1] == null)
                {
                    this[x, y + 1] = CreateTile();
                }
                bool flag = false;
                if (!this[x, y + 1].nactive())
                {
                    flag = true;
                }
                if (this[x, y + 1].halfBrick())
                {
                    flag = true;
                }
                int num = this[x, y].frameX / 18;
                this[x, y].frameY = 0;
                if (!flag)
                {
                    switch (num)
                    {
                        case 0:
                            if (this[x, y + 1].type != 109 && this[x, y + 1].type != 2 && this[x, y + 1].type != 477 && this[x, y + 1].type != 492 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0 && this[x, y].lava())
                            {
                                flag = true;
                            }
                            break;
                        case 1:
                            if (this[x, y + 1].type != 60 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0 && this[x, y].lava())
                            {
                                flag = true;
                            }
                            break;
                        case 2:
                            if (this[x, y + 1].type != 0 && this[x, y + 1].type != 59 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0 && this[x, y].lava())
                            {
                                flag = true;
                            }
                            break;
                        case 3:
                            if (this[x, y + 1].type != 199 && this[x, y + 1].type != 203 && this[x, y + 1].type != 23 && this[x, y + 1].type != 25 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0 && this[x, y].lava())
                            {
                                flag = true;
                            }
                            break;
                        case 4:
                            if (this[x, y + 1].type != 53 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380 && this[x, y + 1].type != 116)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0 && this[x, y].lava())
                            {
                                flag = true;
                            }
                            break;
                        case 5:
                            if (this[x, y + 1].type != 57 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380)
                            {
                                flag = true;
                            }
                            if (this[x, y].type == 82 || !this[x, y].lava() || Main.netMode == 1)
                            {
                                break;
                            }
                            if (this[x, y].liquid > 16)
                            {
                                if (this[x, y].type == 83)
                                {
                                    this[x, y].type = 84;
                                    if (Main.netMode == 2)
                                    {
                                        SendTileSquare(-1, x, y, 1);
                                    }
                                }
                            }
                            else if (this[x, y].type == 84)
                            {
                                this[x, y].type = 83;
                                if (Main.netMode == 2)
                                {
                                    SendTileSquare(-1, x, y, 1);
                                }
                            }
                            break;
                        case 6:
                            if (this[x, y + 1].type != 78 && this[x, y + 1].type != 380 && this[x, y + 1].type != 147 && this[x, y + 1].type != 161 && this[x, y + 1].type != 163 && this[x, y + 1].type != 164 && this[x, y + 1].type != 200)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0 && this[x, y].lava())
                            {
                                flag = true;
                            }
                            break;
                    }
                }
                if (flag)
                {
                    KillTile(x, y);
                }
            }
            public void Check3x4(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = i;
                int num2 = j;
                int num3 = 0;
                int num4 = 0;
                int num5 = this[i, j].frameX / 18;
                int num6 = this[i, j].frameY / 18;
                while (num5 >= 3)
                {
                    num3++;
                    num5 -= 3;
                }
                while (num6 >= 4)
                {
                    num4++;
                    num6 -= 4;
                }
                num -= num5;
                num2 -= num6;
                for (int k = num; k < num + 3; k++)
                {
                    for (int l = num2; l < num2 + 4; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != num3 * 54 + (k - num) * 18 || this[k, l].frameY != num4 * 72 + (l - num2) * 18)
                        {
                            flag = true;
                        }
                    }
                    if (this[k, num2 + 4] == null)
                    {
                        this[k, num2 + 4] = CreateTile();
                    }
                    if (!SolidTileAllowBottomSlope(k, num2 + 4))
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int m = num; m < num + 3; m++)
                {
                    for (int n = num2; n < num2 + 4; n++)
                    {
                        if (this[m, n].type == type && this[m, n].active())
                        {
                            KillTile(m, n);
                        }
                    }
                }
                switch (type)
                {
                    case 101:
                        {
                            int type3;
                            switch (num3)
                            {
                                case 1:
                                    type3 = 1414;
                                    break;
                                case 2:
                                    type3 = 1415;
                                    break;
                                case 3:
                                    type3 = 1416;
                                    break;
                                case 4:
                                    type3 = 1463;
                                    break;
                                case 5:
                                    type3 = 1512;
                                    break;
                                case 6:
                                    type3 = 2020;
                                    break;
                                case 7:
                                    type3 = 2021;
                                    break;
                                case 8:
                                    type3 = 2022;
                                    break;
                                case 9:
                                    type3 = 2023;
                                    break;
                                case 10:
                                    type3 = 2024;
                                    break;
                                case 11:
                                    type3 = 2025;
                                    break;
                                case 12:
                                    type3 = 2026;
                                    break;
                                case 13:
                                    type3 = 2027;
                                    break;
                                case 14:
                                    type3 = 2028;
                                    break;
                                case 15:
                                    type3 = 2029;
                                    break;
                                case 16:
                                    type3 = 2030;
                                    break;
                                case 17:
                                    type3 = 2031;
                                    break;
                                case 18:
                                case 19:
                                case 20:
                                case 21:
                                    type3 = 2135 + num3 - 18;
                                    break;
                                default:
                                    switch (num3)
                                    {
                                        case 22:
                                            type3 = 2233;
                                            break;
                                        case 23:
                                            type3 = 2536;
                                            break;
                                        case 24:
                                            type3 = 2540;
                                            break;
                                        case 25:
                                            type3 = 2554;
                                            break;
                                        case 26:
                                            type3 = 2569;
                                            break;
                                        case 27:
                                            type3 = 2670;
                                            break;
                                        case 28:
                                            type3 = 2817;
                                            break;
                                        case 29:
                                            type3 = 3165;
                                            break;
                                        case 30:
                                            type3 = 3167;
                                            break;
                                        case 31:
                                            type3 = 3166;
                                            break;
                                        case 32:
                                            type3 = 3917;
                                            break;
                                        case 33:
                                            type3 = 3933;
                                            break;
                                        case 34:
                                            type3 = 3960;
                                            break;
                                        case 35:
                                            type3 = 4147;
                                            break;
                                        case 36:
                                            type3 = 4168;
                                            break;
                                        case 37:
                                            type3 = 4189;
                                            break;
                                        case 38:
                                            type3 = 4210;
                                            break;
                                        case 39:
                                            type3 = 4300;
                                            break;
                                        case 40:
                                            type3 = 4568;
                                            break;
                                        default:
                                            type3 = 354;
                                            break;
                                    }
                                    break;
                            }
                            NewItem(i * 16, j * 16, 32, 32, type3);
                            break;
                        }
                    case 102:
                        NewItem(i * 16, j * 16, 32, 32, 355);
                        break;
                    case 463:
                        NewItem(i * 16, j * 16, 32, 32, 3813);
                        break;
                    case 617:
                        {
                            int type2 = 4924 + num3;
                            NewItem(i * 16, j * 16, 32, 32, type2);
                            break;
                        }
                }
                destroyObject = false;
                for (int num7 = num - 1; num7 < num + 4; num7++)
                {
                    for (int num8 = num2 - 1; num8 < num2 + 4; num8++)
                    {
                        TileFrame(num7, num8);
                    }
                }
            }
            public void Check3x3(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                int num = i;
                int num2 = j;
                num = this[i, j].frameX / 18;
                int num3 = 0;
                while (num >= 3)
                {
                    num3++;
                    num -= 3;
                }
                int num4 = i - num;
                int num5 = 54 * num3;
                int num6 = this[i, j].frameY / 54;
                int num7 = this[i, j].frameY % 54 / 18;
                if (num >= 3)
                {
                    num -= 3;
                }
                num = i - num;
                num2 -= num7;
                for (int k = num; k < num + 3; k++)
                {
                    for (int l = num2; l < num2 + 3; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != (k - num4) * 18 + num5 || this[k, l].frameY != (l - num2) * 18 + num6 * 54)
                        {
                            flag = true;
                        }
                    }
                }
                if (type == 106 || type == 212 || type == 219 || type == 220 || type == 228 || type == 231 || type == 243 || type == 247 || type == 283 || (type >= 300 && type <= 308) || type == 354 || type == 355 || type == 499 || type == 406 || type == 412 || type == 452 || type == 455 || type == 491)
                {
                    for (int m = num; m < num + 3; m++)
                    {
                        if (this[m, num2 + 3] == null)
                        {
                            this[m, num2 + 3] = CreateTile();
                        }
                        if (!SolidTileAllowBottomSlope(m, num2 + 3))
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                else
                {
                    if (this[num + 1, num2 - 1] == null)
                    {
                        this[num + 1, num2 - 1] = CreateTile();
                    }
                    if (!this[num + 1, num2 - 1].nactive() || !Main.tileSolid[this[num + 1, num2 - 1].type] || Main.tileSolidTop[this[num + 1, num2 - 1].type])
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int n = num; n < num + 3; n++)
                {
                    for (int num8 = num2; num8 < num2 + 3; num8++)
                    {
                        if (this[n, num8].type == type && this[n, num8].active())
                        {
                            KillTile(n, num8);
                        }
                    }
                }
                switch (type)
                {
                    case 106:
                        NewItem(i * 16, j * 16, 32, 32, 363);
                        break;
                    case 243:
                        NewItem(i * 16, j * 16, 32, 32, 1430);
                        break;
                    case 212:
                        NewItem(i * 16, j * 16, 32, 32, 951);
                        break;
                    case 219:
                        NewItem(i * 16, j * 16, 32, 32, 997);
                        break;
                    case 220:
                        NewItem(i * 16, j * 16, 32, 32, 998);
                        break;
                    case 228:
                        NewItem(i * 16, j * 16, 32, 32, 1120);
                        break;
                    case 247:
                        NewItem(i * 16, j * 16, 32, 32, 1551);
                        break;
                    case 283:
                        NewItem(i * 16, j * 16, 32, 32, 2172);
                        break;
                    case 300:
                    case 301:
                    case 302:
                    case 303:
                    case 304:
                    case 305:
                    case 306:
                        NewItem(i * 16, j * 16, 32, 32, 2192 + type - 300);
                        break;
                    default:
                        switch (type)
                        {
                            case 307:
                                NewItem(i * 16, j * 16, 32, 32, 2203);
                                break;
                            case 308:
                                NewItem(i * 16, j * 16, 32, 32, 2204);
                                break;
                            case 406:
                                NewItem(i * 16, j * 16, 32, 32, 3365);
                                break;
                            case 452:
                                NewItem(i * 16, j * 16, 32, 32, 3742);
                                break;
                            case 354:
                                NewItem(i * 16, j * 16, 32, 32, 2999);
                                break;
                            case 355:
                                NewItem(i * 16, j * 16, 32, 32, 3000);
                                break;
                            case 499:
                                NewItem(i * 16, j * 16, 32, 32, 4142);
                                break;
                            case 412:
                                NewItem(i * 16, j * 16, 32, 32, 3549);
                                break;
                            case 455:
                                NewItem(i * 16, j * 16, 32, 32, 3747);
                                break;
                            case 491:
                                NewItem(i * 16, j * 16, 32, 32, 4076);
                                break;
                            case 231:
                                {
                                    int num9 = (i + 1) * 16 + 8;
                                    int num10 = j * 16;
                                    Gore.NewGore(new Vector2(num9, num10), default(Vector2), 300);
                                    Gore.NewGore(new Vector2(num9, num10 + 8), default(Vector2), 301);
                                    Gore.NewGore(new Vector2(num9, num10 + 16), default(Vector2), 302);
                                    float num11 = i * 16;
                                    float num12 = j * 16;
                                    float num13 = -1f;
                                    int plr = 0;
                                    for (int num14 = 0; num14 < 255; num14++)
                                    {
                                        if (Main.player[num14].active && !Main.player[num14].dead)
                                        {
                                            float num15 = Math.Abs(Main.player[num14].position.X - num11) + Math.Abs(Main.player[num14].position.Y - num12);
                                            if (num15 < num13 || num13 == -1f)
                                            {
                                                plr = num14;
                                                num13 = num15;
                                            }
                                        }
                                    }
                                    if (num13 < 4800f)
                                    {
                                        NPC.SpawnOnPlayer(plr, 222);
                                    }
                                    break;
                                }
                        }
                        break;
                }
                destroyObject = false;
                for (int num16 = num - 1; num16 < num + 4; num16++)
                {
                    for (int num17 = num2 - 1; num17 < num2 + 4; num17++)
                    {
                        TileFrame(num16, num17);
                    }
                }
            }
            public void Check3x2(int i, int j, int type)
            {
                if (destroyObject)
                {
                    return;
                }
                bool flag = false;
                bool flag2 = false;
                int num = j;
                if (this[i, j] == null)
                {
                    this[i, j] = CreateTile();
                }
                int num2 = 36;
                int num3 = this[i, j].frameY / num2;
                int num4 = this[i, j].frameY % num2;
                num -= num4 / 18;
                int num5 = this[i, j].frameX / 18;
                int num6 = 0;
                while (num5 > 2)
                {
                    num5 -= 3;
                    num6++;
                }
                num5 = i - num5;
                int num7 = num6 * 54;
                if (type == 14 && num6 == 25)
                {
                    flag2 = true;
                }
                int num8 = num + 2;
                if (flag2)
                {
                    num8--;
                }
                for (int k = num5; k < num5 + 3; k++)
                {
                    for (int l = num; l < num8; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active() || this[k, l].type != type || this[k, l].frameX != (k - num5) * 18 + num7 || this[k, l].frameY != (l - num) * 18 + num3 * 36)
                        {
                            flag = true;
                        }
                    }
                    switch (type)
                    {
                        default:
                            switch (type)
                            {
                                case 532:
                                case 533:
                                case 544:
                                case 555:
                                case 556:
                                case 582:
                                case 619:
                                    break;
                                case 488:
                                    {
                                        int num9 = 0;
                                        if (this[k, num8] != null && this[k, num8].active())
                                        {
                                            num9 = this[k, num8].type;
                                        }
                                        if (num9 != 2 && num9 != 477 && num9 != 109 && num9 != 492)
                                        {
                                            flag = true;
                                        }
                                        continue;
                                    }
                                default:
                                    if (!SolidTileAllowBottomSlope(k, num8))
                                    {
                                        flag = true;
                                    }
                                    continue;
                            }
                            break;
                        case 285:
                        case 286:
                        case 298:
                        case 299:
                        case 310:
                        case 339:
                        case 361:
                        case 362:
                        case 363:
                        case 364:
                        case 538:
                            break;
                    }
                    if (!SolidTileAllowBottomSlope(k, num8) && (this[k, num8] == null || !this[k, num8].nactive() || !Main.tileSolidTop[this[k, num8].type] || this[k, num8].frameY != 0) && (this[k, num8] == null || !this[k, num8].active() || !TileID.Sets.Platforms[this[k, num8].type]))
                    {
                        flag = true;
                    }
                }
                if (type == 187 && this[num5, num] != null && this[num5, num].frameX >= 756 && this[num5, num].frameX <= 900 && this[num5, num + 2].type != 2 && this[num5 + 1, num + 2].type != 2 && this[num5 + 2, num + 2].type != 2 && this[num5, num + 2].type != 477 && this[num5 + 1, num + 2].type != 477 && this[num5 + 2, num + 2].type != 477 && this[num5, num + 2].type != 492 && this[num5 + 1, num + 2].type != 492 && this[num5 + 2, num + 2].type != 492)
                {
                    this[num5, num].frameX -= 378;
                    this[num5 + 1, num].frameX -= 378;
                    this[num5 + 2, num].frameX -= 378;
                    this[num5, num + 1].frameX -= 378;
                    this[num5 + 1, num + 1].frameX -= 378;
                    this[num5 + 2, num + 1].frameX -= 378;
                    this[num5, num].type = 186;
                    this[num5 + 1, num].type = 186;
                    this[num5 + 2, num].type = 186;
                    this[num5, num + 1].type = 186;
                    this[num5 + 1, num + 1].type = 186;
                    this[num5 + 2, num + 1].type = 186;
                }
                if (flag && type == 488 && WorldGen.gen)
                {
                    for (int m = num5; m < num5 + 3; m++)
                    {
                        for (int n = num; n < num + 2; n++)
                        {
                            this[m, n].active(active: true);
                            this[m, n].type = 488;
                            this[m, n].frameX = (short)((m - num5) * 18);
                            this[m, n].frameY = (short)((n - num) * 18);
                        }
                        this[m, num + 2].active(active: true);
                        this[m, num + 2].type = 2;
                        this[m, num + 2].slope(0);
                        this[m, num + 2].halfBrick(halfBrick: false);
                    }
                    flag = false;
                }
                if (!flag)
                {
                    return;
                }
                int frameX = this[i, j].frameX;
                destroyObject = true;
                num8 = num + 3;
                if (flag2)
                {
                    num8--;
                }
                for (int num10 = num5; num10 < num5 + 3; num10++)
                {
                    for (int num11 = num; num11 < num + 3; num11++)
                    {
                        if (this[num10, num11] == null)
                        {
                            this[num10, num11] = CreateTile();
                        }
                        if (this[num10, num11].type == type && this[num10, num11].active())
                        {
                            KillTile(num10, num11);
                        }
                    }
                }
                if (type == 14)
                {
                    int type2;
                    if (num6 >= 1 && num6 <= 3)
                    {
                        type2 = 637 + num6;
                    }
                    else if (num6 >= 15 && num6 <= 20)
                    {
                        type2 = 1698 + num6;
                    }
                    else if (num6 >= 4 && num6 <= 7)
                    {
                        type2 = 823 + num6;
                    }
                    else
                    {
                        switch (num6)
                        {
                            case 8:
                                type2 = 917;
                                break;
                            case 9:
                                type2 = 1144;
                                break;
                            case 10:
                                type2 = 1397;
                                break;
                            case 11:
                                type2 = 1400;
                                break;
                            case 12:
                                type2 = 1403;
                                break;
                            case 13:
                                type2 = 1460;
                                break;
                            case 14:
                                type2 = 1510;
                                break;
                            case 23:
                                type2 = 1926;
                                break;
                            case 21:
                                type2 = 1794;
                                break;
                            case 22:
                                type2 = 1816;
                                break;
                            case 24:
                                type2 = 2248;
                                break;
                            case 25:
                                type2 = 2259;
                                break;
                            case 26:
                                type2 = 2532;
                                break;
                            case 27:
                                type2 = 2550;
                                break;
                            case 28:
                                type2 = 677;
                                break;
                            case 29:
                                type2 = 2583;
                                break;
                            case 30:
                                type2 = 2743;
                                break;
                            case 31:
                                type2 = 2824;
                                break;
                            case 32:
                                type2 = 3153;
                                break;
                            case 33:
                                type2 = 3155;
                                break;
                            case 34:
                                type2 = 3154;
                                break;
                            default:
                                type2 = 32;
                                break;
                        }
                    }
                    NewItem(i * 16, j * 16, 32, 32, type2);
                }
                switch (type)
                {
                    case 469:
                        {
                            int type4 = 3920;
                            if (num6 == 1)
                            {
                                type4 = 3948;
                            }
                            if (num6 == 2)
                            {
                                type4 = 3974;
                            }
                            if (num6 == 3)
                            {
                                type4 = 4162;
                            }
                            if (num6 == 4)
                            {
                                type4 = 4183;
                            }
                            if (num6 == 5)
                            {
                                type4 = 4204;
                            }
                            if (num6 == 6)
                            {
                                type4 = 4225;
                            }
                            if (num6 == 7)
                            {
                                type4 = 4314;
                            }
                            if (num6 == 8)
                            {
                                type4 = 4583;
                            }
                            NewItem(i * 16, j * 16, 32, 32, type4);
                            break;
                        }
                    case 114:
                        NewItem(i * 16, j * 16, 32, 32, 398);
                        break;
                    case 26:
                        if (!WorldGen.noTileActions && !WorldGen.IsGeneratingHardMode)
                        {
                            SmashAltar(i, j);
                        }
                        break;
                    case 298:
                        NewItem(i * 16, j * 16, 32, 32, 2190);
                        break;
                    case 299:
                        NewItem(i * 16, j * 16, 32, 32, 2191);
                        break;
                    case 361:
                    case 362:
                    case 363:
                    case 364:
                        NewItem(i * 16, j * 16, 32, 32, 3073 + type - 361);
                        break;
                    default:
                        if (type >= 391 && type <= 394)
                        {
                            NewItem(i * 16, j * 16, 48, 32, 3254 + type - 391);
                            break;
                        }
                        switch (type)
                        {
                            case 285:
                                NewItem(i * 16, j * 16, 32, 32, 2174);
                                break;
                            case 286:
                                NewItem(i * 16, j * 16, 32, 32, 2175);
                                break;
                            case 582:
                                NewItem(i * 16, j * 16, 32, 32, 4850);
                                break;
                            case 619:
                                NewItem(i * 16, j * 16, 32, 32, 4963);
                                break;
                            case 310:
                                NewItem(i * 16, j * 16, 32, 32, 2207);
                                break;
                            case 339:
                                NewItem(i * 16, j * 16, 32, 32, 2741);
                                break;
                            case 538:
                                NewItem(i * 16, j * 16, 32, 32, 4380);
                                break;
                            case 544:
                                NewItem(i * 16, j * 16, 32, 32, 4399);
                                break;
                            case 532:
                                NewItem(i * 16, j * 16, 32, 32, 4364);
                                break;
                            case 533:
                                NewItem(i * 16, j * 16, 32, 32, 4376);
                                break;
                            case 555:
                                NewItem(i * 16, j * 16, 32, 32, 4475);
                                break;
                            case 556:
                                NewItem(i * 16, j * 16, 32, 32, 4476);
                                break;
                            case 217:
                                NewItem(i * 16, j * 16, 32, 32, 995);
                                break;
                            case 218:
                                NewItem(i * 16, j * 16, 32, 32, 996);
                                break;
                            case 219:
                                NewItem(i * 16, j * 16, 32, 32, 997);
                                break;
                            case 220:
                                NewItem(i * 16, j * 16, 32, 32, 998);
                                break;
                            case 377:
                                NewItem(i * 16, j * 16, 32, 32, 3198);
                                break;
                            case 228:
                                NewItem(i * 16, j * 16, 32, 32, 1120);
                                break;
                            case 405:
                                NewItem(i * 16, j * 16, 32, 32, 3364);
                                break;
                            case 486:
                                NewItem(i * 16, j * 16, 32, 32, 4063);
                                break;
                            case 488:
                                NewItem(i * 16, j * 16, 32, 32, 9, genRand.Next(10, 21));
                                break;
                            case 215:
                                switch (num6)
                                {
                                    case 0:
                                        NewItem(i * 16, j * 16, 32, 32, 966);
                                        break;
                                    case 6:
                                        NewItem(i * 16, j * 16, 32, 32, 3723);
                                        break;
                                    case 7:
                                        NewItem(i * 16, j * 16, 32, 32, 3724);
                                        break;
                                    case 8:
                                    case 9:
                                    case 10:
                                    case 11:
                                    case 12:
                                    case 13:
                                        NewItem(i * 16, j * 16, 32, 32, 4689 + num6 - 8);
                                        break;
                                    default:
                                        NewItem(i * 16, j * 16, 32, 32, 3046 + num6 - 1);
                                        break;
                                }
                                break;
                            case 244:
                                NewItem(i * 16, j * 16, 32, 32, 1449);
                                break;
                            case 17:
                                NewItem(i * 16, j * 16, 32, 32, 33);
                                break;
                            case 77:
                                NewItem(i * 16, j * 16, 32, 32, 221);
                                break;
                            case 86:
                                NewItem(i * 16, j * 16, 32, 32, 332);
                                break;
                            case 237:
                                NewItem(i * 16, j * 16, 32, 32, 1292);
                                break;
                            case 87:
                                {
                                    int type3;
                                    if (num6 >= 1 && num6 <= 3)
                                    {
                                        type3 = 640 + num6;
                                    }
                                    else
                                    {
                                        switch (num6)
                                        {
                                            case 4:
                                                type3 = 919;
                                                break;
                                            case 5:
                                            case 6:
                                            case 7:
                                                type3 = 2245 + num6 - 5;
                                                break;
                                            default:
                                                if (num6 >= 8 && num6 <= 10)
                                                {
                                                    type3 = 2254 + num6 - 8;
                                                    break;
                                                }
                                                if (num6 >= 11 && num6 <= 20)
                                                {
                                                    type3 = 2376 + num6 - 11;
                                                    break;
                                                }
                                                switch (num6)
                                                {
                                                    case 21:
                                                        type3 = 2531;
                                                        break;
                                                    case 22:
                                                        type3 = 2548;
                                                        break;
                                                    case 23:
                                                        type3 = 2565;
                                                        break;
                                                    case 24:
                                                        type3 = 2580;
                                                        break;
                                                    case 25:
                                                        type3 = 2671;
                                                        break;
                                                    case 26:
                                                        type3 = 2821;
                                                        break;
                                                    case 27:
                                                        type3 = 3141;
                                                        break;
                                                    case 28:
                                                        type3 = 3143;
                                                        break;
                                                    case 29:
                                                        type3 = 3142;
                                                        break;
                                                    case 30:
                                                        type3 = 3915;
                                                        break;
                                                    case 31:
                                                        type3 = 3916;
                                                        break;
                                                    case 32:
                                                        type3 = 3944;
                                                        break;
                                                    case 33:
                                                        type3 = 3971;
                                                        break;
                                                    case 34:
                                                        type3 = 4158;
                                                        break;
                                                    case 35:
                                                        type3 = 4179;
                                                        break;
                                                    case 36:
                                                        type3 = 4200;
                                                        break;
                                                    case 37:
                                                        type3 = 4221;
                                                        break;
                                                    case 38:
                                                        type3 = 4310;
                                                        break;
                                                    case 39:
                                                        type3 = 4579;
                                                        break;
                                                    default:
                                                        type3 = 333;
                                                        break;
                                                }
                                                break;
                                        }
                                    }
                                    NewItem(i * 16, j * 16, 32, 32, type3);
                                    break;
                                }
                            case 88:
                                {
                                    int dresserItemDrop = WorldGen.GetDresserItemDrop(num6);
                                    NewItem(i * 16, j * 16, 32, 32, dresserItemDrop);
                                    break;
                                }
                            case 89:
                                NewItem(i * 16, j * 16, 32, 32, WorldGen.GetItemDrop_Benches(num6));
                                break;
                            case 133:
                                if (frameX >= 54)
                                {
                                    NewItem(i * 16, j * 16, 32, 32, 1221);
                                }
                                else
                                {
                                    NewItem(i * 16, j * 16, 32, 32, 524);
                                }
                                break;
                            case 186:
                                if (frameX < 864)
                                {
                                    break;
                                }
                                if (frameX <= 954)
                                {
                                    NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100));
                                    NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100));
                                    NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100));
                                    if (genRand.Next(3) != 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100));
                                    }
                                    if (genRand.Next(3) != 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100));
                                    }
                                    if (genRand.Next(3) != 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100));
                                    }
                                    if (genRand.Next(2) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100));
                                    }
                                    if (genRand.Next(2) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100));
                                    }
                                    if (genRand.Next(2) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100));
                                    }
                                    if (genRand.Next(3) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100));
                                    }
                                    if (genRand.Next(3) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100));
                                    }
                                    if (genRand.Next(3) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100));
                                    }
                                    if (genRand.Next(4) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100));
                                    }
                                    if (genRand.Next(4) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100));
                                    }
                                    if (genRand.Next(4) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100));
                                    }
                                    if (genRand.Next(5) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100));
                                    }
                                    if (genRand.Next(5) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100));
                                    }
                                    if (genRand.Next(5) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100));
                                    }
                                }
                                else if (frameX <= 1062)
                                {
                                    NewItem(i * 16, j * 16, 32, 32, 72, genRand.Next(10, 100));
                                    if (genRand.Next(2) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 72, genRand.Next(20, 100));
                                    }
                                    if (genRand.Next(3) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 72, genRand.Next(30, 100));
                                    }
                                    if (genRand.Next(4) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 72, genRand.Next(40, 100));
                                    }
                                    if (genRand.Next(5) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 72, genRand.Next(50, 100));
                                    }
                                }
                                else if (frameX <= 1170)
                                {
                                    NewItem(i * 16, j * 16, 32, 32, 73, genRand.Next(1, 7));
                                    if (genRand.Next(2) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 73, genRand.Next(2, 7));
                                    }
                                    if (genRand.Next(3) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 73, genRand.Next(3, 7));
                                    }
                                    if (genRand.Next(4) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 73, genRand.Next(4, 7));
                                    }
                                    if (genRand.Next(5) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 73, genRand.Next(5, 7));
                                    }
                                }
                                break;
                            case 187:
                                if (frameX >= 918 && frameX <= 970)
                                {
                                    if (Main.rand.Next(50) == 0)
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 4144);
                                    }
                                    else
                                    {
                                        NewItem(i * 16, j * 16, 32, 32, 989);
                                    }
                                }
                                break;
                        }
                        break;
                }
                destroyObject = false;
                for (int num12 = num5 - 1; num12 < num5 + 4; num12++)
                {
                    for (int num13 = num - 1; num13 < num + 4; num13++)
                    {
                        TileFrame(num12, num13);
                    }
                }
                if (type == 488)
                {
                    Utils.Broadcast("[Internal Error]事件禁用.");
                    //mysticLogsEvent.FallenLogDestroyed();
                }
            }
            public bool SolidTileAllowTopSlope(int i, int j)
            {
                try
                {
                    ITile tile = this[i, j];
                    if (tile == null)
                    {
                        return true;
                    }
                    if (tile.active() && Main.tileSolid[tile.type] && (!tile.bottomSlope() || (TileID.Sets.Platforms[tile.type] && tile.halfBrick())) && !tile.inActive())
                    {
                        return true;
                    }
                }
                catch
                {
                }
                return false;
            }
            public void Check2xX(int i, int j, ushort type)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = i;
                int num2;
                for (num2 = this[i, j].frameX; num2 >= 36; num2 -= 36)
                {
                }
                if (num2 == 18)
                {
                    num--;
                }
                if (this[num, j] == null)
                {
                    this[num, j] = CreateTile();
                }
                int num3 = this[num, j].frameY / 18;
                int num4 = 3;
                if (type == 104)
                {
                    num4 = 5;
                }
                if (type == 207)
                {
                    num4 = 4;
                }
                int num5 = 0;
                while (num3 >= num4)
                {
                    num3 -= num4;
                    num5 += num4 * 18;
                }
                int num6 = j - num3;
                if (type == 410 && num5 != 0)
                {
                    num5 += 2;
                }
                if (this[num, num6] == null)
                {
                    this[num, num6] = CreateTile();
                }
                int frameX = this[num, j].frameX;
                int frameY = this[num, j].frameY;
                bool flag = false;
                for (int k = 0; k < num4; k++)
                {
                    if (this[num, num6 + k] == null)
                    {
                        this[num, num6 + k] = CreateTile();
                    }
                    if (!this[num, num6 + k].active())
                    {
                        flag = true;
                    }
                    else if (this[num, num6 + k].type != type)
                    {
                        flag = true;
                    }
                    else if (this[num, num6 + k].frameY != k * 18 + num5)
                    {
                        flag = true;
                    }
                    else if (this[num, num6 + k].frameX != frameX)
                    {
                        flag = true;
                    }
                    if (this[num + 1, num6 + k] == null)
                    {
                        this[num + 1, num6 + k] = CreateTile();
                    }
                    if (!this[num + 1, num6 + k].active())
                    {
                        flag = true;
                    }
                    else if (this[num + 1, num6 + k].type != type)
                    {
                        flag = true;
                    }
                    else if (this[num + 1, num6 + k].frameY != k * 18 + num5)
                    {
                        flag = true;
                    }
                    else if (this[num + 1, num6 + k].frameX != frameX + 18)
                    {
                        flag = true;
                    }
                }
                if (type == 465 || type == 531 || type == 591 || type == 592)
                {
                    for (int l = 0; l < 2; l++)
                    {
                        if (!SolidTileAllowTopSlope(num + l, num6 - 1))
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                else
                {
                    if (!SolidTileAllowBottomSlope(num, num6 + num4))
                    {
                        flag = true;
                    }
                    if (!SolidTileAllowBottomSlope(num + 1, num6 + num4))
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int m = 0; m < num4; m++)
                {
                    if (this[num, num6 + m].type == type)
                    {
                        KillTile(num, num6 + m);
                    }
                    if (this[num + 1, num6 + m].type == type)
                    {
                        KillTile(num + 1, num6 + m);
                    }
                }
                if (type == 104)
                {
                    int num7 = frameX / 36;
                    int num8 = 0;
                    if (num7 >= 1 && num7 <= 5)
                    {
                        num8 = 2237 + num7 - 1;
                    }
                    else
                    {
                        switch (num7)
                        {
                            case 6:
                                num8 = 2560;
                                break;
                            case 7:
                                num8 = 2575;
                                break;
                            case 8:
                            case 9:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                            case 17:
                            case 18:
                            case 19:
                            case 20:
                            case 21:
                            case 22:
                            case 23:
                                num8 = 2591 + num7 - 8;
                                break;
                            default:
                                switch (num7)
                                {
                                    case 24:
                                        num8 = 2809;
                                        break;
                                    case 25:
                                        num8 = 3126;
                                        break;
                                    case 26:
                                        num8 = 3128;
                                        break;
                                    case 27:
                                        num8 = 3127;
                                        break;
                                    case 28:
                                        num8 = 3898;
                                        break;
                                    case 29:
                                        num8 = 3899;
                                        break;
                                    case 30:
                                        num8 = 3900;
                                        break;
                                    case 31:
                                        num8 = 3901;
                                        break;
                                    case 32:
                                        num8 = 3902;
                                        break;
                                    case 33:
                                        num8 = 3940;
                                        break;
                                    case 34:
                                        num8 = 3966;
                                        break;
                                    case 35:
                                        num8 = 4154;
                                        break;
                                    case 36:
                                        num8 = 4175;
                                        break;
                                    case 37:
                                        num8 = 4196;
                                        break;
                                    case 38:
                                        num8 = 4217;
                                        break;
                                    case 39:
                                        num8 = 4306;
                                        break;
                                    case 40:
                                        num8 = 4575;
                                        break;
                                    default:
                                        num8 = 359;
                                        break;
                                }
                                break;
                        }
                    }
                    NewItem(num * 16, j * 16, 32, 32, num8);
                }
                if (type == 105)
                {
                    int num9 = frameX / 36;
                    int num10 = frameY / 54;
                    num10 %= 3;
                    num9 += num10 * 55;
                    switch (num9)
                    {
                        case 0:
                            num9 = 360;
                            break;
                        case 1:
                            num9 = 52;
                            break;
                        case 43:
                            num9 = 1152;
                            break;
                        case 44:
                            num9 = 1153;
                            break;
                        case 45:
                            num9 = 1154;
                            break;
                        case 46:
                            num9 = 1408;
                            break;
                        case 47:
                            num9 = 1409;
                            break;
                        case 48:
                            num9 = 1410;
                            break;
                        case 49:
                            num9 = 1462;
                            break;
                        case 50:
                            num9 = 2672;
                            break;
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                        case 58:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                            num9 = 3651 + num9 - 51;
                            break;
                        default:
                            if (num9 >= 63 && num9 <= 75)
                            {
                                num9 = 3708 + num9 - 63;
                                break;
                            }
                            switch (num9)
                            {
                                case 76:
                                    num9 = 4397;
                                    break;
                                case 77:
                                    num9 = 4360;
                                    break;
                                case 78:
                                    num9 = 4342;
                                    break;
                                case 79:
                                    num9 = 4466;
                                    break;
                                default:
                                    num9 = 438 + num9 - 2;
                                    break;
                            }
                            break;
                    }
                    NewItem(num * 16, j * 16, 32, 32, num9);
                }
                if (type == 356)
                {
                    NewItem(num * 16, j * 16, 32, 32, 3064);
                }
                if (type == 456)
                {
                    NewItem(num * 16, j * 16, 32, 32, 3748);
                }
                if (type == 337)
                {
                    int num11 = frameX / 36;
                    NewItem(num * 16, j * 16, 32, 32, 2702 + num11);
                }
                if (type == 207)
                {
                    int num12 = frameX / 36;
                    switch (num12)
                    {
                        case 0:
                            num12 = 909;
                            break;
                        case 1:
                            num12 = 910;
                            break;
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            num12 = 938 + num12;
                            break;
                        default:
                            switch (num12)
                            {
                                case 8:
                                    num12 = 4922;
                                    break;
                                case 9:
                                    num12 = 4417;
                                    break;
                            }
                            break;
                    }
                    NewItem(num * 16, j * 16, 32, 32, num12);
                }
                if (type == 410)
                {
                    int num13 = frameX / 36;
                    NewItem(num * 16, j * 16, 32, 32, num13 + 3536);
                }
                if (type == 480)
                {
                    NewItem(num * 16, j * 16, 32, 32, 4054);
                }
                if (type == 509)
                {
                    NewItem(num * 16, j * 16, 32, 32, 4318);
                }
                if (type == 489)
                {
                    NewItem(num * 16, j * 16, 32, 32, 4074);
                }
                if (type == 320)
                {
                    NewItem(num * 16, j * 16, 32, 32, 2496);
                }
                if (type == 349)
                {
                    NewItem(num * 16, j * 16, 32, 32, 470);
                }
                if (type == 506)
                {
                    NewItem(num * 16, j * 16, 32, 32, 4276);
                }
                if (type == 545)
                {
                    NewItem(num * 16, j * 16, 32, 32, 4420);
                }
                if (type == 465)
                {
                    NewItem(num * 16, j * 16, 32, 32, 3815);
                }
                if (type == 531)
                {
                    NewItem(num * 16, j * 16, 32, 32, 4355);
                }
                if (type == 378)
                {
                    NewItem(num * 16, j * 16, 32, 48, 3202);
                    Kill(num, num6);
                }
                if (type == 560)
                {
                    int num14 = frameX / 36;
                    NewItem(num * 16, j * 16, 32, 32, num14 + 4599);
                }
                if (type == 591)
                {
                    int num15 = frameX / 36;
                    NewItem(num * 16, j * 16, 32, 32, num15 + 4858);
                }
                if (type == 592)
                {
                    NewItem(num * 16, j * 16, 32, 32, 4867);
                }
                destroyObject = false;
            }
            public void SmashAltar(int i, int j)
            {
                Utils.Broadcast("[Internal Error]事件禁用.");
                return;

                /*int num = altarCount % 3;
                int num2 = altarCount / 3 + 1;
                float num3 = MaxTilesX / 4200;
                int num4 = 1 - num;
                num3 = num3 * 310f - (float)(85 * num);
                num3 *= 0.85f;
                num3 /= (float)num2;
                bool flag = false;
                if (Main.drunkWorld)
                {
                    if (SavedOreTiers.Adamantite == 111)
                    {
                        SavedOreTiers.Adamantite = 223;
                    }
                    else if (SavedOreTiers.Adamantite == 223)
                    {
                        SavedOreTiers.Adamantite = 111;
                    }
                }
                switch (num)
                {
                    case 0:
                        {
                            if (SavedOreTiers.Cobalt == -1)
                            {
                                flag = true;
                                SavedOreTiers.Cobalt = 107;
                                if (genRand.Next(2) == 0)
                                {
                                    SavedOreTiers.Cobalt = 221;
                                }
                            }
                            int num6 = 12;
                            if (SavedOreTiers.Cobalt == 221)
                            {
                                num6 += 9;
                                num3 *= 0.9f;
                            }
                            if (Main.netMode == 0)
                            {
                                Main.NewText(Lang.misc[num6].Value, 50, byte.MaxValue, 130);
                            }
                            else if (Main.netMode == 2)
                            {
                                ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num6].Key), new Color(50, 255, 130));
                            }
                            num = SavedOreTiers.Cobalt;
                            num3 *= 1.05f;
                            break;
                        }
                    case 1:
                        {
                            if (Main.drunkWorld)
                            {
                                if (SavedOreTiers.Mythril == 108)
                                {
                                    SavedOreTiers.Mythril = 222;
                                }
                                else if (SavedOreTiers.Mythril == 222)
                                {
                                    SavedOreTiers.Mythril = 108;
                                }
                            }
                            if (SavedOreTiers.Mythril == -1)
                            {
                                flag = true;
                                SavedOreTiers.Mythril = 108;
                                if (genRand.Next(2) == 0)
                                {
                                    SavedOreTiers.Mythril = 222;
                                }
                            }
                            int num7 = 13;
                            if (SavedOreTiers.Mythril == 222)
                            {
                                num7 += 9;
                                num3 *= 0.9f;
                            }
                            if (Main.netMode == 0)
                            {
                                Main.NewText(Lang.misc[num7].Value, 50, byte.MaxValue, 130);
                            }
                            else if (Main.netMode == 2)
                            {
                                ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num7].Key), new Color(50, 255, 130));
                            }
                            num = SavedOreTiers.Mythril;
                            break;
                        }
                    default:
                        {
                            if (Main.drunkWorld)
                            {
                                if (SavedOreTiers.Cobalt == 107)
                                {
                                    SavedOreTiers.Cobalt = 221;
                                }
                                else if (SavedOreTiers.Cobalt == 221)
                                {
                                    SavedOreTiers.Cobalt = 107;
                                }
                            }
                            if (SavedOreTiers.Adamantite == -1)
                            {
                                flag = true;
                                SavedOreTiers.Adamantite = 111;
                                if (genRand.Next(2) == 0)
                                {
                                    SavedOreTiers.Adamantite = 223;
                                }
                            }
                            int num5 = 14;
                            if (SavedOreTiers.Adamantite == 223)
                            {
                                num5 += 9;
                                num3 *= 0.9f;
                            }
                            if (Main.netMode == 0)
                            {
                                Main.NewText(Lang.misc[num5].Value, 50, byte.MaxValue, 130);
                            }
                            else if (Main.netMode == 2)
                            {
                                ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num5].Key), new Color(50, 255, 130));
                            }
                            num = SavedOreTiers.Adamantite;
                            break;
                        }
                }
                if (flag)
                {
                    SendDataToPlayer(7);
                }
                for (int k = 0; (float)k < num3; k++)
                {
                    int i2 = genRand.Next(100, MaxTilesX - 100);
                    double num8 = Main.worldSurface;
                    if (num == 108 || num == 222)
                    {
                        num8 = Main.rockLayer;
                    }
                    if (num == 111 || num == 223)
                    {
                        num8 = (Main.rockLayer + Main.rockLayer + (double)MaxTilesY) / 3.0;
                    }
                    int j2 = genRand.Next((int)num8, MaxTilesY - 150);
                    OreRunner(i2, j2, genRand.Next(5, 9 + num4), genRand.Next(5, 9 + num4), (ushort)num);
                }
                int num9 = genRand.Next(3);
                int num10 = 0;
                while (num9 != 2 && num10++ < 1000)
                {
                    int num11 = genRand.Next(100, MaxTilesX - 100);
                    int num12 = genRand.Next((int)Main.rockLayer + 50, MaxTilesY - 300);
                    if (!this[num11, num12].active() || this[num11, num12].type != 1)
                    {
                        continue;
                    }
                    if (num9 == 0)
                    {
                        if (crimson)
                        {
                            this[num11, num12].type = 203;
                        }
                        else
                        {
                            this[num11, num12].type = 25;
                        }
                    }
                    else
                    {
                        this[num11, num12].type = 117;
                    }
                    if (Main.netMode == 2)
                    {
                        SendTileSquare(-1, num11, num12, 1);
                    }
                    break;
                }
                if (Main.netMode != 1)
                {
                    int num13 = Main.rand.Next(2) + 1;
                    for (int l = 0; l < num13; l++)
                    {
                        NPC.SpawnOnPlayer(Terraria.Player.FindClosest(new Vector2(i * 16, j * 16), 16, 16), 82);
                    }
                }
                altarCount++;
                AchievementsHelper.NotifyProgressionEvent(6);*/
            }
            public void Check1x2Top(int x, int j, ushort type)
            {
                if (destroyObject)
                {
                    return;
                }
                int num = j;
                bool flag = true;
                int num2 = this[x, num].frameY / 18;
                int num3 = 0;
                while (num2 >= 2)
                {
                    num2 -= 2;
                    num3++;
                }
                num -= num2;
                num2 = num3 * 36;
                if (this[x, num] == null)
                {
                    this[x, num] = CreateTile();
                }
                if (this[x, num + 1] == null)
                {
                    this[x, num + 1] = CreateTile();
                }
                if (this[x, num] == null)
                {
                    this[x, num] = CreateTile();
                }
                if (this[x, num].frameY == num2 && this[x, num + 1].frameY == num2 + 18 && this[x, num].type == type && this[x, num + 1].type == type)
                {
                    flag = false;
                }
                if (this[x, num - 1] == null)
                {
                    this[x, num - 1] = CreateTile();
                }
                if (!this[x, num - 1].nactive() || !Main.tileSolid[this[x, num - 1].type] || Main.tileSolidTop[this[x, num - 1].type])
                {
                    flag = true;
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                if (this[x, num].type == type)
                {
                    KillTile(x, num);
                }
                if (this[x, num + 1].type == type)
                {
                    KillTile(x, num + 1);
                }
                switch (type)
                {
                    case 42:
                        {
                            int type2 = 0;
                            if (num3 == 0)
                            {
                                type2 = 136;
                            }
                            else if (num3 == 7)
                            {
                                type2 = 1431;
                            }
                            else if (num3 == 8)
                            {
                                type2 = 1808;
                            }
                            else if (num3 == 9)
                            {
                                type2 = 1859;
                            }
                            else if (num3 < 10)
                            {
                                type2 = 1389 + num3;
                            }
                            else
                            {
                                switch (num3)
                                {
                                    case 10:
                                        type2 = 2032;
                                        break;
                                    case 11:
                                        type2 = 2033;
                                        break;
                                    case 12:
                                        type2 = 2034;
                                        break;
                                    case 13:
                                        type2 = 2035;
                                        break;
                                    case 14:
                                        type2 = 2036;
                                        break;
                                    case 15:
                                        type2 = 2037;
                                        break;
                                    case 16:
                                        type2 = 2038;
                                        break;
                                    case 17:
                                        type2 = 2039;
                                        break;
                                    case 18:
                                        type2 = 2040;
                                        break;
                                    case 19:
                                        type2 = 2041;
                                        break;
                                    case 20:
                                        type2 = 2042;
                                        break;
                                    case 21:
                                        type2 = 2043;
                                        break;
                                    case 22:
                                    case 23:
                                    case 24:
                                    case 25:
                                        type2 = 2145 + num3 - 22;
                                        break;
                                    default:
                                        switch (num3)
                                        {
                                            case 26:
                                                type2 = 2226;
                                                break;
                                            case 27:
                                                type2 = 2530;
                                                break;
                                            case 28:
                                                type2 = 2546;
                                                break;
                                            case 29:
                                                type2 = 2564;
                                                break;
                                            case 30:
                                                type2 = 2579;
                                                break;
                                            case 31:
                                                type2 = 2641;
                                                break;
                                            case 32:
                                                type2 = 2642;
                                                break;
                                            case 33:
                                                type2 = 2820;
                                                break;
                                            case 34:
                                                type2 = 3138;
                                                break;
                                            case 35:
                                                type2 = 3140;
                                                break;
                                            case 36:
                                                type2 = 3139;
                                                break;
                                            case 37:
                                                type2 = 3891;
                                                break;
                                            case 38:
                                                type2 = 3943;
                                                break;
                                            case 39:
                                                type2 = 3970;
                                                break;
                                            case 40:
                                                type2 = 4157;
                                                break;
                                            case 41:
                                                type2 = 4178;
                                                break;
                                            case 42:
                                                type2 = 4199;
                                                break;
                                            case 43:
                                                type2 = 4220;
                                                break;
                                            case 44:
                                                type2 = 4309;
                                                break;
                                            case 45:
                                                type2 = 4578;
                                                break;
                                        }
                                        break;
                                }
                            }
                            NewItem(x * 16, num * 16, 32, 32, type2);
                            break;
                        }
                    case 270:
                        NewItem(x * 16, num * 16, 32, 32, 1993);
                        break;
                    case 271:
                        NewItem(x * 16, num * 16, 32, 32, 2005);
                        break;
                    case 581:
                        NewItem(x * 16, num * 16, 32, 32, 4848);
                        break;
                    case 572:
                        NewItem(x * 16, num * 16, 32, 32, 4695 + num3);
                        break;
                }
                destroyObject = false;
            }
            public void Check1xX(int x, int j, short type)
            {
                if (destroyObject)
                {
                    return;
                }
                int frameX = this[x, j].frameX;
                int num = 3;
                if (type == 92)
                {
                    num = 6;
                }
                int num2 = this[x, j].frameY;
                int num3 = 0;
                while (num2 >= 18 * num)
                {
                    num2 -= 18 * num;
                    num3++;
                }
                int num4 = this[x, j].frameX / 18;
                int num5 = j - num2 / 18;
                bool flag = false;
                for (int i = 0; i < num; i++)
                {
                    if (this[x, num5 + i] == null)
                    {
                        this[x, num5 + i] = CreateTile();
                    }
                    if (!this[x, num5 + i].active())
                    {
                        flag = true;
                    }
                    else if (this[x, num5 + i].type != type)
                    {
                        flag = true;
                    }
                    else if (this[x, num5 + i].frameY != i * 18 + num3 * num * 18)
                    {
                        flag = true;
                    }
                    else if (this[x, num5 + i].frameX != frameX)
                    {
                        flag = true;
                    }
                }
                if (this[x, num5 + num] == null)
                {
                    this[x, num5 + num] = CreateTile();
                }
                if (!SolidTileAllowBottomSlope(x, num5 + num))
                {
                    flag = true;
                }
                if (!flag)
                {
                    return;
                }
                destroyObject = true;
                for (int k = 0; k < num; k++)
                {
                    if (this[x, num5 + k].type == type)
                    {
                        KillTile(x, num5 + k);
                    }
                }
                if (type == 92)
                {
                    NewItem(x * 16, j * 16, 32, 32, 341);
                }
                if (type == 453)
                {
                    int num6 = 0;
                    num6 = ((num4 < 2) ? 3744 : ((num4 >= 4) ? 3743 : 3745));
                    NewItem(x * 16, j * 16, 16, 32, num6);
                }
                if (type == 93)
                {
                    int type2 = 0;
                    switch (num3)
                    {
                        case 0:
                            type2 = 342;
                            break;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                            type2 = 2082 + num3 - 1;
                            break;
                        default:
                            if (num3 >= 11 && num3 <= 16)
                            {
                                type2 = 2129 + num3 - 11;
                                break;
                            }
                            switch (num3)
                            {
                                case 17:
                                    type2 = 2225;
                                    break;
                                case 18:
                                    type2 = 2533;
                                    break;
                                case 19:
                                    type2 = 2547;
                                    break;
                                case 20:
                                    type2 = 2563;
                                    break;
                                case 21:
                                    type2 = 2578;
                                    break;
                                case 22:
                                    type2 = 2643;
                                    break;
                                case 23:
                                    type2 = 2644;
                                    break;
                                case 24:
                                    type2 = 2645;
                                    break;
                                case 25:
                                    type2 = 2646;
                                    break;
                                case 26:
                                    type2 = 2647;
                                    break;
                                case 27:
                                    type2 = 2819;
                                    break;
                                case 28:
                                    type2 = 3135;
                                    break;
                                case 29:
                                    type2 = 3137;
                                    break;
                                case 30:
                                    type2 = 3136;
                                    break;
                                case 31:
                                    type2 = 3892;
                                    break;
                                case 32:
                                    type2 = 3942;
                                    break;
                                case 33:
                                    type2 = 3969;
                                    break;
                                case 34:
                                    type2 = 4156;
                                    break;
                                case 35:
                                    type2 = 4177;
                                    break;
                                case 36:
                                    type2 = 4198;
                                    break;
                                case 37:
                                    type2 = 4219;
                                    break;
                                case 38:
                                    type2 = 4308;
                                    break;
                                case 39:
                                    type2 = 4577;
                                    break;
                            }
                            break;
                    }
                    NewItem(x * 16, j * 16, 32, 32, type2);
                }
                destroyObject = false;
            }
            public bool CheckCactus(int i, int j)
            {
                int num = j;
                int num2 = i;
                while (this[num2, num] != null && this[num2, num].active() && this[num2, num].type == 80)
                {
                    num++;
                    if (this[num2, num] == null)
                    {
                        return false;
                    }
                    if (!this[num2, num].active() || this[num2, num].type != 80)
                    {
                        if (this[num2 - 1, num] != null && this[num2 - 1, num].active() && this[num2 - 1, num].type == 80 && this[num2 - 1, num - 1] != null && this[num2 - 1, num - 1].active() && this[num2 - 1, num - 1].type == 80 && num2 >= i)
                        {
                            num2--;
                        }
                        if (this[num2 + 1, num] != null && this[num2 + 1, num].active() && this[num2 + 1, num].type == 80 && this[num2 + 1, num - 1] != null && this[num2 + 1, num - 1].active() && this[num2 + 1, num - 1].type == 80 && num2 <= i)
                        {
                            num2++;
                        }
                    }
                }
                if (!this[num2, num].nactive() || this[num2, num].halfBrick() || this[num2, num].slope() != 0 || (this[num2, num].type != 53 && this[num2, num].type != 112 && this[num2, num].type != 116 && this[num2, num].type != 234))
                {
                    KillTile(i, j);
                    return true;
                }
                if (i != num2)
                {
                    if ((!this[i, j + 1].active() || this[i, j + 1].type != 80) && (!this[i - 1, j].active() || this[i - 1, j].type != 80) && (!this[i + 1, j].active() || this[i + 1, j].type != 80))
                    {
                        KillTile(i, j);
                        return true;
                    }
                }
                else if (i == num2 && (!this[i, j + 1].active() || (this[i, j + 1].type != 80 && this[i, j + 1].type != 53 && this[i, j + 1].type != 112 && this[i, j + 1].type != 116 && this[i, j + 1].type != 234)))
                {
                    KillTile(i, j);
                    return true;
                }
                return false;
            }
            public void CactusFrame(int i, int j)
            {
                try
                {
                    int num = j;
                    int num2 = i;
                    if (!CheckCactus(i, j))
                    {
                        while (this[num2, num].active() && this[num2, num].type == 80)
                        {
                            num++;
                            if (this[num2, num] == null)
                            {
                                return;
                            }
                            if (!this[num2, num].active() || this[num2, num].type != 80)
                            {
                                if (this[num2 - 1, num] != null && this[num2 - 1, num].active() && this[num2 - 1, num].type == 80 && this[num2 - 1, num - 1].active() && this[num2 - 1, num - 1].type == 80 && num2 >= i)
                                {
                                    num2--;
                                }
                                if (this[num2 + 1, num] != null && this[num2 + 1, num].active() && this[num2 + 1, num].type == 80 && this[num2 + 1, num - 1].active() && this[num2 + 1, num - 1].type == 80 && num2 <= i)
                                {
                                    num2++;
                                }
                            }
                        }
                        num--;
                        int num3 = i - num2;
                        num2 = i;
                        num = j;
                        if (this[i - 2, j] != null)
                        {
                            int type = this[i - 2, j].type;
                            if (this[i - 1, j] != null)
                            {
                                int num4 = this[i - 1, j].type;
                                if (this[i + 1, j] != null)
                                {
                                    int num5 = this[i + 1, j].type;
                                    if (this[i, j - 1] != null)
                                    {
                                        int num6 = this[i, j - 1].type;
                                        if (num6 == 227)
                                        {
                                            num6 = 80;
                                        }
                                        int num7 = this[i, j + 1].type;
                                        int num8 = this[i - 1, j + 1].type;
                                        int num9 = this[i + 1, j + 1].type;
                                        if (!this[i - 1, j].active())
                                        {
                                            num4 = -1;
                                        }
                                        if (!this[i + 1, j].active())
                                        {
                                            num5 = -1;
                                        }
                                        if (!this[i, j - 1].active())
                                        {
                                            num6 = -1;
                                        }
                                        if (!this[i, j + 1].active())
                                        {
                                            num7 = -1;
                                        }
                                        if (!this[i - 1, j + 1].active())
                                        {
                                            num8 = -1;
                                        }
                                        if (!this[i + 1, j + 1].active())
                                        {
                                            num9 = -1;
                                        }
                                        short num10 = this[i, j].frameX;
                                        short num11 = this[i, j].frameY;
                                        switch (num3)
                                        {
                                            case 0:
                                                if (num6 != 80)
                                                {
                                                    if (num4 == 80 && num5 == 80 && num8 != 80 && num9 != 80 && type != 80)
                                                    {
                                                        num10 = 90;
                                                        num11 = 0;
                                                    }
                                                    else if (num4 == 80 && num8 != 80 && type != 80)
                                                    {
                                                        num10 = 72;
                                                        num11 = 0;
                                                    }
                                                    else if (num5 == 80 && num9 != 80)
                                                    {
                                                        num10 = 18;
                                                        num11 = 0;
                                                    }
                                                    else
                                                    {
                                                        num10 = 0;
                                                        num11 = 0;
                                                    }
                                                }
                                                else if (num4 == 80 && num5 == 80 && num8 != 80 && num9 != 80 && type != 80)
                                                {
                                                    num10 = 90;
                                                    num11 = 36;
                                                }
                                                else if (num4 == 80 && num8 != 80 && type != 80)
                                                {
                                                    num10 = 72;
                                                    num11 = 36;
                                                }
                                                else if (num5 == 80 && num9 != 80)
                                                {
                                                    num10 = 18;
                                                    num11 = 36;
                                                }
                                                else if (num7 >= 0 && Main.tileSolid[num7])
                                                {
                                                    num10 = 0;
                                                    num11 = 36;
                                                }
                                                else
                                                {
                                                    num10 = 0;
                                                    num11 = 18;
                                                }
                                                break;
                                            case -1:
                                                if (num5 == 80)
                                                {
                                                    if (num6 != 80 && num7 != 80)
                                                    {
                                                        num10 = 108;
                                                        num11 = 36;
                                                    }
                                                    else if (num7 != 80)
                                                    {
                                                        num10 = 54;
                                                        num11 = 36;
                                                    }
                                                    else if (num6 != 80)
                                                    {
                                                        num10 = 54;
                                                        num11 = 0;
                                                    }
                                                    else
                                                    {
                                                        num10 = 54;
                                                        num11 = 18;
                                                    }
                                                }
                                                else if (num6 != 80)
                                                {
                                                    num10 = 54;
                                                    num11 = 0;
                                                }
                                                else
                                                {
                                                    num10 = 54;
                                                    num11 = 18;
                                                }
                                                break;
                                            case 1:
                                                if (num4 == 80)
                                                {
                                                    if (num6 != 80 && num7 != 80)
                                                    {
                                                        num10 = 108;
                                                        num11 = 18;
                                                    }
                                                    else if (num7 != 80)
                                                    {
                                                        num10 = 36;
                                                        num11 = 36;
                                                    }
                                                    else if (num6 != 80)
                                                    {
                                                        num10 = 36;
                                                        num11 = 0;
                                                    }
                                                    else
                                                    {
                                                        num10 = 36;
                                                        num11 = 18;
                                                    }
                                                }
                                                else if (num6 != 80)
                                                {
                                                    num10 = 36;
                                                    num11 = 0;
                                                }
                                                else
                                                {
                                                    num10 = 36;
                                                    num11 = 18;
                                                }
                                                break;
                                        }
                                        if (num10 != this[i, j].frameX || num11 != this[i, j].frameY)
                                        {
                                            this[i, j].frameX = num10;
                                            this[i, j].frameY = num11;
                                            DiamondTileFrame(i, j);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch
                {
                    this[i, j].frameX = 0;
                    this[i, j].frameY = 0;
                }
            }
            public void DiamondTileFrame(int i, int j)
            {
                TileFrame(i - 1, j);
                TileFrame(i, j - 1);
                TileFrame(i, j + 1);
                TileFrame(i + 1, j);
            }
            public void TileFrame(int i, int j, bool resetFrame = false, bool noBreak = false)
            {
                bool addToList = false;
                try
                {
                    if (i > 5 && j > 5 && i < MaxTilesX - 5 && j < MaxTilesY - 5 && this[i, j] != null)
                    {
                        if (WorldGen.SkipFramingBecauseOfGen && !Main.tileFrameImportant[this[i, j].type])
                        {
                            return;
                        }
                        addToList = UpdateMapTile(i, j);
                        ITile tile = this[i, j];
                        if (!tile.active())
                        {
                            tile.halfBrick(halfBrick: false);
                            tile.color(0);
                            tile.slope(0);
                        }
                        if (tile.liquid > 0 && Main.netMode != 1 && !WorldGen.noLiquidCheck)
                        {
                            AddWater(i, j);
                        }
                        if (tile.active())
                        {
                            if (!noBreak || !Main.tileFrameImportant[tile.type] || tile.type == 4)
                            {
                                int num = tile.type;
                                if (Main.tileStone[num])
                                {
                                    num = 1;
                                }
                                int frameX = tile.frameX;
                                int frameY = tile.frameY;
                                Rectangle rectangle = new Rectangle(-1, -1, 0, 0);
                                if (Main.tileFrameImportant[tile.type])
                                {
                                    switch (num)
                                    {
                                        case 518:
                                            CheckLilyPad(i, j);
                                            break;
                                        case 519:
                                            CheckCatTail(i, j);
                                            break;
                                        case 549:
                                            CheckUnderwaterPlant(549, i, j);
                                            break;
                                        case 571:
                                            CheckBamboo(i, j);
                                            break;
                                        case 4:
                                            CheckTorch(i, j);
                                            break;
                                        case 442:
                                            CheckProjectilePressurePad(i, j);
                                            break;
                                        case 136:
                                            {
                                                ITile tile8 = this[i, j - 1];
                                                ITile tile9 = this[i, j + 1];
                                                ITile tile2 = this[i - 1, j];
                                                ITile tile3 = this[i + 1, j];
                                                ITile tile4 = this[i - 1, j + 1];
                                                ITile tile5 = this[i + 1, j + 1];
                                                ITile tile6 = this[i - 1, j - 1];
                                                ITile tile7 = this[i + 1, j - 1];
                                                int num20 = -1;
                                                int num21 = -1;
                                                int num22 = -1;
                                                int tree = -1;
                                                int tree2 = -1;
                                                int tree3 = -1;
                                                int tree4 = -1;
                                                if (tile8 != null && tile8.nactive())
                                                {
                                                    _ = tile8.type;
                                                }
                                                if (tile9 != null && tile9.nactive() && !tile9.halfBrick() && !tile9.topSlope())
                                                {
                                                    num20 = tile9.type;
                                                }
                                                if (tile2 != null && tile2.nactive())
                                                {
                                                    num21 = tile2.type;
                                                }
                                                if (tile3 != null && tile3.nactive())
                                                {
                                                    num22 = tile3.type;
                                                }
                                                if (tile4 != null && tile4.nactive())
                                                {
                                                    tree = tile4.type;
                                                }
                                                if (tile5 != null && tile5.nactive())
                                                {
                                                    tree2 = tile5.type;
                                                }
                                                if (tile6 != null && tile6.nactive())
                                                {
                                                    tree3 = tile6.type;
                                                }
                                                if (tile7 != null && tile7.nactive())
                                                {
                                                    tree4 = tile7.type;
                                                }
                                                if (num20 >= 0 && Main.tileSolid[num20] && !Main.tileNoAttach[num20] && !tile9.halfBrick() && (tile9.slope() == 0 || tile9.bottomSlope()))
                                                {
                                                    tile.frameX = 0;
                                                }
                                                else if ((num21 >= 0 && Main.tileSolid[num21] && !Main.tileNoAttach[num21] && (tile2.leftSlope() || tile2.slope() == 0) && !tile2.halfBrick()) || (num21 >= 0 && TileID.Sets.IsBeam[num21]) || (WorldGen.IsTreeType(num21) && WorldGen.IsTreeType(tree3) && WorldGen.IsTreeType(tree)))
                                                {
                                                    tile.frameX = 18;
                                                }
                                                else if ((num22 >= 0 && Main.tileSolid[num22] && !Main.tileNoAttach[num22] && (tile3.rightSlope() || tile3.slope() == 0) && !tile3.halfBrick()) || (num22 >= 0 && TileID.Sets.IsBeam[num22]) || (WorldGen.IsTreeType(num22) && WorldGen.IsTreeType(tree4) && WorldGen.IsTreeType(tree2)))
                                                {
                                                    tile.frameX = 36;
                                                }
                                                else if (tile.wall > 0)
                                                {
                                                    tile.frameX = 54;
                                                }
                                                else
                                                {
                                                    KillTile(i, j);
                                                }
                                                break;
                                            }
                                        case 129:
                                        case 149:
                                            {
                                                ITile tile8 = this[i, j - 1];
                                                ITile tile9 = this[i, j + 1];
                                                ITile tile2 = this[i - 1, j];
                                                ITile tile3 = this[i + 1, j];
                                                int num23 = -1;
                                                int num24 = -1;
                                                int num25 = -1;
                                                int num26 = -1;
                                                if (tile8 != null && tile8.nactive() && !tile8.bottomSlope())
                                                {
                                                    num24 = tile8.type;
                                                }
                                                if (tile9 != null && tile9.nactive() && !tile9.halfBrick() && !tile9.topSlope())
                                                {
                                                    num23 = tile9.type;
                                                }
                                                if (tile2 != null && tile2.nactive())
                                                {
                                                    num25 = tile2.type;
                                                }
                                                if (tile3 != null && tile3.nactive())
                                                {
                                                    num26 = tile3.type;
                                                }
                                                if (num23 >= 0 && Main.tileSolid[num23] && !Main.tileSolidTop[num23])
                                                {
                                                    tile.frameY = 0;
                                                }
                                                else if (num25 >= 0 && Main.tileSolid[num25] && !Main.tileSolidTop[num25])
                                                {
                                                    tile.frameY = 54;
                                                }
                                                else if (num26 >= 0 && Main.tileSolid[num26] && !Main.tileSolidTop[num26])
                                                {
                                                    tile.frameY = 36;
                                                }
                                                else if (num24 >= 0 && Main.tileSolid[num24] && !Main.tileSolidTop[num24])
                                                {
                                                    tile.frameY = 18;
                                                }
                                                else
                                                {
                                                    KillTile(i, j);
                                                }
                                                break;
                                            }
                                        default:
                                            if (num != 461)
                                            {
                                                switch (num)
                                                {
                                                    case 178:
                                                        {
                                                            ITile tile8 = this[i, j - 1];
                                                            ITile tile9 = this[i, j + 1];
                                                            ITile tile2 = this[i - 1, j];
                                                            ITile tile3 = this[i + 1, j];
                                                            int num10 = -1;
                                                            int num11 = -1;
                                                            int num12 = -1;
                                                            int num13 = -1;
                                                            if (tile8 != null && tile8.nactive() && !tile8.bottomSlope())
                                                            {
                                                                num11 = tile8.type;
                                                            }
                                                            if (tile9 != null && tile9.nactive() && !tile9.halfBrick() && !tile9.topSlope())
                                                            {
                                                                num10 = tile9.type;
                                                            }
                                                            if (tile2 != null && tile2.nactive() && !tile2.halfBrick() && !tile2.rightSlope())
                                                            {
                                                                num12 = tile2.type;
                                                            }
                                                            if (tile3 != null && tile3.nactive() && !tile3.halfBrick() && !tile3.leftSlope())
                                                            {
                                                                num13 = tile3.type;
                                                            }
                                                            if (num12 == 10)
                                                            {
                                                                num12 = -1;
                                                            }
                                                            if (num13 == 10)
                                                            {
                                                                num13 = -1;
                                                            }
                                                            short num14 = (short)(WorldGen.genRand.Next(3) * 18);
                                                            if (num10 >= 0 && Main.tileSolid[num10] && !Main.tileSolidTop[num10])
                                                            {
                                                                if (tile.frameY < 0 || tile.frameY > 36)
                                                                {
                                                                    tile.frameY = num14;
                                                                }
                                                            }
                                                            else if (num12 >= 0 && Main.tileSolid[num12] && !Main.tileSolidTop[num12])
                                                            {
                                                                if (tile.frameY < 108 || tile.frameY > 54)
                                                                {
                                                                    tile.frameY = (short)(108 + num14);
                                                                }
                                                            }
                                                            else if (num13 >= 0 && Main.tileSolid[num13] && !Main.tileSolidTop[num13])
                                                            {
                                                                if (tile.frameY < 162 || tile.frameY > 198)
                                                                {
                                                                    tile.frameY = (short)(162 + num14);
                                                                }
                                                            }
                                                            else if (num11 >= 0 && Main.tileSolid[num11] && !Main.tileSolidTop[num11])
                                                            {
                                                                if (tile.frameY < 54 || tile.frameY > 90)
                                                                {
                                                                    tile.frameY = (short)(54 + num14);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                KillTile(i, j);
                                                            }
                                                            break;
                                                        }
                                                    case 184:
                                                        {
                                                            ITile tile8 = this[i, j - 1];
                                                            ITile tile9 = this[i, j + 1];
                                                            ITile tile2 = this[i - 1, j];
                                                            ITile tile3 = this[i + 1, j];
                                                            int num15 = -1;
                                                            int num16 = -1;
                                                            int num17 = -1;
                                                            int num18 = -1;
                                                            if (tile8 != null && tile8.active() && !tile8.bottomSlope())
                                                            {
                                                                num16 = tile8.type;
                                                            }
                                                            if (tile9 != null && tile9.active() && !tile9.halfBrick() && !tile9.topSlope())
                                                            {
                                                                num15 = tile9.type;
                                                            }
                                                            if (tile2 != null && tile2.active())
                                                            {
                                                                num17 = tile2.type;
                                                            }
                                                            if (tile3 != null && tile3.active())
                                                            {
                                                                num18 = tile3.type;
                                                            }
                                                            short num19 = (short)(WorldGen.genRand.Next(3) * 18);
                                                            if (num15 >= 0 && WorldGen.GetTileMossColor(num15) != -1)
                                                            {
                                                                tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num15));
                                                                if (tile.frameY < 0 || tile.frameY > 36)
                                                                {
                                                                    tile.frameY = num19;
                                                                }
                                                            }
                                                            else if (num16 >= 0 && WorldGen.GetTileMossColor(num16) != -1)
                                                            {
                                                                tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num16));
                                                                if (tile.frameY < 54 || tile.frameY > 90)
                                                                {
                                                                    tile.frameY = (short)(54 + num19);
                                                                }
                                                            }
                                                            else if (num17 >= 0 && WorldGen.GetTileMossColor(num17) != -1)
                                                            {
                                                                tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num17));
                                                                if (tile.frameY < 108 || tile.frameY > 54)
                                                                {
                                                                    tile.frameY = (short)(108 + num19);
                                                                }
                                                            }
                                                            else if (num18 >= 0 && WorldGen.GetTileMossColor(num18) != -1)
                                                            {
                                                                tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num18));
                                                                if (tile.frameY < 162 || tile.frameY > 198)
                                                                {
                                                                    tile.frameY = (short)(162 + num19);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                KillTile(i, j);
                                                            }
                                                            break;
                                                        }
                                                    case 529:
                                                        if (!SolidTileAllowBottomSlope(i, j + 1))
                                                        {
                                                            KillTile(i, j);
                                                        }
                                                        else
                                                        {
                                                            _ = this[i, j].frameY / 34;
                                                            if (!TileID.Sets.Conversion.Sand[this[i, j + 1].type])
                                                            {
                                                                KillTile(i, j);
                                                            }
                                                        }
                                                        break;
                                                    case 3:
                                                    case 24:
                                                    case 61:
                                                    case 71:
                                                    case 73:
                                                    case 74:
                                                    case 110:
                                                    case 113:
                                                    case 201:
                                                        PlantCheck(i, j);
                                                        break;
                                                    case 227:
                                                        CheckDye(i, j);
                                                        break;
                                                    case 579:
                                                        CheckRockGolemHead(i, j);
                                                        break;
                                                    case 12:
                                                    case 31:
                                                        CheckOrb(i, j, num);
                                                        break;
                                                    case 165:
                                                        CheckTight(i, j);
                                                        break;
                                                    case 324:
                                                        if (!SolidTileAllowBottomSlope(i, j + 1))
                                                        {
                                                            KillTile(i, j);
                                                        }
                                                        break;
                                                    case 235:
                                                        Check3x1(i, j, num);
                                                        break;
                                                    case 185:
                                                        CheckPile(i, j);
                                                        break;
                                                    default:
                                                        if (num != 296 && num != 297 && num != 309 && num != 358 && num != 359 && num != 413 && num != 414 && num != 542 && num != 550 && num != 551 && num != 553 && num != 554 && num != 558 && num != 559 && num != 599 && num != 600 && num != 601 && num != 602 && num != 603 && num != 604 && num != 605 && num != 606 && num != 607 && num != 608 && num != 609 && num != 610 && num != 611 && num != 612)
                                                        {
                                                            if (num == 10)
                                                            {
                                                                CheckDoorClosed(i, j, tile, num);
                                                            }
                                                            else if (num == 11)
                                                            {
                                                                CheckDoorOpen(i, j, tile);
                                                            }
                                                            else if (num == 314)
                                                            {
                                                                FrameTrack(i, j, pound: false);
                                                            }
                                                            else if (num == 380)
                                                            {
                                                                ITile tile2 = this[i - 1, j];
                                                                if (tile2 != null)
                                                                {
                                                                    ITile tile3 = this[i + 1, j];
                                                                    if (tile3 != null)
                                                                    {
                                                                        ITile tile4 = this[i - 1, j + 1];
                                                                        if (tile4 != null)
                                                                        {
                                                                            ITile tile5 = this[i + 1, j + 1];
                                                                            if (tile5 != null)
                                                                            {
                                                                                ITile tile6 = this[i - 1, j - 1];
                                                                                if (tile6 != null)
                                                                                {
                                                                                    ITile tile7 = this[i + 1, j - 1];
                                                                                    if (tile7 != null)
                                                                                    {
                                                                                        int num2 = -1;
                                                                                        int num3 = -1;
                                                                                        if (tile2 != null && tile2.active())
                                                                                        {
                                                                                            num3 = (Main.tileStone[tile2.type] ? 1 : tile2.type);
                                                                                        }
                                                                                        if (tile3 != null && tile3.active())
                                                                                        {
                                                                                            num2 = (Main.tileStone[tile3.type] ? 1 : tile3.type);
                                                                                        }
                                                                                        if (num2 >= 0 && !Main.tileSolid[num2])
                                                                                        {
                                                                                            num2 = -1;
                                                                                        }
                                                                                        if (num3 >= 0 && !Main.tileSolid[num3])
                                                                                        {
                                                                                            num3 = -1;
                                                                                        }
                                                                                        if (num3 == num && num2 == num)
                                                                                        {
                                                                                            rectangle.X = 18;
                                                                                        }
                                                                                        else if (num3 == num && num2 != num)
                                                                                        {
                                                                                            rectangle.X = 36;
                                                                                        }
                                                                                        else if (num3 != num && num2 == num)
                                                                                        {
                                                                                            rectangle.X = 0;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            rectangle.X = 54;
                                                                                        }
                                                                                        tile.frameX = (short)rectangle.X;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else if (num >= 0 && TileID.Sets.Platforms[num])
                                                            {
                                                                ITile tile2 = this[i - 1, j];
                                                                if (tile2 != null)
                                                                {
                                                                    ITile tile3 = this[i + 1, j];
                                                                    if (tile3 != null)
                                                                    {
                                                                        ITile tile4 = this[i - 1, j + 1];
                                                                        if (tile4 != null)
                                                                        {
                                                                            ITile tile5 = this[i + 1, j + 1];
                                                                            if (tile5 != null)
                                                                            {
                                                                                ITile tile6 = this[i - 1, j - 1];
                                                                                if (tile6 != null)
                                                                                {
                                                                                    ITile tile7 = this[i + 1, j - 1];
                                                                                    if (tile7 != null)
                                                                                    {
                                                                                        int num4 = -1;
                                                                                        int num5 = -1;
                                                                                        if (tile2 != null && tile2.active())
                                                                                        {
                                                                                            num5 = (Main.tileStone[tile2.type] ? 1 : ((!TileID.Sets.Platforms[tile2.type]) ? tile2.type : num));
                                                                                        }
                                                                                        if (tile3 != null && tile3.active())
                                                                                        {
                                                                                            num4 = (Main.tileStone[tile3.type] ? 1 : ((!TileID.Sets.Platforms[tile3.type]) ? tile3.type : num));
                                                                                        }
                                                                                        if (num4 >= 0 && !Main.tileSolid[num4])
                                                                                        {
                                                                                            num4 = -1;
                                                                                        }
                                                                                        if (num5 >= 0 && !Main.tileSolid[num5])
                                                                                        {
                                                                                            num5 = -1;
                                                                                        }
                                                                                        if (num5 == num && tile2.halfBrick() != tile.halfBrick())
                                                                                        {
                                                                                            num5 = -1;
                                                                                        }
                                                                                        if (num4 == num && tile3.halfBrick() != tile.halfBrick())
                                                                                        {
                                                                                            num4 = -1;
                                                                                        }
                                                                                        if (num5 != -1 && num5 != num && tile.halfBrick())
                                                                                        {
                                                                                            num5 = -1;
                                                                                        }
                                                                                        if (num4 != -1 && num4 != num && tile.halfBrick())
                                                                                        {
                                                                                            num4 = -1;
                                                                                        }
                                                                                        if (num5 == -1 && tile6.active() && tile6.type == num && tile6.slope() == 1)
                                                                                        {
                                                                                            num5 = num;
                                                                                        }
                                                                                        if (num4 == -1 && tile7.active() && tile7.type == num && tile7.slope() == 2)
                                                                                        {
                                                                                            num4 = num;
                                                                                        }
                                                                                        if (num5 == num && tile2.slope() == 2 && num4 != num)
                                                                                        {
                                                                                            num4 = -1;
                                                                                        }
                                                                                        if (num4 == num && tile3.slope() == 1 && num5 != num)
                                                                                        {
                                                                                            num5 = -1;
                                                                                        }
                                                                                        if (tile.slope() == 1)
                                                                                        {
                                                                                            if (TileID.Sets.Platforms[tile3.type] && tile3.slope() == 0 && !tile3.halfBrick())
                                                                                            {
                                                                                                rectangle.X = 468;
                                                                                            }
                                                                                            else if (!tile5.active() && (!TileID.Sets.Platforms[tile5.type] || tile5.slope() == 2))
                                                                                            {
                                                                                                if (!tile2.active() && (!TileID.Sets.Platforms[tile6.type] || tile6.slope() != 1))
                                                                                                {
                                                                                                    rectangle.X = 432;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    rectangle.X = 360;
                                                                                                }
                                                                                            }
                                                                                            else if (!tile2.active() && (!TileID.Sets.Platforms[tile6.type] || tile6.slope() != 1))
                                                                                            {
                                                                                                rectangle.X = 396;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                rectangle.X = 180;
                                                                                            }
                                                                                        }
                                                                                        else if (tile.slope() == 2)
                                                                                        {
                                                                                            if (TileID.Sets.Platforms[tile2.type] && tile2.slope() == 0 && !tile2.halfBrick())
                                                                                            {
                                                                                                rectangle.X = 450;
                                                                                            }
                                                                                            else if (!tile4.active() && (!TileID.Sets.Platforms[tile4.type] || tile4.slope() == 1))
                                                                                            {
                                                                                                if (!tile3.active() && (!TileID.Sets.Platforms[tile7.type] || tile7.slope() != 2))
                                                                                                {
                                                                                                    rectangle.X = 414;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    rectangle.X = 342;
                                                                                                }
                                                                                            }
                                                                                            else if (!tile3.active() && (!TileID.Sets.Platforms[tile7.type] || tile7.slope() != 2))
                                                                                            {
                                                                                                rectangle.X = 378;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                rectangle.X = 144;
                                                                                            }
                                                                                        }
                                                                                        else if (num5 == num && num4 == num)
                                                                                        {
                                                                                            if (tile2.slope() == 2 && tile3.slope() == 1)
                                                                                            {
                                                                                                rectangle.X = 252;
                                                                                            }
                                                                                            else if (tile2.slope() == 2)
                                                                                            {
                                                                                                rectangle.X = 216;
                                                                                            }
                                                                                            else if (tile3.slope() == 1)
                                                                                            {
                                                                                                rectangle.X = 234;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                rectangle.X = 0;
                                                                                            }
                                                                                        }
                                                                                        else if (num5 == num && num4 == -1)
                                                                                        {
                                                                                            if (tile2.slope() == 2)
                                                                                            {
                                                                                                rectangle.X = 270;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                rectangle.X = 18;
                                                                                            }
                                                                                        }
                                                                                        else if (num5 == -1 && num4 == num)
                                                                                        {
                                                                                            if (tile3.slope() == 1)
                                                                                            {
                                                                                                rectangle.X = 288;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                rectangle.X = 36;
                                                                                            }
                                                                                        }
                                                                                        else if (num5 != num && num4 == num)
                                                                                        {
                                                                                            rectangle.X = 54;
                                                                                        }
                                                                                        else if (num5 == num && num4 != num)
                                                                                        {
                                                                                            rectangle.X = 72;
                                                                                        }
                                                                                        else if (num5 != num && num5 != -1 && num4 == -1)
                                                                                        {
                                                                                            rectangle.X = 108;
                                                                                        }
                                                                                        else if (num5 == -1 && num4 != num && num4 != -1)
                                                                                        {
                                                                                            rectangle.X = 126;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            rectangle.X = 90;
                                                                                        }
                                                                                        tile.frameX = (short)rectangle.X;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                switch (num)
                                                                {
                                                                    case 233:
                                                                    case 236:
                                                                    case 238:
                                                                        CheckJunglePlant(i, j, num);
                                                                        break;
                                                                    case 530:
                                                                        CheckOasisPlant(i, j);
                                                                        break;
                                                                    case 240:
                                                                    case 440:
                                                                        Check3x3Wall(i, j);
                                                                        break;
                                                                    case 245:
                                                                        Check2x3Wall(i, j);
                                                                        break;
                                                                    case 246:
                                                                        Check3x2Wall(i, j);
                                                                        break;
                                                                    case 241:
                                                                        Check4x3Wall(i, j);
                                                                        break;
                                                                    case 242:
                                                                        Check6x4Wall(i, j);
                                                                        break;
                                                                    case 464:
                                                                    case 466:
                                                                        Check5x4(i, j, num);
                                                                        break;
                                                                    case 334:
                                                                        CheckWeaponsRack(i, j);
                                                                        break;
                                                                    case 471:
                                                                        Framing_CheckTile(i, j);
                                                                        break;
                                                                    case 34:
                                                                    case 454:
                                                                        CheckChand(i, j, num);
                                                                        break;
                                                                    case 547:
                                                                        Check2x5(i, j, num);
                                                                        break;
                                                                    case 548:
                                                                    case 614:
                                                                        Check3x6(i, j, num);
                                                                        break;
                                                                    case 613:
                                                                        Check3x5(i, j, num);
                                                                        break;
                                                                    default:
                                                                        if (num != 354 && num != 406 && num != 412 && num != 355 && num != 452 && num != 455 && num != 491 && num != 499)
                                                                        {
                                                                            switch (num)
                                                                            {
                                                                                case 15:
                                                                                case 20:
                                                                                case 216:
                                                                                case 338:
                                                                                case 390:
                                                                                case 493:
                                                                                case 497:
                                                                                case 590:
                                                                                case 595:
                                                                                case 615:
                                                                                    Check1x2(i, j, (ushort)num);
                                                                                    return;
                                                                                default:
                                                                                    if (num < 391 || num > 394)
                                                                                    {
                                                                                        switch (num)
                                                                                        {
                                                                                            case 405:
                                                                                            case 486:
                                                                                            case 488:
                                                                                            case 532:
                                                                                            case 533:
                                                                                            case 544:
                                                                                            case 552:
                                                                                            case 555:
                                                                                            case 556:
                                                                                            case 582:
                                                                                            case 619:
                                                                                                break;
                                                                                            case 36:
                                                                                            case 135:
                                                                                            case 141:
                                                                                            case 144:
                                                                                            case 210:
                                                                                            case 239:
                                                                                            case 428:
                                                                                            case 593:
                                                                                                Check1x1(i, j, num);
                                                                                                return;
                                                                                            case 476:
                                                                                                CheckGolf1x1(i, j, num);
                                                                                                return;
                                                                                            case 494:
                                                                                                CheckGolf1x1(i, j, num);
                                                                                                return;
                                                                                            case 419:
                                                                                            case 420:
                                                                                            case 423:
                                                                                            case 424:
                                                                                            case 429:
                                                                                            case 445:
                                                                                                CheckLogicTiles(i, j, num);
                                                                                                return;
                                                                                            case 16:
                                                                                            case 18:
                                                                                            case 29:
                                                                                            case 103:
                                                                                            case 134:
                                                                                            case 462:
                                                                                                Check2x1(i, j, (ushort)num);
                                                                                                return;
                                                                                            case 13:
                                                                                            case 33:
                                                                                            case 49:
                                                                                            case 50:
                                                                                            case 78:
                                                                                            case 174:
                                                                                            case 372:
                                                                                                CheckOnTable1x1(i, j, num);
                                                                                                return;
                                                                                            default:
                                                                                                if (TileID.Sets.BasicChest[num])
                                                                                                {
                                                                                                    CheckChest(i, j, num);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    switch (num)
                                                                                                    {
                                                                                                        case 128:
                                                                                                            CheckMan(i, j);
                                                                                                            break;
                                                                                                        case 269:
                                                                                                            CheckWoman(i, j);
                                                                                                            break;
                                                                                                        case 470:
                                                                                                            Framing_CheckTile(i, j);
                                                                                                            break;
                                                                                                        case 475:
                                                                                                            Framing_CheckTile(i, j);
                                                                                                            break;
                                                                                                        case 597:
                                                                                                            Framing_CheckTile(i, j);
                                                                                                            break;
                                                                                                        case 27:
                                                                                                            CheckSunflower(i, j);
                                                                                                            break;
                                                                                                        case 28:
                                                                                                            CheckPot(i, j);
                                                                                                            break;
                                                                                                        case 171:
                                                                                                            CheckXmasTree(i, j);
                                                                                                            break;
                                                                                                        default:
                                                                                                            if (!TileID.Sets.BasicChestFake[num] && num != 457)
                                                                                                            {
                                                                                                                switch (num)
                                                                                                                {
                                                                                                                    case 335:
                                                                                                                    case 411:
                                                                                                                    case 490:
                                                                                                                    case 564:
                                                                                                                    case 565:
                                                                                                                    case 594:
                                                                                                                        Check2x2(i, j, num);
                                                                                                                        return;
                                                                                                                    default:
                                                                                                                        if (num < 316 || num > 318)
                                                                                                                        {
                                                                                                                            switch (num)
                                                                                                                            {
                                                                                                                                case 172:
                                                                                                                                case 360:
                                                                                                                                case 505:
                                                                                                                                case 521:
                                                                                                                                case 522:
                                                                                                                                case 523:
                                                                                                                                case 524:
                                                                                                                                case 525:
                                                                                                                                case 526:
                                                                                                                                case 527:
                                                                                                                                case 543:
                                                                                                                                case 568:
                                                                                                                                case 569:
                                                                                                                                case 570:
                                                                                                                                case 580:
                                                                                                                                case 598:
                                                                                                                                case 620:
                                                                                                                                    break;
                                                                                                                                case 376:
                                                                                                                                case 443:
                                                                                                                                case 444:
                                                                                                                                case 485:
                                                                                                                                    CheckSuper(i, j, num);
                                                                                                                                    return;
                                                                                                                                case 91:
                                                                                                                                    CheckBanner(i, j, (byte)num);
                                                                                                                                    return;
                                                                                                                                case 35:
                                                                                                                                case 139:
                                                                                                                                    CheckMB(i, j, (byte)num);
                                                                                                                                    return;
                                                                                                                                case 386:
                                                                                                                                case 387:
                                                                                                                                    CheckTrapDoor(i, j, num);
                                                                                                                                    return;
                                                                                                                                case 388:
                                                                                                                                case 389:
                                                                                                                                    CheckTallGate(i, j, num);
                                                                                                                                    return;
                                                                                                                                case 92:
                                                                                                                                case 93:
                                                                                                                                case 453:
                                                                                                                                    Check1xX(i, j, (short)num);
                                                                                                                                    return;
                                                                                                                                case 104:
                                                                                                                                case 105:
                                                                                                                                case 207:
                                                                                                                                case 320:
                                                                                                                                case 337:
                                                                                                                                case 349:
                                                                                                                                case 356:
                                                                                                                                case 378:
                                                                                                                                case 410:
                                                                                                                                case 456:
                                                                                                                                case 465:
                                                                                                                                case 480:
                                                                                                                                case 489:
                                                                                                                                case 506:
                                                                                                                                case 509:
                                                                                                                                case 531:
                                                                                                                                case 545:
                                                                                                                                case 560:
                                                                                                                                case 591:
                                                                                                                                case 592:
                                                                                                                                    Check2xX(i, j, (ushort)num);
                                                                                                                                    return;
                                                                                                                                case 101:
                                                                                                                                case 102:
                                                                                                                                case 463:
                                                                                                                                case 617:
                                                                                                                                    Check3x4(i, j, num);
                                                                                                                                    return;
                                                                                                                                case 42:
                                                                                                                                case 270:
                                                                                                                                case 271:
                                                                                                                                case 572:
                                                                                                                                case 581:
                                                                                                                                    Check1x2Top(i, j, (ushort)num);
                                                                                                                                    return;
                                                                                                                                case 55:
                                                                                                                                case 85:
                                                                                                                                case 395:
                                                                                                                                case 425:
                                                                                                                                case 510:
                                                                                                                                case 511:
                                                                                                                                case 573:
                                                                                                                                    CheckSign(i, j, (ushort)num);
                                                                                                                                    return;
                                                                                                                                case 520:
                                                                                                                                    CheckFoodPlatter(i, j, (ushort)num);
                                                                                                                                    return;
                                                                                                                                case 209:
                                                                                                                                    CheckCannon(i, j, num);
                                                                                                                                    return;
                                                                                                                                case 79:
                                                                                                                                case 90:
                                                                                                                                case 487:
                                                                                                                                    Check4x2(i, j, num);
                                                                                                                                    return;
                                                                                                                                case 94:
                                                                                                                                case 95:
                                                                                                                                case 97:
                                                                                                                                case 98:
                                                                                                                                case 99:
                                                                                                                                case 100:
                                                                                                                                case 125:
                                                                                                                                case 126:
                                                                                                                                case 173:
                                                                                                                                case 282:
                                                                                                                                case 287:
                                                                                                                                case 319:
                                                                                                                                case 621:
                                                                                                                                case 622:
                                                                                                                                    Check2x2(i, j, num);
                                                                                                                                    return;
                                                                                                                                case 96:
                                                                                                                                    Check2x2Style(i, j, num);
                                                                                                                                    return;
                                                                                                                                case 81:
                                                                                                                                    {
                                                                                                                                        ITile tile8 = this[i, j - 1];
                                                                                                                                        ITile tile9 = this[i, j + 1];
                                                                                                                                        ITile tile2 = this[i - 1, j];
                                                                                                                                        ITile tile3 = this[i + 1, j];
                                                                                                                                        int num8 = -1;
                                                                                                                                        int num9 = -1;
                                                                                                                                        if (tile8 != null && tile8.active())
                                                                                                                                        {
                                                                                                                                            num9 = tile8.type;
                                                                                                                                        }
                                                                                                                                        if (tile9 != null && tile9.active())
                                                                                                                                        {
                                                                                                                                            num8 = tile9.type;
                                                                                                                                        }
                                                                                                                                        if (num9 != -1)
                                                                                                                                        {
                                                                                                                                            KillTile(i, j);
                                                                                                                                        }
                                                                                                                                        else if (num8 < 0 || !Main.tileSolid[num8] || tile9.halfBrick() || tile9.topSlope())
                                                                                                                                        {
                                                                                                                                            KillTile(i, j);
                                                                                                                                        }
                                                                                                                                        return;
                                                                                                                                    }
                                                                                                                                default:
                                                                                                                                    if (Main.tileAlch[num])
                                                                                                                                    {
                                                                                                                                        CheckAlch(i, j);
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        WorldGen.CheckTreeSettings settings;
                                                                                                                                        switch (num)
                                                                                                                                        {
                                                                                                                                            case 72:
                                                                                                                                                {
                                                                                                                                                    ITile tile8 = this[i, j - 1];
                                                                                                                                                    ITile tile9 = this[i, j + 1];
                                                                                                                                                    int num6 = -1;
                                                                                                                                                    int num7 = -1;
                                                                                                                                                    if (tile8 != null && tile8.active())
                                                                                                                                                    {
                                                                                                                                                        num7 = tile8.type;
                                                                                                                                                    }
                                                                                                                                                    if (tile9 != null && tile9.active())
                                                                                                                                                    {
                                                                                                                                                        num6 = tile9.type;
                                                                                                                                                    }
                                                                                                                                                    if (num6 != num && num6 != 70)
                                                                                                                                                    {
                                                                                                                                                        KillTile(i, j);
                                                                                                                                                    }
                                                                                                                                                    else if (num7 != num && tile.frameX == 0)
                                                                                                                                                    {
                                                                                                                                                        tile.frameNumber((byte)WorldGen.genRand.Next(3));
                                                                                                                                                        if (tile.frameNumber() == 0)
                                                                                                                                                        {
                                                                                                                                                            tile.frameX = 18;
                                                                                                                                                            tile.frameY = 0;
                                                                                                                                                        }
                                                                                                                                                        if (tile.frameNumber() == 1)
                                                                                                                                                        {
                                                                                                                                                            tile.frameX = 18;
                                                                                                                                                            tile.frameY = 18;
                                                                                                                                                        }
                                                                                                                                                        if (tile.frameNumber() == 2)
                                                                                                                                                        {
                                                                                                                                                            tile.frameX = 18;
                                                                                                                                                            tile.frameY = 36;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    break;
                                                                                                                                                }
                                                                                                                                            case 5:
                                                                                                                                                CheckTree(i, j);
                                                                                                                                                break;
                                                                                                                                            case 583:
                                                                                                                                            case 584:
                                                                                                                                            case 585:
                                                                                                                                            case 586:
                                                                                                                                            case 587:
                                                                                                                                            case 588:
                                                                                                                                            case 589:
                                                                                                                                                settings = new WorldGen.CheckTreeSettings
                                                                                                                                                {
                                                                                                                                                    IsGroundValid = WorldGen.GemTreeGroundTest
                                                                                                                                                };
                                                                                                                                                CheckTreeWithSettings(i, j, settings);
                                                                                                                                                break;
                                                                                                                                            case 596:
                                                                                                                                                settings = new WorldGen.CheckTreeSettings
                                                                                                                                                {
                                                                                                                                                    IsGroundValid = WorldGen.VanityTreeGroundTest
                                                                                                                                                };
                                                                                                                                                CheckTreeWithSettings(i, j, settings);
                                                                                                                                                break;
                                                                                                                                            case 616:
                                                                                                                                                settings = new WorldGen.CheckTreeSettings
                                                                                                                                                {
                                                                                                                                                    IsGroundValid = WorldGen.VanityTreeGroundTest
                                                                                                                                                };
                                                                                                                                                CheckTreeWithSettings(i, j, settings);
                                                                                                                                                break;
                                                                                                                                            case 323:
                                                                                                                                                CheckPalmTree(i, j);
                                                                                                                                                break;
                                                                                                                                            case 567:
                                                                                                                                                CheckGnome(i, j);
                                                                                                                                                break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    return;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 132:
                                                                                                                    case 138:
                                                                                                                    case 142:
                                                                                                                    case 143:
                                                                                                                    case 288:
                                                                                                                    case 289:
                                                                                                                    case 290:
                                                                                                                    case 291:
                                                                                                                    case 292:
                                                                                                                    case 293:
                                                                                                                    case 294:
                                                                                                                    case 295:
                                                                                                                    case 484:
                                                                                                                        break;
                                                                                                                }
                                                                                                                Check2x2(i, j, num);
                                                                                                                break;
                                                                                                            }
                                                                                                            goto case 254;
                                                                                                        case 254:
                                                                                                            Check2x2Style(i, j, num);
                                                                                                            break;
                                                                                                    }
                                                                                                }
                                                                                                return;
                                                                                        }
                                                                                    }
                                                                                    break;
                                                                                case 14:
                                                                                case 17:
                                                                                case 26:
                                                                                case 77:
                                                                                case 86:
                                                                                case 87:
                                                                                case 88:
                                                                                case 89:
                                                                                case 114:
                                                                                case 133:
                                                                                case 186:
                                                                                case 187:
                                                                                case 215:
                                                                                case 217:
                                                                                case 218:
                                                                                case 237:
                                                                                case 244:
                                                                                case 285:
                                                                                case 286:
                                                                                case 298:
                                                                                case 299:
                                                                                case 310:
                                                                                case 339:
                                                                                case 361:
                                                                                case 362:
                                                                                case 363:
                                                                                case 364:
                                                                                case 377:
                                                                                case 469:
                                                                                case 538:
                                                                                    break;
                                                                            }
                                                                            Check3x2(i, j, (ushort)num);
                                                                            break;
                                                                        }
                                                                        goto case 106;
                                                                    case 106:
                                                                    case 212:
                                                                    case 219:
                                                                    case 220:
                                                                    case 228:
                                                                    case 231:
                                                                    case 243:
                                                                    case 247:
                                                                    case 283:
                                                                    case 300:
                                                                    case 301:
                                                                    case 302:
                                                                    case 303:
                                                                    case 304:
                                                                    case 305:
                                                                    case 306:
                                                                    case 307:
                                                                    case 308:
                                                                        Check3x3(i, j, (ushort)num);
                                                                        break;
                                                                }
                                                            }
                                                            break;
                                                        }
                                                        goto case 275;
                                                    case 275:
                                                    case 276:
                                                    case 277:
                                                    case 278:
                                                    case 279:
                                                    case 280:
                                                    case 281:
                                                        Check6x3(i, j, num);
                                                        break;
                                                }
                                                break;
                                            }
                                            goto case 373;
                                        case 373:
                                        case 374:
                                        case 375:
                                            {
                                                ITile tile8 = this[i, j - 1];
                                                if (tile8 == null || !tile8.active() || tile8.bottomSlope() || !Main.tileSolid[tile8.type] || Main.tileSolidTop[tile8.type])
                                                {
                                                    KillTile(i, j);
                                                }
                                                break;
                                            }
                                    }
                                }
                                else
                                {
                                    if (num < 255 || num > 268)
                                    {
                                        switch (num)
                                        {
                                            case 385:
                                            case 446:
                                            case 447:
                                            case 448:
                                                break;
                                            default:
                                                {
                                                    ITile tile8 = this[i, j - 1];
                                                    ITile tile9 = this[i, j + 1];
                                                    ITile tile2 = this[i - 1, j];
                                                    ITile tile3 = this[i + 1, j];
                                                    ITile tile4 = this[i - 1, j + 1];
                                                    ITile tile5 = this[i + 1, j + 1];
                                                    ITile tile6 = this[i - 1, j - 1];
                                                    ITile tile7 = this[i + 1, j - 1];
                                                    int upLeft = -1;
                                                    int up = -1;
                                                    int upRight = -1;
                                                    int left = -1;
                                                    int right = -1;
                                                    int downLeft = -1;
                                                    int down = -1;
                                                    int downRight = -1;
                                                    if (tile2 != null && tile2.active())
                                                    {
                                                        left = (Main.tileStone[tile2.type] ? 1 : tile2.type);
                                                        if (tile2.slope() == 1 || tile2.slope() == 3)
                                                        {
                                                            left = -1;
                                                        }
                                                    }
                                                    if (tile3 != null && tile3.active())
                                                    {
                                                        right = (Main.tileStone[tile3.type] ? 1 : tile3.type);
                                                        if (tile3.slope() == 2 || tile3.slope() == 4)
                                                        {
                                                            right = -1;
                                                        }
                                                    }
                                                    if (tile8 != null && tile8.active())
                                                    {
                                                        up = (Main.tileStone[tile8.type] ? 1 : tile8.type);
                                                        if (tile8.slope() == 3 || tile8.slope() == 4)
                                                        {
                                                            up = -1;
                                                        }
                                                    }
                                                    if (tile9 != null && tile9.active())
                                                    {
                                                        down = (Main.tileStone[tile9.type] ? 1 : tile9.type);
                                                        if (tile9.slope() == 1 || tile9.slope() == 2)
                                                        {
                                                            down = -1;
                                                        }
                                                    }
                                                    if (tile6 != null && tile6.active())
                                                    {
                                                        upLeft = (Main.tileStone[tile6.type] ? 1 : tile6.type);
                                                    }
                                                    if (tile7 != null && tile7.active())
                                                    {
                                                        upRight = (Main.tileStone[tile7.type] ? 1 : tile7.type);
                                                    }
                                                    if (tile4 != null && tile4.active())
                                                    {
                                                        downLeft = (Main.tileStone[tile4.type] ? 1 : tile4.type);
                                                    }
                                                    if (tile5 != null && tile5.active())
                                                    {
                                                        downRight = (Main.tileStone[tile5.type] ? 1 : tile5.type);
                                                    }
                                                    if (tile.slope() == 2)
                                                    {
                                                        up = -1;
                                                        left = -1;
                                                    }
                                                    if (tile.slope() == 1)
                                                    {
                                                        up = -1;
                                                        right = -1;
                                                    }
                                                    if (tile.slope() == 4)
                                                    {
                                                        down = -1;
                                                        left = -1;
                                                    }
                                                    if (tile.slope() == 3)
                                                    {
                                                        down = -1;
                                                        right = -1;
                                                    }
                                                    switch (num)
                                                    {
                                                        case 147:
                                                            TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Ices, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            break;
                                                        case 161:
                                                        case 163:
                                                        case 164:
                                                        case 200:
                                                            TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Snow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            break;
                                                        case 162:
                                                            TileMergeAttempt(num, Main.tileBrick, TileID.Sets.IcesSnow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            break;
                                                        default:
                                                            if (Main.tileBrick[num])
                                                            {
                                                                if (num == 60 || num == 70)
                                                                {
                                                                    TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                }
                                                                else
                                                                {
                                                                    TileMergeAttempt(num, Main.tileBrick, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                }
                                                            }
                                                            else if (Main.tilePile[num])
                                                            {
                                                                TileMergeAttempt(num, Main.tilePile, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            }
                                                            break;
                                                    }
                                                    if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && down == 165)
                                                    {
                                                        if (tile9.frameY == 72)
                                                        {
                                                            down = num;
                                                        }
                                                        else if (tile9.frameY == 0)
                                                        {
                                                            down = num;
                                                        }
                                                    }
                                                    if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && up == 165)
                                                    {
                                                        if (tile8.frameY == 90)
                                                        {
                                                            up = num;
                                                        }
                                                        else if (tile8.frameY == 54)
                                                        {
                                                            up = num;
                                                        }
                                                    }
                                                    if (num == 225)
                                                    {
                                                        if (down == 165)
                                                        {
                                                            down = num;
                                                        }
                                                        if (up == 165)
                                                        {
                                                            up = num;
                                                        }
                                                    }
                                                    if ((num == 200 || num == 161 || num == 147 || num == 163 || num == 164) && down == 165)
                                                    {
                                                        down = num;
                                                    }
                                                    if ((tile.slope() == 1 || tile.slope() == 2) && down > -1 && !TileID.Sets.Platforms[down])
                                                    {
                                                        down = num;
                                                    }
                                                    if (up > -1 && (tile8.slope() == 1 || tile8.slope() == 2) && !TileID.Sets.Platforms[up])
                                                    {
                                                        up = num;
                                                    }
                                                    if ((tile.slope() == 3 || tile.slope() == 4) && up > -1 && !TileID.Sets.Platforms[up])
                                                    {
                                                        up = num;
                                                    }
                                                    if (down > -1 && (tile9.slope() == 3 || tile9.slope() == 4) && !TileID.Sets.Platforms[down])
                                                    {
                                                        down = num;
                                                    }
                                                    if (num == 124)
                                                    {
                                                        if (up > -1 && Main.tileSolid[up] && !TileID.Sets.Platforms[up])
                                                        {
                                                            up = num;
                                                        }
                                                        if (down > -1 && Main.tileSolid[down] && !TileID.Sets.Platforms[down])
                                                        {
                                                            down = num;
                                                        }
                                                    }
                                                    if (up > -1 && tile8.halfBrick() && !TileID.Sets.Platforms[up])
                                                    {
                                                        up = num;
                                                    }
                                                    if (left > -1 && tile2.halfBrick())
                                                    {
                                                        if (tile.halfBrick())
                                                        {
                                                            left = num;
                                                        }
                                                        else if (tile2.type != num)
                                                        {
                                                            left = -1;
                                                        }
                                                    }
                                                    if (right > -1 && tile3.halfBrick())
                                                    {
                                                        if (tile.halfBrick())
                                                        {
                                                            right = num;
                                                        }
                                                        else if (tile3.type != num)
                                                        {
                                                            right = -1;
                                                        }
                                                    }
                                                    if (tile.halfBrick())
                                                    {
                                                        if (left != num)
                                                        {
                                                            left = -1;
                                                        }
                                                        if (right != num)
                                                        {
                                                            right = -1;
                                                        }
                                                        up = -1;
                                                    }
                                                    if (tile9 != null && tile9.halfBrick())
                                                    {
                                                        down = -1;
                                                    }
                                                    if (!Main.tileSolid[num])
                                                    {
                                                        switch (num)
                                                        {
                                                            case 49:
                                                                CheckOnTable1x1(i, j, (byte)num);
                                                                return;
                                                            case 80:
                                                                CactusFrame(i, j);
                                                                return;
                                                        }
                                                    }
                                                    mergeUp = false;
                                                    mergeDown = false;
                                                    mergeLeft = false;
                                                    mergeRight = false;
                                                    int num27 = 0;
                                                    if (resetFrame)
                                                    {
                                                        num27 = WorldGen.genRand.Next(0, 3);
                                                        tile.frameNumber((byte)num27);
                                                    }
                                                    else
                                                    {
                                                        num27 = tile.frameNumber();
                                                    }
                                                    if (Main.tileLargeFrames[num] == 1)
                                                    {
                                                        int num28 = j % 4;
                                                        int num29 = i % 3;
                                                        num27 = (new int[4, 3]
                                                        {
                                                {
                                                    2,
                                                    4,
                                                    2
                                                },
                                                {
                                                    1,
                                                    3,
                                                    1
                                                },
                                                {
                                                    2,
                                                    2,
                                                    4
                                                },
                                                {
                                                    1,
                                                    1,
                                                    3
                                                }
                                                        })[num28, num29] - 1;
                                                    }
                                                    if (Main.tileLargeFrames[num] == 2)
                                                    {
                                                        int num30 = i % 2;
                                                        int num31 = j % 2;
                                                        num27 = num30 + num31 * 2;
                                                    }
                                                    TileMergeAttempt(num, Main.tileBlendAll, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                    if (Main.tileBlendAll[num])
                                                    {
                                                        Main.tileSolid[10] = false;
                                                        Main.tileSolid[387] = false;
                                                        TileMergeAttempt(num, Main.tileSolid, Main.tileSolidTop, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                        Main.tileSolid[10] = true;
                                                        Main.tileSolid[387] = true;
                                                    }
                                                    if (TileID.Sets.ForcedDirtMerging[num])
                                                    {
                                                        if (up == 0)
                                                        {
                                                            up = num;
                                                        }
                                                        if (down == 0)
                                                        {
                                                            down = num;
                                                        }
                                                        if (left == 0)
                                                        {
                                                            left = num;
                                                        }
                                                        if (right == 0)
                                                        {
                                                            right = num;
                                                        }
                                                        if (upLeft == 0)
                                                        {
                                                            upLeft = num;
                                                        }
                                                        if (upRight == 0)
                                                        {
                                                            upRight = num;
                                                        }
                                                        if (downLeft == 0)
                                                        {
                                                            downLeft = num;
                                                        }
                                                        if (downRight == 0)
                                                        {
                                                            downRight = num;
                                                        }
                                                    }
                                                    switch (num)
                                                    {
                                                        case 0:
                                                            {
                                                                if (up > -1 && Main.tileMergeDirt[up])
                                                                {
                                                                    TileFrame(i, j - 1);
                                                                    if (mergeDown)
                                                                    {
                                                                        up = num;
                                                                    }
                                                                }
                                                                else if (up == 147)
                                                                {
                                                                    TileFrame(i, j - 1);
                                                                    if (mergeDown)
                                                                    {
                                                                        up = num;
                                                                    }
                                                                }
                                                                if (down > -1 && Main.tileMergeDirt[down])
                                                                {
                                                                    TileFrame(i, j + 1);
                                                                    if (mergeUp)
                                                                    {
                                                                        down = num;
                                                                    }
                                                                }
                                                                else if (down == 147)
                                                                {
                                                                    TileFrame(i, j + 1);
                                                                    if (mergeUp)
                                                                    {
                                                                        down = num;
                                                                    }
                                                                }
                                                                if (left > -1 && Main.tileMergeDirt[left])
                                                                {
                                                                    TileFrame(i - 1, j);
                                                                    if (mergeRight)
                                                                    {
                                                                        left = num;
                                                                    }
                                                                }
                                                                else if (left == 147)
                                                                {
                                                                    TileFrame(i - 1, j);
                                                                    if (mergeRight)
                                                                    {
                                                                        left = num;
                                                                    }
                                                                }
                                                                if (right > -1 && Main.tileMergeDirt[right])
                                                                {
                                                                    TileFrame(i + 1, j);
                                                                    if (mergeLeft)
                                                                    {
                                                                        right = num;
                                                                    }
                                                                }
                                                                else if (right == 147)
                                                                {
                                                                    TileFrame(i + 1, j);
                                                                    if (mergeLeft)
                                                                    {
                                                                        right = num;
                                                                    }
                                                                }
                                                                bool[] mergesWithDirtInASpecialWay = TileID.Sets.Conversion.MergesWithDirtInASpecialWay;
                                                                if (up > -1 && mergesWithDirtInASpecialWay[up])
                                                                {
                                                                    up = num;
                                                                }
                                                                if (down > -1 && mergesWithDirtInASpecialWay[down])
                                                                {
                                                                    down = num;
                                                                }
                                                                if (left > -1 && mergesWithDirtInASpecialWay[left])
                                                                {
                                                                    left = num;
                                                                }
                                                                if (right > -1 && mergesWithDirtInASpecialWay[right])
                                                                {
                                                                    right = num;
                                                                }
                                                                if (upLeft > -1 && Main.tileMergeDirt[upLeft])
                                                                {
                                                                    upLeft = num;
                                                                }
                                                                else if (upLeft > -1 && mergesWithDirtInASpecialWay[upLeft])
                                                                {
                                                                    upLeft = num;
                                                                }
                                                                if (upRight > -1 && Main.tileMergeDirt[upRight])
                                                                {
                                                                    upRight = num;
                                                                }
                                                                else if (upRight > -1 && mergesWithDirtInASpecialWay[upRight])
                                                                {
                                                                    upRight = num;
                                                                }
                                                                if (downLeft > -1 && Main.tileMergeDirt[downLeft])
                                                                {
                                                                    downLeft = num;
                                                                }
                                                                else if (downLeft > -1 && mergesWithDirtInASpecialWay[downLeft])
                                                                {
                                                                    downLeft = num;
                                                                }
                                                                if (downRight > -1 && Main.tileMergeDirt[downRight])
                                                                {
                                                                    downRight = num;
                                                                }
                                                                else if (downRight > -1 && mergesWithDirtInASpecialWay[downRight])
                                                                {
                                                                    downRight = num;
                                                                }
                                                                TileMergeAttempt(-2, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttempt(num, 191, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                if (up > -1 && TileID.Sets.ForcedDirtMerging[up])
                                                                {
                                                                    up = num;
                                                                }
                                                                if (down > -1 && TileID.Sets.ForcedDirtMerging[down])
                                                                {
                                                                    down = num;
                                                                }
                                                                if (left > -1 && TileID.Sets.ForcedDirtMerging[left])
                                                                {
                                                                    left = num;
                                                                }
                                                                if (right > -1 && TileID.Sets.ForcedDirtMerging[right])
                                                                {
                                                                    right = num;
                                                                }
                                                                if (upLeft > -1 && TileID.Sets.ForcedDirtMerging[upLeft])
                                                                {
                                                                    upLeft = num;
                                                                }
                                                                if (upRight > -1 && TileID.Sets.ForcedDirtMerging[upRight])
                                                                {
                                                                    upRight = num;
                                                                }
                                                                if (downLeft > -1 && TileID.Sets.ForcedDirtMerging[downLeft])
                                                                {
                                                                    downLeft = num;
                                                                }
                                                                if (downRight > -1 && TileID.Sets.ForcedDirtMerging[downRight])
                                                                {
                                                                    downRight = num;
                                                                }
                                                                break;
                                                            }
                                                        case 213:
                                                            if (up > -1 && Main.tileSolid[up] && !Main.tileSolidTop[up])
                                                            {
                                                                up = num;
                                                            }
                                                            if (down > -1 && Main.tileSolid[down])
                                                            {
                                                                down = num;
                                                            }
                                                            if (up != num)
                                                            {
                                                                if (left > -1 && Main.tileSolid[left])
                                                                {
                                                                    left = num;
                                                                }
                                                                if (right > -1 && Main.tileSolid[right])
                                                                {
                                                                    right = num;
                                                                }
                                                            }
                                                            break;
                                                        case 53:
                                                            TileMergeAttemptFrametest(i, j, num, 397, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            TileMergeAttemptFrametest(i, j, num, 396, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            break;
                                                        case 234:
                                                            TileMergeAttemptFrametest(i, j, num, 399, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            TileMergeAttemptFrametest(i, j, num, 401, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            break;
                                                        case 112:
                                                            TileMergeAttemptFrametest(i, j, num, 398, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            TileMergeAttemptFrametest(i, j, num, 400, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            break;
                                                        case 116:
                                                            TileMergeAttemptFrametest(i, j, num, 402, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            TileMergeAttemptFrametest(i, j, num, 403, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            break;
                                                    }
                                                    if (Main.tileMergeDirt[num])
                                                    {
                                                        TileMergeAttempt(-2, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                        if (num == 1)
                                                        {
                                                            if ((double)j > Main.rockLayer)
                                                            {
                                                                TileMergeAttemptFrametest(i, j, num, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                            }
                                                            TileMergeAttemptFrametest(i, j, num, 57, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        switch (num)
                                                        {
                                                            case 58:
                                                            case 75:
                                                            case 76:
                                                                TileMergeAttempt(-2, 57, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 57:
                                                                TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttemptFrametest(i, j, num, TileID.Sets.HellSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 59:
                                                                if ((double)j > Main.rockLayer)
                                                                {
                                                                    TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                }
                                                                TileMergeAttempt(num, TileID.Sets.GrassSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttemptFrametest(i, j, num, TileID.Sets.JungleSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                if ((double)j < Main.rockLayer)
                                                                {
                                                                    TileMergeAttemptFrametest(i, j, num, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                }
                                                                else
                                                                {
                                                                    TileMergeAttempt(num, 0, ref up, ref down, ref left, ref right);
                                                                }
                                                                break;
                                                            case 211:
                                                                TileMergeAttempt(59, 60, ref up, ref down, ref left, ref right);
                                                                TileMergeAttempt(-2, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 225:
                                                            case 226:
                                                                TileMergeAttempt(-2, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 60:
                                                                TileMergeAttempt(59, 211, ref up, ref down, ref left, ref right);
                                                                break;
                                                            case 189:
                                                                TileMergeAttemptFrametest(i, j, num, TileID.Sets.MergesWithClouds, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 196:
                                                                TileMergeAttempt(-2, 189, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttempt(num, 460, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 460:
                                                                TileMergeAttempt(-2, 189, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttempt(num, 196, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 147:
                                                                TileMergeAttemptFrametest(i, j, num, TileID.Sets.IcesSlush, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 161:
                                                            case 163:
                                                            case 164:
                                                            case 200:
                                                            case 224:
                                                                TileMergeAttempt(-2, 147, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 162:
                                                                TileMergeAttempt(-2, TileID.Sets.IcesSnow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 32:
                                                                if (down == 23)
                                                                {
                                                                    down = num;
                                                                }
                                                                break;
                                                            case 352:
                                                                if (down == 199)
                                                                {
                                                                    down = num;
                                                                }
                                                                break;
                                                            case 69:
                                                                if (down == 60)
                                                                {
                                                                    down = num;
                                                                }
                                                                break;
                                                            case 51:
                                                                TileMergeAttempt(num, TileID.Sets.AllTiles, Main.tileNoAttach, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 192:
                                                                TileMergeAttemptFrametest(i, j, num, 191, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 191:
                                                                TileMergeAttempt(-2, 192, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttempt(num, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 384:
                                                                TileMergeAttemptFrametest(i, j, num, 383, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 383:
                                                                TileMergeAttempt(-2, 384, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttempt(num, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 407:
                                                                TileMergeAttempt(-2, 404, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 404:
                                                                TileMergeAttempt(-2, 396, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttemptFrametest(i, j, num, 407, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 397:
                                                                TileMergeAttempt(-2, 53, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttemptFrametest(i, j, num, 396, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 396:
                                                                TileMergeAttempt(-2, 397, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttempt(-2, 53, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttemptFrametest(i, j, num, 404, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 398:
                                                                TileMergeAttempt(-2, 112, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttemptFrametest(i, j, num, 400, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 400:
                                                                TileMergeAttempt(-2, 398, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttempt(-2, 112, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 399:
                                                                TileMergeAttempt(-2, 234, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttemptFrametest(i, j, num, 401, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 401:
                                                                TileMergeAttempt(-2, 399, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttempt(-2, 234, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 402:
                                                                TileMergeAttempt(-2, 116, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttemptFrametest(i, j, num, 403, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                            case 403:
                                                                TileMergeAttempt(-2, 402, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                TileMergeAttempt(-2, 116, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                break;
                                                        }
                                                    }
                                                    if (num == 0)
                                                    {
                                                        TileMergeAttempt(num, Main.tileMoss, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                        TileMergeAttempt(num, TileID.Sets.tileMossBrick, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                    }
                                                    else if (Main.tileMoss[num] || TileID.Sets.tileMossBrick[num])
                                                    {
                                                        TileMergeAttempt(num, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                    }
                                                    else if (Main.tileStone[num] || num == 1)
                                                    {
                                                        TileMergeAttempt(num, Main.tileMoss, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                    }
                                                    else if (num == 38)
                                                    {
                                                        TileMergeAttempt(num, TileID.Sets.tileMossBrick, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                    }
                                                    if (TileID.Sets.Conversion.Grass[num])
                                                    {
                                                        TileMergeAttempt(num, TileID.Sets.Ore, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                    }
                                                    else if (TileID.Sets.Ore[num])
                                                    {
                                                        TileMergeAttempt(num, TileID.Sets.Conversion.Grass, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                    }
                                                    if (num == 59)
                                                    {
                                                        TileMergeAttempt(num, TileID.Sets.OreMergesWithMud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                    }
                                                    else if (TileID.Sets.OreMergesWithMud[num])
                                                    {
                                                        TileMergeAttempt(num, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                    }
                                                    bool flag = false;
                                                    if (num == 2 || num == 23 || num == 60 || num == 477 || num == 492 || num == 70 || num == 109 || num == 199 || Main.tileMoss[num] || TileID.Sets.NeedsGrassFraming[num] || TileID.Sets.tileMossBrick[num])
                                                    {
                                                        flag = true;
                                                        TileMergeAttemptWeird(num, -1, Main.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                        int num32 = TileID.Sets.NeedsGrassFramingDirt[num];
                                                        if (num == 60 || num == 70)
                                                        {
                                                            num32 = 59;
                                                        }
                                                        else if (Main.tileMoss[num])
                                                        {
                                                            num32 = 1;
                                                        }
                                                        else if (TileID.Sets.tileMossBrick[num])
                                                        {
                                                            num32 = 38;
                                                        }
                                                        else
                                                        {
                                                            switch (num)
                                                            {
                                                                case 2:
                                                                case 477:
                                                                    TileMergeAttempt(num32, 23, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                    break;
                                                                case 23:
                                                                    TileMergeAttempt(num32, 2, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                                    break;
                                                            }
                                                        }
                                                        if (up != num && up != num32 && (down == num || down == num32))
                                                        {
                                                            if (left == num32 && right == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 0;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 18;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                }
                                                            }
                                                            else if (left == num && right == num32)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (down != num && down != num32 && (up == num || up == num32))
                                                        {
                                                            if (left == num32 && right == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 0;
                                                                        rectangle.Y = 216;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 18;
                                                                        rectangle.Y = 216;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 216;
                                                                        break;
                                                                }
                                                            }
                                                            else if (left == num && right == num32)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 216;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 216;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 216;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (left != num && left != num32 && (right == num || right == num32))
                                                        {
                                                            if (up == num32 && down == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                            }
                                                            else if (down == num && up == num32)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (right != num && right != num32 && (left == num || left == num32))
                                                        {
                                                            if (up == num32 && down == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                            }
                                                            else if (down == num && right == up)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (up == num && down == num && left == num && right == num)
                                                        {
                                                            if (upLeft != num && upRight != num && downLeft != num && downRight != num)
                                                            {
                                                                if (downRight == num32)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 108;
                                                                            rectangle.Y = 324;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 126;
                                                                            rectangle.Y = 324;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 144;
                                                                            rectangle.Y = 324;
                                                                            break;
                                                                    }
                                                                }
                                                                else if (upRight == num32)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 108;
                                                                            rectangle.Y = 342;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 126;
                                                                            rectangle.Y = 342;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 144;
                                                                            rectangle.Y = 342;
                                                                            break;
                                                                    }
                                                                }
                                                                else if (downLeft == num32)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 108;
                                                                            rectangle.Y = 360;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 126;
                                                                            rectangle.Y = 360;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 144;
                                                                            rectangle.Y = 360;
                                                                            break;
                                                                    }
                                                                }
                                                                else if (upLeft == num32)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 108;
                                                                            rectangle.Y = 378;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 126;
                                                                            rectangle.Y = 378;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 144;
                                                                            rectangle.Y = 378;
                                                                            break;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 144;
                                                                            rectangle.Y = 234;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 198;
                                                                            rectangle.Y = 234;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 252;
                                                                            rectangle.Y = 234;
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else if (upLeft != num && downRight != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 306;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 306;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 306;
                                                                        break;
                                                                }
                                                            }
                                                            else if (upRight != num && downLeft != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 306;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 108;
                                                                        rectangle.Y = 306;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 126;
                                                                        rectangle.Y = 306;
                                                                        break;
                                                                }
                                                            }
                                                            else if (upLeft != num && upRight == num && downLeft == num && downRight == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                            }
                                                            else if (upLeft == num && upRight != num && downLeft == num && downRight == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                            }
                                                            else if (upLeft == num && upRight == num && downLeft != num && downRight == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                            }
                                                            else if (upLeft == num && upRight == num && downLeft == num && downRight != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (up == num && down == num32 && left == num && right == num && upLeft == -1 && upRight == -1)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 108;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 126;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 144;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num32 && down == num && left == num && right == num && downLeft == -1 && downRight == -1)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 108;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 126;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 144;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num && down == num && left == num32 && right == num && upRight == -1 && downRight == -1)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 198;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 198;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 198;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num && down == num && left == num && right == num32 && upLeft == -1 && downLeft == -1)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 180;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 180;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 180;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num && down == num32 && left == num && right == num)
                                                        {
                                                            if (upRight != -1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                            }
                                                            else if (upLeft != -1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (up == num32 && down == num && left == num && right == num)
                                                        {
                                                            if (downRight != -1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                            }
                                                            else if (downLeft != -1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (up == num && down == num && left == num && right == num32)
                                                        {
                                                            if (upLeft != -1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                            }
                                                            else if (downLeft != -1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (up == num && down == num && left == num32 && right == num)
                                                        {
                                                            if (upRight != -1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                            }
                                                            else if (downRight != -1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if ((up == num32 && down == num && left == num && right == num) || (up == num && down == num32 && left == num && right == num) || (up == num && down == num && left == num32 && right == num) || (up == num && down == num && left == num && right == num32))
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 18;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 36;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 54;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                            }
                                                        }
                                                        if ((up == num || up == num32) && (down == num || down == num32) && (left == num || left == num32) && (right == num || right == num32))
                                                        {
                                                            if (upLeft != num && upLeft != num32 && (upRight == num || upRight == num32) && (downLeft == num || downLeft == num32) && (downRight == num || downRight == num32))
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                            }
                                                            else if (upRight != num && upRight != num32 && (upLeft == num || upLeft == num32) && (downLeft == num || downLeft == num32) && (downRight == num || downRight == num32))
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                            }
                                                            else if (downLeft != num && downLeft != num32 && (upLeft == num || upLeft == num32) && (upRight == num || upRight == num32) && (downRight == num || downRight == num32))
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                            }
                                                            else if (downRight != num && downRight != num32 && (upLeft == num || upLeft == num32) && (downLeft == num || downLeft == num32) && (upRight == num || upRight == num32))
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        if (up != num32 && up != num && down == num && left != num32 && left != num && right == num && downRight != num32 && downRight != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 90;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 108;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 126;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up != num32 && up != num && down == num && left == num && right != num32 && right != num && downLeft != num32 && downLeft != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 144;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 162;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 180;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                            }
                                                        }
                                                        else if (down != num32 && down != num && up == num && left != num32 && left != num && right == num && upRight != num32 && upRight != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 90;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 108;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 126;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                            }
                                                        }
                                                        else if (down != num32 && down != num && up == num && left == num && right != num32 && right != num && upLeft != num32 && upLeft != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 144;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 162;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 180;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up != num && up != num32 && down == num && left == num && right == num && downLeft != num && downLeft != num32 && downRight != num && downRight != num32)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 144;
                                                                    rectangle.Y = 216;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 198;
                                                                    rectangle.Y = 216;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 252;
                                                                    rectangle.Y = 216;
                                                                    break;
                                                            }
                                                        }
                                                        else if (down != num && down != num32 && up == num && left == num && right == num && upLeft != num && upLeft != num32 && upRight != num && upRight != num32)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 144;
                                                                    rectangle.Y = 252;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 198;
                                                                    rectangle.Y = 252;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 252;
                                                                    rectangle.Y = 252;
                                                                    break;
                                                            }
                                                        }
                                                        else if (left != num && left != num32 && down == num && up == num && right == num && upRight != num && upRight != num32 && downRight != num && downRight != num32)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 126;
                                                                    rectangle.Y = 234;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 180;
                                                                    rectangle.Y = 234;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 234;
                                                                    rectangle.Y = 234;
                                                                    break;
                                                            }
                                                        }
                                                        else if (right != num && right != num32 && down == num && up == num && left == num && upLeft != num && upLeft != num32 && downLeft != num && downLeft != num32)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 162;
                                                                    rectangle.Y = 234;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 216;
                                                                    rectangle.Y = 234;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 270;
                                                                    rectangle.Y = 234;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up != num32 && up != num && (down == num32 || down == num) && left == num32 && right == num32)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 36;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 54;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 72;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                            }
                                                        }
                                                        else if (down != num32 && down != num && (up == num32 || up == num) && left == num32 && right == num32)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 36;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 54;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 72;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                            }
                                                        }
                                                        else if (left != num32 && left != num && (right == num32 || right == num) && up == num32 && down == num32)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 0;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 0;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 0;
                                                                    rectangle.Y = 306;
                                                                    break;
                                                            }
                                                        }
                                                        else if (right != num32 && right != num && (left == num32 || left == num) && up == num32 && down == num32)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 18;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 18;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 18;
                                                                    rectangle.Y = 306;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num && down == num32 && left == num32 && right == num32)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 198;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 216;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 234;
                                                                    rectangle.Y = 288;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num32 && down == num && left == num32 && right == num32)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 198;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 216;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 234;
                                                                    rectangle.Y = 270;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num32 && down == num32 && left == num && right == num32)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 198;
                                                                    rectangle.Y = 306;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 216;
                                                                    rectangle.Y = 306;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 234;
                                                                    rectangle.Y = 306;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num32 && down == num32 && left == num32 && right == num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 144;
                                                                    rectangle.Y = 306;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 162;
                                                                    rectangle.Y = 306;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 180;
                                                                    rectangle.Y = 306;
                                                                    break;
                                                            }
                                                        }
                                                        if (up != num && up != num32 && down == num && left == num && right == num)
                                                        {
                                                            if ((downLeft == num32 || downLeft == num) && downRight != num32 && downRight != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 0;
                                                                        rectangle.Y = 324;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 18;
                                                                        rectangle.Y = 324;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 324;
                                                                        break;
                                                                }
                                                            }
                                                            else if ((downRight == num32 || downRight == num) && downLeft != num32 && downLeft != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 324;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 324;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 324;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (down != num && down != num32 && up == num && left == num && right == num)
                                                        {
                                                            if ((upLeft == num32 || upLeft == num) && upRight != num32 && upRight != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 0;
                                                                        rectangle.Y = 342;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 18;
                                                                        rectangle.Y = 342;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 342;
                                                                        break;
                                                                }
                                                            }
                                                            else if ((upRight == num32 || upRight == num) && upLeft != num32 && upLeft != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 342;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 342;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 342;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (left != num && left != num32 && up == num && down == num && right == num)
                                                        {
                                                            if ((upRight == num32 || upRight == num) && downRight != num32 && downRight != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 360;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 360;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 360;
                                                                        break;
                                                                }
                                                            }
                                                            else if ((downRight == num32 || downRight == num) && upRight != num32 && upRight != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 0;
                                                                        rectangle.Y = 360;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 18;
                                                                        rectangle.Y = 360;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 360;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (right != num && right != num32 && up == num && down == num && left == num)
                                                        {
                                                            if ((upLeft == num32 || upLeft == num) && downLeft != num32 && downLeft != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 0;
                                                                        rectangle.Y = 378;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 18;
                                                                        rectangle.Y = 378;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 378;
                                                                        break;
                                                                }
                                                            }
                                                            else if ((downLeft == num32 || downLeft == num) && upLeft != num32 && upLeft != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 378;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 378;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 378;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        if ((up == num || up == num32) && (down == num || down == num32) && (left == num || left == num32) && (right == num || right == num32) && upLeft != -1 && upRight != -1 && downLeft != -1 && downRight != -1)
                                                        {
                                                            if ((i + j) % 2 == 1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 108;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 126;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 144;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 18;
                                                                        rectangle.Y = 18;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 18;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 18;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        TileMergeAttempt(-2, num32, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                    }
                                                    TileMergeAttempt(num, Main.tileMerge[num], ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                    if (rectangle.X == -1 && rectangle.Y == -1 && (Main.tileMergeDirt[num] || (num > -1 && TileID.Sets.ChecksForMerge[num])))
                                                    {
                                                        if (!flag)
                                                        {
                                                            flag = true;
                                                            TileMergeAttemptWeird(num, -1, Main.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                        }
                                                        if (up > -1 && up != num)
                                                        {
                                                            up = -1;
                                                        }
                                                        if (down > -1 && down != num)
                                                        {
                                                            down = -1;
                                                        }
                                                        if (left > -1 && left != num)
                                                        {
                                                            left = -1;
                                                        }
                                                        if (right > -1 && right != num)
                                                        {
                                                            right = -1;
                                                        }
                                                        if (up != -1 && down != -1 && left != -1 && right != -1)
                                                        {
                                                            if (up == -2 && down == num && left == num && right == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 144;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 162;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 180;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                }
                                                                mergeUp = true;
                                                            }
                                                            else if (up == num && down == -2 && left == num && right == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 144;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 162;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 180;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                }
                                                                mergeDown = true;
                                                            }
                                                            else if (up == num && down == num && left == -2 && right == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 162;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 162;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 162;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                                mergeLeft = true;
                                                            }
                                                            else if (up == num && down == num && left == num && right == -2)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 144;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 144;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 144;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                                mergeRight = true;
                                                            }
                                                            else if (up == -2 && down == num && left == -2 && right == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                                mergeUp = true;
                                                                mergeLeft = true;
                                                            }
                                                            else if (up == -2 && down == num && left == num && right == -2)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                                mergeUp = true;
                                                                mergeRight = true;
                                                            }
                                                            else if (up == num && down == -2 && left == -2 && right == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                                mergeDown = true;
                                                                mergeLeft = true;
                                                            }
                                                            else if (up == num && down == -2 && left == num && right == -2)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                                mergeDown = true;
                                                                mergeRight = true;
                                                            }
                                                            else if (up == num && down == num && left == -2 && right == -2)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 180;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 180;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 180;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                }
                                                                mergeLeft = true;
                                                                mergeRight = true;
                                                            }
                                                            else if (up == -2 && down == -2 && left == num && right == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 144;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 162;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 180;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                                mergeUp = true;
                                                                mergeDown = true;
                                                            }
                                                            else if (up == -2 && down == num && left == -2 && right == -2)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 198;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 198;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 198;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                }
                                                                mergeUp = true;
                                                                mergeLeft = true;
                                                                mergeRight = true;
                                                            }
                                                            else if (up == num && down == -2 && left == -2 && right == -2)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 198;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 198;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 198;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                                mergeDown = true;
                                                                mergeLeft = true;
                                                                mergeRight = true;
                                                            }
                                                            else if (up == -2 && down == -2 && left == num && right == -2)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 216;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 216;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 216;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                                mergeUp = true;
                                                                mergeDown = true;
                                                                mergeRight = true;
                                                            }
                                                            else if (up == -2 && down == -2 && left == -2 && right == num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 216;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 216;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 216;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                }
                                                                mergeUp = true;
                                                                mergeDown = true;
                                                                mergeLeft = true;
                                                            }
                                                            else if (up == -2 && down == -2 && left == -2 && right == -2)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 108;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 126;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 144;
                                                                        rectangle.Y = 198;
                                                                        break;
                                                                }
                                                                mergeUp = true;
                                                                mergeDown = true;
                                                                mergeLeft = true;
                                                                mergeRight = true;
                                                            }
                                                            else if (up == num && down == num && left == num && right == num)
                                                            {
                                                                if (upLeft == -2)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 18;
                                                                            rectangle.Y = 108;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 18;
                                                                            rectangle.Y = 144;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 18;
                                                                            rectangle.Y = 180;
                                                                            break;
                                                                    }
                                                                }
                                                                if (upRight == -2)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 0;
                                                                            rectangle.Y = 108;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 0;
                                                                            rectangle.Y = 144;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 0;
                                                                            rectangle.Y = 180;
                                                                            break;
                                                                    }
                                                                }
                                                                if (downLeft == -2)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 18;
                                                                            rectangle.Y = 90;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 18;
                                                                            rectangle.Y = 126;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 18;
                                                                            rectangle.Y = 162;
                                                                            break;
                                                                    }
                                                                }
                                                                if (downRight == -2)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 0;
                                                                            rectangle.Y = 90;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 0;
                                                                            rectangle.Y = 126;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 0;
                                                                            rectangle.Y = 162;
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (num != 2 && num != 23 && num != 60 && num != 70 && num != 109 && num != 199 && num != 477 && num != 492)
                                                            {
                                                                if (up == -1 && down == -2 && left == num && right == num)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 234;
                                                                            rectangle.Y = 0;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 252;
                                                                            rectangle.Y = 0;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 270;
                                                                            rectangle.Y = 0;
                                                                            break;
                                                                    }
                                                                    mergeDown = true;
                                                                }
                                                                else if (up == -2 && down == -1 && left == num && right == num)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 234;
                                                                            rectangle.Y = 18;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 252;
                                                                            rectangle.Y = 18;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 270;
                                                                            rectangle.Y = 18;
                                                                            break;
                                                                    }
                                                                    mergeUp = true;
                                                                }
                                                                else if (up == num && down == num && left == -1 && right == -2)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 234;
                                                                            rectangle.Y = 36;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 252;
                                                                            rectangle.Y = 36;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 270;
                                                                            rectangle.Y = 36;
                                                                            break;
                                                                    }
                                                                    mergeRight = true;
                                                                }
                                                                else if (up == num && down == num && left == -2 && right == -1)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 234;
                                                                            rectangle.Y = 54;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 252;
                                                                            rectangle.Y = 54;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 270;
                                                                            rectangle.Y = 54;
                                                                            break;
                                                                    }
                                                                    mergeLeft = true;
                                                                }
                                                            }
                                                            if (up != -1 && down != -1 && left == -1 && right == num)
                                                            {
                                                                if (up == -2 && down == num)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 72;
                                                                            rectangle.Y = 144;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 72;
                                                                            rectangle.Y = 162;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 72;
                                                                            rectangle.Y = 180;
                                                                            break;
                                                                    }
                                                                    mergeUp = true;
                                                                }
                                                                else if (down == -2 && up == num)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 72;
                                                                            rectangle.Y = 90;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 72;
                                                                            rectangle.Y = 108;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 72;
                                                                            rectangle.Y = 126;
                                                                            break;
                                                                    }
                                                                    mergeDown = true;
                                                                }
                                                            }
                                                            else if (up != -1 && down != -1 && left == num && right == -1)
                                                            {
                                                                if (up == -2 && down == num)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 90;
                                                                            rectangle.Y = 144;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 90;
                                                                            rectangle.Y = 162;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 90;
                                                                            rectangle.Y = 180;
                                                                            break;
                                                                    }
                                                                    mergeUp = true;
                                                                }
                                                                else if (down == -2 && up == num)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 90;
                                                                            rectangle.Y = 90;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 90;
                                                                            rectangle.Y = 108;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 90;
                                                                            rectangle.Y = 126;
                                                                            break;
                                                                    }
                                                                    mergeDown = true;
                                                                }
                                                            }
                                                            else if (up == -1 && down == num && left != -1 && right != -1)
                                                            {
                                                                if (left == -2 && right == num)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 0;
                                                                            rectangle.Y = 198;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 18;
                                                                            rectangle.Y = 198;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 36;
                                                                            rectangle.Y = 198;
                                                                            break;
                                                                    }
                                                                    mergeLeft = true;
                                                                }
                                                                else if (right == -2 && left == num)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 54;
                                                                            rectangle.Y = 198;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 72;
                                                                            rectangle.Y = 198;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 90;
                                                                            rectangle.Y = 198;
                                                                            break;
                                                                    }
                                                                    mergeRight = true;
                                                                }
                                                            }
                                                            else if (up == num && down == -1 && left != -1 && right != -1)
                                                            {
                                                                if (left == -2 && right == num)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 0;
                                                                            rectangle.Y = 216;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 18;
                                                                            rectangle.Y = 216;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 36;
                                                                            rectangle.Y = 216;
                                                                            break;
                                                                    }
                                                                    mergeLeft = true;
                                                                }
                                                                else if (right == -2 && left == num)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 54;
                                                                            rectangle.Y = 216;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 72;
                                                                            rectangle.Y = 216;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 90;
                                                                            rectangle.Y = 216;
                                                                            break;
                                                                    }
                                                                    mergeRight = true;
                                                                }
                                                            }
                                                            else if (up != -1 && down != -1 && left == -1 && right == -1)
                                                            {
                                                                if (up == -2 && down == -2)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 108;
                                                                            rectangle.Y = 216;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 108;
                                                                            rectangle.Y = 234;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 108;
                                                                            rectangle.Y = 252;
                                                                            break;
                                                                    }
                                                                    mergeUp = true;
                                                                    mergeDown = true;
                                                                }
                                                                else if (up == -2)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 126;
                                                                            rectangle.Y = 144;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 126;
                                                                            rectangle.Y = 162;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 126;
                                                                            rectangle.Y = 180;
                                                                            break;
                                                                    }
                                                                    mergeUp = true;
                                                                }
                                                                else if (down == -2)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 126;
                                                                            rectangle.Y = 90;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 126;
                                                                            rectangle.Y = 108;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 126;
                                                                            rectangle.Y = 126;
                                                                            break;
                                                                    }
                                                                    mergeDown = true;
                                                                }
                                                            }
                                                            else if (up == -1 && down == -1 && left != -1 && right != -1)
                                                            {
                                                                if (left == -2 && right == -2)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 162;
                                                                            rectangle.Y = 198;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 180;
                                                                            rectangle.Y = 198;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 198;
                                                                            rectangle.Y = 198;
                                                                            break;
                                                                    }
                                                                    mergeLeft = true;
                                                                    mergeRight = true;
                                                                }
                                                                else if (left == -2)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 0;
                                                                            rectangle.Y = 252;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 18;
                                                                            rectangle.Y = 252;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 36;
                                                                            rectangle.Y = 252;
                                                                            break;
                                                                    }
                                                                    mergeLeft = true;
                                                                }
                                                                else if (right == -2)
                                                                {
                                                                    switch (num27)
                                                                    {
                                                                        case 0:
                                                                            rectangle.X = 54;
                                                                            rectangle.Y = 252;
                                                                            break;
                                                                        case 1:
                                                                            rectangle.X = 72;
                                                                            rectangle.Y = 252;
                                                                            break;
                                                                        default:
                                                                            rectangle.X = 90;
                                                                            rectangle.Y = 252;
                                                                            break;
                                                                    }
                                                                    mergeRight = true;
                                                                }
                                                            }
                                                            else if (up == -2 && down == -1 && left == -1 && right == -1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 108;
                                                                        rectangle.Y = 144;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 108;
                                                                        rectangle.Y = 162;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 108;
                                                                        rectangle.Y = 180;
                                                                        break;
                                                                }
                                                                mergeUp = true;
                                                            }
                                                            else if (up == -1 && down == -2 && left == -1 && right == -1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 108;
                                                                        rectangle.Y = 90;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 108;
                                                                        rectangle.Y = 108;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 108;
                                                                        rectangle.Y = 126;
                                                                        break;
                                                                }
                                                                mergeDown = true;
                                                            }
                                                            else if (up == -1 && down == -1 && left == -2 && right == -1)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 0;
                                                                        rectangle.Y = 234;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 18;
                                                                        rectangle.Y = 234;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 234;
                                                                        break;
                                                                }
                                                                mergeLeft = true;
                                                            }
                                                            else if (up == -1 && down == -1 && left == -1 && right == -2)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 234;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 72;
                                                                        rectangle.Y = 234;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 90;
                                                                        rectangle.Y = 234;
                                                                        break;
                                                                }
                                                                mergeRight = true;
                                                            }
                                                        }
                                                    }
                                                    int num33 = tile.blockType();
                                                    if (TileID.Sets.HasSlopeFrames[num])
                                                    {
                                                        if (num33 == 0)
                                                        {
                                                            bool flag2 = num == up && tile8.topSlope();
                                                            bool flag3 = num == left && tile2.leftSlope();
                                                            bool flag4 = num == right && tile3.rightSlope();
                                                            bool flag5 = num == down && tile9.bottomSlope();
                                                            int num34 = 0;
                                                            int num35 = 0;
                                                            if (flag2.ToInt() + flag3.ToInt() + flag4.ToInt() + flag5.ToInt() > 2)
                                                            {
                                                                int num36 = (tile8.slope() == 1).ToInt() + (tile3.slope() == 1).ToInt() + (tile9.slope() == 4).ToInt() + (tile2.slope() == 4).ToInt();
                                                                int num37 = (tile8.slope() == 2).ToInt() + (tile3.slope() == 3).ToInt() + (tile9.slope() == 3).ToInt() + (tile2.slope() == 2).ToInt();
                                                                if (num36 == num37)
                                                                {
                                                                    num34 = 2;
                                                                    num35 = 4;
                                                                }
                                                                else if (num36 > num37)
                                                                {
                                                                    bool num38 = num == upLeft && tile6.slope() == 0;
                                                                    bool flag6 = num == downRight && tile5.slope() == 0;
                                                                    if (num38 && flag6)
                                                                    {
                                                                        num35 = 4;
                                                                    }
                                                                    else if (flag6)
                                                                    {
                                                                        num34 = 6;
                                                                    }
                                                                    else
                                                                    {
                                                                        num34 = 7;
                                                                        num35 = 1;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    bool num39 = num == upRight && tile7.slope() == 0;
                                                                    bool flag7 = num == downLeft && tile4.slope() == 0;
                                                                    if (num39 && flag7)
                                                                    {
                                                                        num35 = 4;
                                                                        num34 = 1;
                                                                    }
                                                                    else if (flag7)
                                                                    {
                                                                        num34 = 7;
                                                                    }
                                                                    else
                                                                    {
                                                                        num34 = 6;
                                                                        num35 = 1;
                                                                    }
                                                                }
                                                                rectangle.X = (18 + num34) * 18;
                                                                rectangle.Y = num35 * 18;
                                                            }
                                                            else
                                                            {
                                                                if (flag2 && flag3 && num == down && num == right)
                                                                {
                                                                    num35 = 2;
                                                                }
                                                                else if (flag2 && flag4 && num == down && num == left)
                                                                {
                                                                    num34 = 1;
                                                                    num35 = 2;
                                                                }
                                                                else if (flag4 && flag5 && num == up && num == left)
                                                                {
                                                                    num34 = 1;
                                                                    num35 = 3;
                                                                }
                                                                else if (flag5 && flag3 && num == up && num == right)
                                                                {
                                                                    num35 = 3;
                                                                }
                                                                if (num34 != 0 || num35 != 0)
                                                                {
                                                                    rectangle.X = (18 + num34) * 18;
                                                                    rectangle.Y = num35 * 18;
                                                                }
                                                            }
                                                        }
                                                        if (num33 >= 2 && (rectangle.X < 0 || rectangle.Y < 0))
                                                        {
                                                            int num40 = -1;
                                                            int num41 = -1;
                                                            int num42 = -1;
                                                            int num43 = 0;
                                                            int num44 = 0;
                                                            switch (num33)
                                                            {
                                                                case 2:
                                                                    num40 = left;
                                                                    num41 = down;
                                                                    num42 = downLeft;
                                                                    num43++;
                                                                    break;
                                                                case 3:
                                                                    num40 = right;
                                                                    num41 = down;
                                                                    num42 = downRight;
                                                                    break;
                                                                case 4:
                                                                    num40 = left;
                                                                    num41 = up;
                                                                    num42 = upLeft;
                                                                    num43++;
                                                                    num44++;
                                                                    break;
                                                                case 5:
                                                                    num40 = right;
                                                                    num41 = up;
                                                                    num42 = upRight;
                                                                    num44++;
                                                                    break;
                                                            }
                                                            if (num != num40 || num != num41 || num != num42)
                                                            {
                                                                if (num == num40 && num == num41)
                                                                {
                                                                    num43 += 2;
                                                                }
                                                                else if (num == num40)
                                                                {
                                                                    num43 += 4;
                                                                }
                                                                else if (num == num41)
                                                                {
                                                                    num43 += 4;
                                                                    num44 += 2;
                                                                }
                                                                else
                                                                {
                                                                    num43 += 2;
                                                                    num44 += 2;
                                                                }
                                                            }
                                                            rectangle.X = (18 + num43) * 18;
                                                            rectangle.Y = num44 * 18;
                                                        }
                                                    }
                                                    if (rectangle.X < 0 || rectangle.Y < 0)
                                                    {
                                                        if (!flag)
                                                        {
                                                            flag = true;
                                                            TileMergeAttemptWeird(num, -1, Main.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                        }
                                                        if (num == 2 || num == 23 || num == 60 || num == 70 || num == 109 || num == 199 || num == 477 || num == 492 || Main.tileMoss[num] || TileID.Sets.tileMossBrick[num])
                                                        {
                                                            TileMergeAttempt(num, -2, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                                        }
                                                        if (up == num && down == num && left == num && right == num)
                                                        {
                                                            if (upLeft != num && upRight != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 108;
                                                                        rectangle.Y = 18;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 126;
                                                                        rectangle.Y = 18;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 144;
                                                                        rectangle.Y = 18;
                                                                        break;
                                                                }
                                                            }
                                                            else if (downLeft != num && downRight != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 108;
                                                                        rectangle.Y = 36;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 126;
                                                                        rectangle.Y = 36;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 144;
                                                                        rectangle.Y = 36;
                                                                        break;
                                                                }
                                                            }
                                                            else if (upLeft != num && downLeft != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 180;
                                                                        rectangle.Y = 0;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 180;
                                                                        rectangle.Y = 18;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 180;
                                                                        rectangle.Y = 36;
                                                                        break;
                                                                }
                                                            }
                                                            else if (upRight != num && downRight != num)
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 198;
                                                                        rectangle.Y = 0;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 198;
                                                                        rectangle.Y = 18;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 198;
                                                                        rectangle.Y = 36;
                                                                        break;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                switch (num27)
                                                                {
                                                                    case 0:
                                                                        rectangle.X = 18;
                                                                        rectangle.Y = 18;
                                                                        break;
                                                                    case 1:
                                                                        rectangle.X = 36;
                                                                        rectangle.Y = 18;
                                                                        break;
                                                                    default:
                                                                        rectangle.X = 54;
                                                                        rectangle.Y = 18;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        else if (up != num && down == num && left == num && right == num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 18;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 36;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 54;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num && down != num && left == num && right == num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 18;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 36;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 54;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num && down == num && left != num && right == num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 0;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 0;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 0;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num && down == num && left == num && right != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 72;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 72;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 72;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up != num && down == num && left != num && right == num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 0;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 36;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 72;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up != num && down == num && left == num && right != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 18;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 54;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 90;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num && down != num && left != num && right == num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 0;
                                                                    rectangle.Y = 72;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 36;
                                                                    rectangle.Y = 72;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 72;
                                                                    rectangle.Y = 72;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num && down != num && left == num && right != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 18;
                                                                    rectangle.Y = 72;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 54;
                                                                    rectangle.Y = 72;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 90;
                                                                    rectangle.Y = 72;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num && down == num && left != num && right != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 90;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 90;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 90;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up != num && down != num && left == num && right == num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 108;
                                                                    rectangle.Y = 72;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 126;
                                                                    rectangle.Y = 72;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 144;
                                                                    rectangle.Y = 72;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up != num && down == num && left != num && right != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 108;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 126;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 144;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up == num && down != num && left != num && right != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 108;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 126;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 144;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up != num && down != num && left != num && right == num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 162;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 162;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 162;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up != num && down != num && left == num && right != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 216;
                                                                    rectangle.Y = 0;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 216;
                                                                    rectangle.Y = 18;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 216;
                                                                    rectangle.Y = 36;
                                                                    break;
                                                            }
                                                        }
                                                        else if (up != num && down != num && left != num && right != num)
                                                        {
                                                            switch (num27)
                                                            {
                                                                case 0:
                                                                    rectangle.X = 162;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                                case 1:
                                                                    rectangle.X = 180;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                                default:
                                                                    rectangle.X = 198;
                                                                    rectangle.Y = 54;
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    if (rectangle.X <= -1 || rectangle.Y <= -1)
                                                    {
                                                        if (num27 <= 0)
                                                        {
                                                            rectangle.X = 18;
                                                            rectangle.Y = 18;
                                                        }
                                                        else if (num27 == 1)
                                                        {
                                                            rectangle.X = 36;
                                                            rectangle.Y = 18;
                                                        }
                                                        if (num27 >= 2)
                                                        {
                                                            rectangle.X = 54;
                                                            rectangle.Y = 18;
                                                        }
                                                    }
                                                    if (Main.tileLargeFrames[num] == 1 && num27 == 3)
                                                    {
                                                        rectangle.Y += 90;
                                                    }
                                                    if (Main.tileLargeFrames[num] == 2 && num27 == 3)
                                                    {
                                                        rectangle.Y += 90;
                                                    }
                                                    tile.frameX = (short)rectangle.X;
                                                    tile.frameY = (short)rectangle.Y;
                                                    if (TileID.Sets.IsVine[num])
                                                    {
                                                        up = ((tile8 == null) ? num : ((!tile8.nactive()) ? (-1) : ((!tile8.bottomSlope()) ? tile8.type : (-1))));
                                                        if (num != up)
                                                        {
                                                            bool num45 = up == 109 || up == 115;
                                                            bool flag8 = up == 199 || up == 205;
                                                            bool flag9 = up == 2 || up == 52;
                                                            bool flag10 = up == 382;
                                                            bool num46 = up == 70 || up == 528;
                                                            ushort num47 = 0;
                                                            if (num46)
                                                            {
                                                                num47 = 528;
                                                            }
                                                            if (num45)
                                                            {
                                                                num47 = 115;
                                                            }
                                                            if (flag8)
                                                            {
                                                                num47 = 205;
                                                            }
                                                            if (flag9 && num != 382)
                                                            {
                                                                num47 = 52;
                                                            }
                                                            if (flag10)
                                                            {
                                                                num47 = 382;
                                                            }
                                                            if (num47 != 0 && num47 != num)
                                                            {
                                                                tile.type = num47;
                                                                SquareTileFrame(i, j);
                                                                return;
                                                            }
                                                        }
                                                        if (up != num)
                                                        {
                                                            bool flag11 = false;
                                                            if (up == -1)
                                                            {
                                                                flag11 = true;
                                                            }
                                                            if (num == 52 && up != 2 && up != 192)
                                                            {
                                                                flag11 = true;
                                                            }
                                                            if (num == 382 && up != 2 && up != 192)
                                                            {
                                                                flag11 = true;
                                                            }
                                                            if (num == 62 && up != 60)
                                                            {
                                                                flag11 = true;
                                                            }
                                                            if (num == 115 && up != 109)
                                                            {
                                                                flag11 = true;
                                                            }
                                                            if (num == 528 && up != 70)
                                                            {
                                                                flag11 = true;
                                                            }
                                                            if (num == 205 && up != 199)
                                                            {
                                                                flag11 = true;
                                                            }
                                                            if (flag11)
                                                            {
                                                                KillTile(i, j);
                                                            }
                                                        }
                                                    }
                                                    if (!WorldGen.noTileActions && tile.active() && (num == 53 || num == 112 || num == 116 || num == 123 || num == 234 || num == 224 || num == 495 || num == 330 || num == 331 || num == 332 || num == 333))
                                                    {
                                                        if (Main.netMode == 0)
                                                        {
                                                            if (tile9 != null)
                                                            {
                                                                bool flag12 = false;
                                                                if (!this[i, j + 1].nactive())
                                                                {
                                                                    flag12 = true;
                                                                }
                                                                else if (!this[i, j + 2].nactive() && (!this[i, j + 1].active() || !Main.tileSolid[this[i, j + 1].type]))
                                                                {
                                                                    flag12 = true;
                                                                }
                                                                if (flag12 && WorldGen.AllowsSandfall(tile8))
                                                                {
                                                                    WorldGen.GetSandfallProjData(num, out int projType, out int dmg);
                                                                    tile.ClearTile();
                                                                    int num48 = Projectile.NewProjectile(i * 16 + 8, j * 16 + 8, 0f, 0.41f, projType, dmg, 0f, Main.myPlayer);
                                                                    Main.projectile[num48].ai[0] = 1f;
                                                                    SquareTileFrame(i, j);
                                                                }
                                                            }
                                                        }
                                                        else if (Main.netMode == 2 && tile9 != null && !tile9.nactive() && WorldGen.AllowsSandfall(tile8))
                                                        {
                                                            WorldGen.GetSandfallProjData(num, out int projType2, out int dmg2);
                                                            tile.ClearTile();
                                                            bool flag13 = false;
                                                            for (int k = 0; k < 1000; k++)
                                                            {
                                                                if (Main.projectile[k].active && Main.projectile[k].owner == Main.myPlayer && Main.projectile[k].type == projType2 && Math.Abs(Main.projectile[k].timeLeft - 3600) < 60 && Main.projectile[k].Distance(new Vector2(i * 16 + 8, j * 16 + 10)) < 4f)
                                                                {
                                                                    flag13 = true;
                                                                    break;
                                                                }
                                                            }
                                                            if (!flag13)
                                                            {
                                                                int num49 = Projectile.NewProjectile(i * 16 + 8, j * 16 + 8, 0f, 2.5f, projType2, dmg2, 0f, Main.myPlayer);
                                                                Main.projectile[num49].velocity.Y = 0.5f;
                                                                Main.projectile[num49].position.Y += 2f;
                                                                Main.projectile[num49].netUpdate = true;
                                                            }
                                                            SendTileSquare(-1, i, j, 1);
                                                            SquareTileFrame(i, j);
                                                        }
                                                    }
                                                    if (rectangle.X != frameX && rectangle.Y != frameY && frameX >= 0 && frameY >= 0)
                                                    {
                                                        WorldGen.tileReframeCount++;
                                                        if (WorldGen.tileReframeCount < 25)
                                                        {
                                                            bool num50 = mergeUp;
                                                            bool flag14 = mergeDown;
                                                            bool flag15 = mergeLeft;
                                                            bool flag16 = mergeRight;
                                                            TileFrame(i - 1, j);
                                                            TileFrame(i + 1, j);
                                                            TileFrame(i, j - 1);
                                                            TileFrame(i, j + 1);
                                                            mergeUp = num50;
                                                            mergeDown = flag14;
                                                            mergeLeft = flag15;
                                                            mergeRight = flag16;
                                                        }
                                                        WorldGen.tileReframeCount--;
                                                    }
                                                    goto end_IL_0002;
                                                }
                                        }
                                    }
                                    SelfFrame8Way(i, j, tile, resetFrame);
                                }
                            }
                            return;
                        }
                    }
                end_IL_0002:;
                }
                catch
                {
                }
                if (i > 0 && j > 0)
                {
                    UpdateMapTile(i, j);
                }
            }
            public bool mergeUp;

            public bool mergeDown;

            public bool mergeLeft;

            public bool mergeRight;
            public void TileMergeAttemptFrametest(int i, int j, int myType, int lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
            {
                if (up == lookfor)
                {
                    TileFrame(i, j - 1);
                    if (mergeDown)
                    {
                        up = myType;
                    }
                }
                if (down == lookfor)
                {
                    TileFrame(i, j + 1);
                    if (mergeUp)
                    {
                        down = myType;
                    }
                }
                if (left == lookfor)
                {
                    TileFrame(i - 1, j);
                    if (mergeRight)
                    {
                        left = myType;
                    }
                }
                if (right == lookfor)
                {
                    TileFrame(i + 1, j);
                    if (mergeLeft)
                    {
                        right = myType;
                    }
                }
                if (upLeft == lookfor)
                {
                    upLeft = myType;
                }
                if (upRight == lookfor)
                {
                    upRight = myType;
                }
                if (downLeft == lookfor)
                {
                    downLeft = myType;
                }
                if (downRight == lookfor)
                {
                    downRight = myType;
                }
            }
            public void TileMergeAttemptFrametest(int i, int j, int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
            {
                if (up > -1 && lookfor[up])
                {
                    TileFrame(i, j - 1);
                    if (mergeDown)
                    {
                        up = myType;
                    }
                }
                if (down > -1 && lookfor[down])
                {
                    TileFrame(i, j + 1);
                    if (mergeUp)
                    {
                        down = myType;
                    }
                }
                if (left > -1 && lookfor[left])
                {
                    TileFrame(i - 1, j);
                    if (mergeRight)
                    {
                        left = myType;
                    }
                }
                if (right > -1 && lookfor[right])
                {
                    TileFrame(i + 1, j);
                    if (mergeLeft)
                    {
                        right = myType;
                    }
                }
                if (upLeft > -1 && lookfor[upLeft])
                {
                    upLeft = myType;
                }
                if (upRight > -1 && lookfor[upRight])
                {
                    upRight = myType;
                }
                if (downLeft > -1 && lookfor[downLeft])
                {
                    downLeft = myType;
                }
                if (downRight > -1 && lookfor[downRight])
                {
                    downRight = myType;
                }
            }

            public void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right)
            {
                if (lookfor == up)
                {
                    up = myType;
                }
                if (lookfor == down)
                {
                    down = myType;
                }
                if (lookfor == left)
                {
                    left = myType;
                }
                if (lookfor == right)
                {
                    right = myType;
                }
            }

            public void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
            {
                if (lookfor == up)
                {
                    up = myType;
                }
                if (lookfor == down)
                {
                    down = myType;
                }
                if (lookfor == left)
                {
                    left = myType;
                }
                if (lookfor == right)
                {
                    right = myType;
                }
                if (lookfor == upLeft)
                {
                    upLeft = myType;
                }
                if (lookfor == upRight)
                {
                    upRight = myType;
                }
                if (lookfor == downLeft)
                {
                    downLeft = myType;
                }
                if (lookfor == downRight)
                {
                    downRight = myType;
                }
            }

            public void TileMergeAttempt(int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
            {
                if (up > -1 && lookfor[up])
                {
                    up = myType;
                }
                if (down > -1 && lookfor[down])
                {
                    down = myType;
                }
                if (left > -1 && lookfor[left])
                {
                    left = myType;
                }
                if (right > -1 && lookfor[right])
                {
                    right = myType;
                }
                if (upLeft > -1 && lookfor[upLeft])
                {
                    upLeft = myType;
                }
                if (upRight > -1 && lookfor[upRight])
                {
                    upRight = myType;
                }
                if (downLeft > -1 && lookfor[downLeft])
                {
                    downLeft = myType;
                }
                if (downRight > -1 && lookfor[downRight])
                {
                    downRight = myType;
                }
            }

            public void TileMergeAttempt(int myType, bool[] lookfor, bool[] exclude, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
            {
                if (up > -1 && !exclude[up] && lookfor[up])
                {
                    up = myType;
                }
                if (down > -1 && !exclude[down] && lookfor[down])
                {
                    down = myType;
                }
                if (left > -1 && !exclude[left] && lookfor[left])
                {
                    left = myType;
                }
                if (right > -1 && !exclude[right] && lookfor[right])
                {
                    right = myType;
                }
                if (upLeft > -1 && !exclude[upLeft] && lookfor[upLeft])
                {
                    upLeft = myType;
                }
                if (upRight > -1 && !exclude[upRight] && lookfor[upRight])
                {
                    upRight = myType;
                }
                if (downLeft > -1 && !exclude[downLeft] && lookfor[downLeft])
                {
                    downLeft = myType;
                }
                if (downRight > -1 && !exclude[downRight] && lookfor[downRight])
                {
                    downRight = myType;
                }
            }

            public void TileMergeAttemptWeird(int myType, int changeTo, bool[] exclude, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
            {
                if (up > -1 && !exclude[up] && up != myType)
                {
                    up = changeTo;
                }
                if (down > -1 && !exclude[down] && down != myType)
                {
                    down = changeTo;
                }
                if (left > -1 && !exclude[left] && left != myType)
                {
                    left = changeTo;
                }
                if (right > -1 && !exclude[right] && right != myType)
                {
                    right = changeTo;
                }
                if (upLeft > -1 && !exclude[upLeft] && upLeft != myType)
                {
                    upLeft = changeTo;
                }
                if (upRight > -1 && !exclude[upRight] && upRight != myType)
                {
                    upRight = changeTo;
                }
                if (downLeft > -1 && !exclude[downLeft] && downLeft != myType)
                {
                    downLeft = changeTo;
                }
                if (downRight > -1 && !exclude[downRight] && downRight != myType)
                {
                    downRight = changeTo;
                }
            }
            public void SelfFrame8Way(int i, int j, ITile centerTile, bool resetFrame)
            {
                if (!centerTile.active())
                {
                    return;
                }
                BlockStyle blockStyle = FindBlockStyle(centerTile);
                int num = 0;
                BlockStyle blockStyle2 = default(BlockStyle);
                if (blockStyle.top)
                {
                    ITile tileSafely = GetTileSafely(i, j - 1);
                    if (tileSafely.active() && WillItBlend(centerTile.type, tileSafely.type))
                    {
                        blockStyle2 = FindBlockStyle(tileSafely);
                        if (blockStyle2.bottom)
                        {
                            num |= 1;
                        }
                        else
                        {
                            blockStyle2.Clear();
                        }
                    }
                }
                BlockStyle blockStyle3 = default(BlockStyle);
                if (blockStyle.left)
                {
                    ITile tileSafely2 = GetTileSafely(i - 1, j);
                    if (tileSafely2.active() && WillItBlend(centerTile.type, tileSafely2.type))
                    {
                        blockStyle3 = FindBlockStyle(tileSafely2);
                        if (blockStyle3.right)
                        {
                            num |= 2;
                        }
                        else
                        {
                            blockStyle3.Clear();
                        }
                    }
                }
                BlockStyle blockStyle4 = default(BlockStyle);
                if (blockStyle.right)
                {
                    ITile tileSafely3 = GetTileSafely(i + 1, j);
                    if (tileSafely3.active() && WillItBlend(centerTile.type, tileSafely3.type))
                    {
                        blockStyle4 = FindBlockStyle(tileSafely3);
                        if (blockStyle4.left)
                        {
                            num |= 4;
                        }
                        else
                        {
                            blockStyle4.Clear();
                        }
                    }
                }
                BlockStyle blockStyle5 = default(BlockStyle);
                if (blockStyle.bottom)
                {
                    ITile tileSafely4 = GetTileSafely(i, j + 1);
                    if (tileSafely4.active() && WillItBlend(centerTile.type, tileSafely4.type))
                    {
                        blockStyle5 = FindBlockStyle(tileSafely4);
                        if (blockStyle5.top)
                        {
                            num |= 8;
                        }
                        else
                        {
                            blockStyle5.Clear();
                        }
                    }
                }
                if (blockStyle2.left && blockStyle3.top)
                {
                    ITile tileSafely5 = GetTileSafely(i - 1, j - 1);
                    if (tileSafely5.active() && WillItBlend(centerTile.type, tileSafely5.type))
                    {
                        BlockStyle blockStyle6 = FindBlockStyle(tileSafely5);
                        if (blockStyle6.right && blockStyle6.bottom)
                        {
                            num |= 0x10;
                        }
                    }
                }
                if (blockStyle2.right && blockStyle4.top)
                {
                    ITile tileSafely6 = GetTileSafely(i + 1, j - 1);
                    if (tileSafely6.active() && WillItBlend(centerTile.type, tileSafely6.type))
                    {
                        BlockStyle blockStyle7 = FindBlockStyle(tileSafely6);
                        if (blockStyle7.left && blockStyle7.bottom)
                        {
                            num |= 0x20;
                        }
                    }
                }
                if (blockStyle5.left && blockStyle3.bottom)
                {
                    ITile tileSafely7 = GetTileSafely(i - 1, j + 1);
                    if (tileSafely7.active() && WillItBlend(centerTile.type, tileSafely7.type))
                    {
                        BlockStyle blockStyle8 = FindBlockStyle(tileSafely7);
                        if (blockStyle8.right && blockStyle8.top)
                        {
                            num |= 0x40;
                        }
                    }
                }
                if (blockStyle5.right && blockStyle4.bottom)
                {
                    ITile tileSafely8 = GetTileSafely(i + 1, j + 1);
                    if (tileSafely8.active() && WillItBlend(centerTile.type, tileSafely8.type))
                    {
                        BlockStyle blockStyle9 = FindBlockStyle(tileSafely8);
                        if (blockStyle9.left && blockStyle9.top)
                        {
                            num |= 0x80;
                        }
                    }
                }
                if (resetFrame)
                {
                    centerTile.frameNumber((byte)WorldGen.genRand.Next(0, 3));
                }
                Point16 point = selfFrame8WayLookup[num][centerTile.frameNumber()];
                centerTile.frameX = point.X;
                centerTile.frameY = point.Y;
            }
            public bool PlaceTile(int i, int j, int Type, bool mute = false, bool forced = false, int plr = -1, int style = 0)
            {
                int num = Type;
                if (WorldGen.gen && this[i, j].active() && this[i, j].type == 488)
                {
                    return false;
                }
                if (num >= 623)
                {
                    return false;
                }
                bool result = false;
                if (i >= 0 && j >= 0 && i < MaxTilesX && j < MaxTilesY)
                {
                    ITile tile = this[i, j];
                    if (tile == null)
                    {
                        ITile tile1 = GetNewTileMethod().Invoke();
                        tile = tile1;
                        this[i, j] = tile;
                    }
                    if (forced || EmptyTile(i, j) || !Main.tileSolid[num] || (num == 23 && tile.type == 0 && tile.active()) || (num == 199 && tile.type == 0 && tile.active()) || (num == 2 && tile.type == 0 && tile.active()) || (num == 109 && tile.type == 0 && tile.active()) || (num == 60 && tile.type == 59 && tile.active()) || (num == 70 && tile.type == 59 && tile.active()) || (Main.tileMoss[num] && (tile.type == 1 || tile.type == 38) && tile.active()))
                    {
                        if (num == 23 && (tile.type != 0 || !tile.active()))
                        {
                            return false;
                        }
                        if (num == 199 && (tile.type != 0 || !tile.active()))
                        {
                            return false;
                        }
                        if (num == 2 && (tile.type != 0 || !tile.active()))
                        {
                            return false;
                        }
                        if (num == 109 && (tile.type != 0 || !tile.active()))
                        {
                            return false;
                        }
                        if (num == 60 && (tile.type != 59 || !tile.active()))
                        {
                            return false;
                        }
                        if (num == 70 && (tile.type != 59 || !tile.active()))
                        {
                            return false;
                        }
                        if (Main.tileMoss[num])
                        {
                            if ((tile.type != 1 && tile.type != 38) || !tile.active())
                            {
                                return false;
                            }
                            if (tile.type == 38)
                            {
                                switch (num)
                                {
                                    case 381:
                                        num = 517;
                                        break;
                                    case 534:
                                        num = 535;
                                        break;
                                    case 536:
                                        num = 537;
                                        break;
                                    case 539:
                                        num = 540;
                                        break;
                                    default:
                                        num = 512 + num - 179;
                                        break;
                                }
                            }
                        }
                        if (num == 81)
                        {
                            if (this[i, j - 1] == null)
                            {
                                this[i, j - 1] = CreateTile();
                            }
                            if (this[i, j + 1] == null)
                            {
                                this[i, j + 1] = CreateTile();
                            }
                            if (this[i, j - 1].active())
                            {
                                return false;
                            }
                            if (!this[i, j + 1].active() || !Main.tileSolid[this[i, j + 1].type] || this[i, j + 1].halfBrick() || this[i, j + 1].slope() != 0)
                            {
                                return false;
                            }
                        }
                        if ((num == 373 || num == 375 || num == 374 || num == 461) && (this[i, j - 1] == null || this[i, j - 1].bottomSlope()))
                        {
                            return false;
                        }
                        if (tile.liquid > 0 || tile.checkingLiquid())
                        {
                            switch (num)
                            {
                                case 4:
                                    if (style != 8 && style != 11 && style != 17)
                                    {
                                        return false;
                                    }
                                    break;
                                case 3:
                                case 20:
                                case 24:
                                case 27:
                                case 32:
                                case 51:
                                case 69:
                                case 72:
                                case 201:
                                case 352:
                                case 529:
                                    return false;
                            }
                        }
                        if (TileID.Sets.ResetsHalfBrickPlacementAttempt[num] && (!tile.active() || !Main.tileFrameImportant[tile.type]))
                        {
                            tile.halfBrick(halfBrick: false);
                            tile.frameY = 0;
                            tile.frameX = 0;
                        }
                        if (num == 3 || num == 24 || num == 110 || num == 201)
                        {
                            if (IsFitToPlaceFlowerIn(i, j, num))
                            {
                                if (num == 24 && WorldGen.genRand.Next(13) == 0)
                                {
                                    tile.active(active: true);
                                    tile.type = 32;
                                    SquareTileFrame(i, j);
                                }
                                else if (num == 201 && WorldGen.genRand.Next(13) == 0)
                                {
                                    tile.active(active: true);
                                    tile.type = 352;
                                    SquareTileFrame(i, j);
                                }
                                else if (this[i, j + 1].type == 78 || this[i, j + 1].type == 380 || this[i, j + 1].type == 579)
                                {
                                    tile.active(active: true);
                                    tile.type = (ushort)num;
                                    int num2 = WorldGen.genRand.NextFromList<int>(6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 30, 33, 36, 39, 42);
                                    switch (num2)
                                    {
                                        case 21:
                                        case 24:
                                        case 27:
                                        case 30:
                                        case 33:
                                        case 36:
                                        case 39:
                                        case 42:
                                            num2 += WorldGen.genRand.Next(3);
                                            break;
                                    }
                                    tile.frameX = (short)(num2 * 18);
                                }
                                else if ((tile.wall == 0 || tile.wall == 106 || tile.wall == 107 || (tile.wall >= 63 && tile.wall <= 70)) && (this[i, j + 1].wall == 0 || this[i, j + 1].wall == 106 || this[i, j + 1].wall == 107 || (this[i, j + 1].wall >= 63 && this[i, j + 1].wall <= 70)))
                                {
                                    if (WorldGen.genRand.Next(50) == 0 || ((num == 24 || num == 201) && WorldGen.genRand.Next(40) == 0))
                                    {
                                        tile.active(active: true);
                                        tile.type = (ushort)num;
                                        if (num == 201)
                                        {
                                            tile.frameX = 270;
                                        }
                                        else
                                        {
                                            tile.frameX = 144;
                                        }
                                    }
                                    else if (WorldGen.genRand.Next(35) == 0 || (this[i, j].wall >= 63 && this[i, j].wall <= 70))
                                    {
                                        tile.active(active: true);
                                        tile.type = (ushort)num;
                                        int num3 = WorldGen.genRand.NextFromList<int>(6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);
                                        if (num == 201)
                                        {
                                            num3 = WorldGen.genRand.NextFromList<int>(6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22);
                                        }
                                        tile.frameX = (short)(num3 * 18);
                                    }
                                    else
                                    {
                                        tile.active(active: true);
                                        tile.type = (ushort)num;
                                        tile.frameX = (short)(WorldGen.genRand.Next(6) * 18);
                                    }
                                }
                            }
                        }
                        else if (num == 61)
                        {
                            if (j + 1 < MaxTilesY && this[i, j + 1].active() && this[i, j + 1].slope() == 0 && !this[i, j + 1].halfBrick() && this[i, j + 1].type == 60)
                            {
                                if (WorldGen.genRand.Next(16) == 0 && (double)j > Main.worldSurface)
                                {
                                    tile.active(active: true);
                                    tile.type = 69;
                                    SquareTileFrame(i, j);
                                }
                                else if (WorldGen.genRand.Next(60) == 0 && (double)j > Main.rockLayer)
                                {
                                    tile.active(active: true);
                                    tile.type = (ushort)num;
                                    tile.frameX = 144;
                                }
                                else if (WorldGen.genRand.Next(230) == 0 && (double)j > Main.rockLayer)
                                {
                                    tile.active(active: true);
                                    tile.type = (ushort)num;
                                    tile.frameX = 162;
                                }
                                else if (WorldGen.genRand.Next(15) == 0)
                                {
                                    tile.active(active: true);
                                    tile.type = (ushort)num;
                                    if (WorldGen.genRand.Next(3) != 0)
                                    {
                                        tile.frameX = (short)(WorldGen.genRand.Next(2) * 18 + 108);
                                    }
                                    else
                                    {
                                        tile.frameX = (short)(WorldGen.genRand.Next(13) * 18 + 180);
                                    }
                                }
                                else
                                {
                                    tile.active(active: true);
                                    tile.type = (ushort)num;
                                    tile.frameX = (short)(WorldGen.genRand.Next(6) * 18);
                                }
                            }
                        }
                        else if (num == 518)
                        {
                            PlaceLilyPad(i, j);
                        }
                        else if (num == 519)
                        {
                            PlaceCatTail(i, j);
                        }
                        else if (num == 529)
                        {
                            PlantSeaOat(i, j);
                        }
                        else if (num == 571)
                        {
                            PlaceBamboo(i, j);
                        }
                        else if (num == 549)
                        {
                            PlaceUnderwaterPlant(549, i, j);
                        }
                        else if (num == 71)
                        {
                            if (j + 1 < MaxTilesY && this[i, j + 1].active() && this[i, j + 1].slope() == 0 && !this[i, j + 1].halfBrick() && this[i, j + 1].type == 70)
                            {
                                Point point = new Point(-1, -1);
                                if ((double)j > Main.worldSurface)
                                {
                                    point = PlaceCatTail(i, j);
                                }
                                if (InWorld(point.X, point.Y))
                                {
                                    if (WorldGen.gen)
                                    {
                                        int num4 = WorldGen.genRand.Next(14);
                                        for (int k = 0; k < num4; k++)
                                        {
                                            GrowCatTail(point.X, point.Y);
                                        }
                                        SquareTileFrame(point.X, point.Y);
                                    }
                                }
                                else
                                {
                                    tile.active(active: true);
                                    tile.type = (ushort)num;
                                    tile.frameX = (short)(WorldGen.genRand.Next(5) * 18);
                                }
                            }
                        }
                        else if (num == 129)
                        {
                            if (SolidTile(i - 1, j) || SolidTile(i + 1, j) || SolidTile(i, j - 1) || SolidTile(i, j + 1))
                            {
                                tile.active(active: true);
                                tile.type = (ushort)num;
                                tile.frameX = (short)(WorldGen.genRand.Next(18) * 18);
                                if (plr <= -1 && WorldGen.genRand.Next(50) == 0)
                                {
                                    tile.frameX = (short)((18 + WorldGen.genRand.Next(6)) * 18);
                                }
                                SquareTileFrame(i, j);
                            }
                        }
                        else if (num == 178)
                        {
                            if (SolidTile(i - 1, j, noDoors: true) || SolidTile(i + 1, j, noDoors: true) || SolidTile(i, j - 1) || SolidTile(i, j + 1))
                            {
                                tile.active(active: true);
                                tile.type = (ushort)num;
                                tile.frameX = (short)(style * 18);
                                tile.frameY = (short)(WorldGen.genRand.Next(3) * 18);
                                SquareTileFrame(i, j);
                            }
                        }
                        else if (num == 184)
                        {
                            if ((Main.tileMoss[this[i - 1, j].type] && SolidTile(i - 1, j)) || (Main.tileMoss[this[i + 1, j].type] && SolidTile(i + 1, j)) || (Main.tileMoss[this[i, j - 1].type] && SolidTile(i, j - 1)) || (Main.tileMoss[this[i, j + 1].type] && SolidTile(i, j + 1)))
                            {
                                tile.active(active: true);
                                tile.type = (ushort)num;
                                tile.frameX = (short)(style * 18);
                                tile.frameY = (short)(WorldGen.genRand.Next(3) * 18);
                                SquareTileFrame(i, j);
                            }
                            if ((TileID.Sets.tileMossBrick[this[i - 1, j].type] && SolidTile(i - 1, j)) || (TileID.Sets.tileMossBrick[this[i + 1, j].type] && SolidTile(i + 1, j)) || (TileID.Sets.tileMossBrick[this[i, j - 1].type] && SolidTile(i, j - 1)) || (TileID.Sets.tileMossBrick[this[i, j + 1].type] && SolidTile(i, j + 1)))
                            {
                                tile.active(active: true);
                                tile.type = (ushort)num;
                                tile.frameX = (short)(style * 18);
                                tile.frameY = (short)(WorldGen.genRand.Next(3) * 18);
                                SquareTileFrame(i, j);
                            }
                        }
                        else if (num == 485)
                        {
                            PlaceObject(i, j, num, mute: false, style);
                        }
                        else if (num == 171)
                        {
                            PlaceXmasTree(i, j, 171);
                        }
                        else if (num == 254)
                        {
                            Place2x2Style(i, j, (ushort)num, style);
                        }
                        else if (num == 335 || num == 564 || num == 594)
                        {
                            Place2x2(i, j, (ushort)num, 0);
                        }
                        else if (num == 319 || num == 132 || num == 484 || num == 138 || num == 142 || num == 143 || num == 282 || (num >= 288 && num <= 295) || (num >= 316 && num <= 318))
                        {
                            Place2x2(i, j, (ushort)num, 0);
                        }
                        else if (num == 411)
                        {
                            Place2x2(i, j, (ushort)num, 0);
                        }
                        else if (num == 457)
                        {
                            Place2x2Horizontal(i, j, 457, style);
                        }
                        else if (num == 137)
                        {
                            tile.active(active: true);
                            tile.type = (ushort)num;
                            tile.frameY = (short)(18 * style);
                        }
                        else if (num == 136)
                        {
                            if (this[i - 1, j] == null)
                            {
                                this[i - 1, j] = CreateTile();
                            }
                            if (this[i + 1, j] == null)
                            {
                                this[i + 1, j] = CreateTile();
                            }
                            if (this[i, j + 1] == null)
                            {
                                this[i, j + 1] = CreateTile();
                            }
                            if ((this[i - 1, j].nactive() && !this[i - 1, j].halfBrick() && !TileID.Sets.NotReallySolid[this[i - 1, j].type] && this[i - 1, j].slope() == 0 && (SolidTile(i - 1, j) || TileID.Sets.IsBeam[this[i - 1, j].type] || (this[i - 1, j].type == 5 && this[i - 1, j - 1].type == 5 && this[i - 1, j + 1].type == 5))) || (this[i + 1, j].nactive() && !this[i + 1, j].halfBrick() && !TileID.Sets.NotReallySolid[this[i + 1, j].type] && this[i + 1, j].slope() == 0 && (SolidTile(i + 1, j) || TileID.Sets.IsBeam[this[i + 1, j].type] || (this[i + 1, j].type == 5 && this[i + 1, j - 1].type == 5 && this[i + 1, j + 1].type == 5))) || (this[i, j + 1].nactive() && !this[i, j + 1].halfBrick() && SolidTile(i, j + 1) && this[i, j + 1].slope() == 0) || tile.wall > 0)
                            {
                                tile.active(active: true);
                                tile.type = (ushort)num;
                                SquareTileFrame(i, j);
                            }
                        }
                        else if (num == 442)
                        {
                            if (this[i - 1, j] == null)
                            {
                                this[i - 1, j] = CreateTile();
                            }
                            if (this[i + 1, j] == null)
                            {
                                this[i + 1, j] = CreateTile();
                            }
                            if (this[i, j + 1] == null)
                            {
                                this[i, j + 1] = CreateTile();
                            }
                            if ((this[i - 1, j].nactive() && !this[i - 1, j].halfBrick() && !TileID.Sets.NotReallySolid[this[i - 1, j].type] && this[i - 1, j].slope() == 0 && (SolidTile(i - 1, j) || TileID.Sets.IsBeam[this[i - 1, j].type] || (this[i - 1, j].type == 5 && this[i - 1, j - 1].type == 5 && this[i - 1, j + 1].type == 5))) || (this[i + 1, j].nactive() && !this[i + 1, j].halfBrick() && !TileID.Sets.NotReallySolid[this[i + 1, j].type] && this[i + 1, j].slope() == 0 && (SolidTile(i + 1, j) || TileID.Sets.IsBeam[this[i + 1, j].type] || (this[i + 1, j].type == 5 && this[i + 1, j - 1].type == 5 && this[i + 1, j + 1].type == 5))) || (this[i, j + 1].nactive() && !this[i, j + 1].halfBrick() && SolidTile(i, j + 1) && this[i, j + 1].slope() == 0))
                            {
                                tile.active(active: true);
                                tile.type = (ushort)num;
                                SquareTileFrame(i, j);
                            }
                        }
                        else if (num == 4)
                        {
                            if (this[i - 1, j] == null)
                            {
                                this[i - 1, j] = CreateTile();
                            }
                            if (this[i + 1, j] == null)
                            {
                                this[i + 1, j] = CreateTile();
                            }
                            if (this[i, j + 1] == null)
                            {
                                this[i, j + 1] = CreateTile();
                            }
                            ITile tile2 = this[i - 1, j];
                            ITile tile3 = this[i + 1, j];
                            ITile tile4 = this[i, j + 1];
                            if (tile.wall > 0 || (tile2.active() && (tile2.slope() == 0 || (int)tile2.slope() % 2 != 1) && ((Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type] && !TileID.Sets.NotReallySolid[tile2.type]) || TileID.Sets.IsBeam[tile2.type] || (WorldGen.IsTreeType(tile2.type) && WorldGen.IsTreeType(this[i - 1, j - 1].type) && WorldGen.IsTreeType(this[i - 1, j + 1].type)))) || (tile3.active() && (tile3.slope() == 0 || (int)tile3.slope() % 2 != 0) && ((Main.tileSolid[tile3.type] && !Main.tileSolidTop[tile3.type] && !TileID.Sets.NotReallySolid[tile3.type]) || TileID.Sets.IsBeam[tile3.type] || (WorldGen.IsTreeType(tile3.type) && WorldGen.IsTreeType(this[i + 1, j - 1].type) && WorldGen.IsTreeType(this[i + 1, j + 1].type)))) || (tile4.active() && Main.tileSolid[tile4.type] && ((TileID.Sets.Platforms[tile4.type] && WorldGen.TopEdgeCanBeAttachedTo(i, j + 1)) || ((!Main.tileSolidTop[tile4.type] || (tile4.type == 380 && tile4.slope() == 0)) && !TileID.Sets.NotReallySolid[tile4.type] && !tile4.halfBrick() && tile4.slope() == 0))))
                            {
                                tile.active(active: true);
                                tile.type = (ushort)num;
                                tile.frameY = (short)(22 * style);
                                SquareTileFrame(i, j);
                            }
                        }
                        else if (num == 10)
                        {
                            if (this[i, j - 1] == null)
                            {
                                this[i, j - 1] = CreateTile();
                            }
                            if (this[i, j - 2] == null)
                            {
                                this[i, j - 2] = CreateTile();
                            }
                            if (this[i, j - 3] == null)
                            {
                                this[i, j - 3] = CreateTile();
                            }
                            if (this[i, j + 1] == null)
                            {
                                this[i, j + 1] = CreateTile();
                            }
                            if (this[i, j + 2] == null)
                            {
                                this[i, j + 2] = CreateTile();
                            }
                            if (this[i, j + 3] == null)
                            {
                                this[i, j + 3] = CreateTile();
                            }
                            if (!this[i, j - 1].active() && !this[i, j - 2].active() && this[i, j - 3].active() && Main.tileSolid[this[i, j - 3].type])
                            {
                                PlaceDoor(i, j - 1, num, style);
                                SquareTileFrame(i, j);
                            }
                            else
                            {
                                if (this[i, j + 1].active() || this[i, j + 2].active() || !this[i, j + 3].active() || !Main.tileSolid[this[i, j + 3].type])
                                {
                                    return false;
                                }
                                PlaceDoor(i, j + 1, num, style);
                                SquareTileFrame(i, j);
                            }
                        }
                        else if ((num >= 275 && num <= 281) || num == 296 || num == 297 || num == 309 || num == 358 || num == 359 || num == 413 || num == 414 || num == 542)
                        {
                            Place6x3(i, j, (ushort)num);
                        }
                        else if (num == 237 || num == 244 || num == 285 || num == 286 || num == 298 || num == 299 || num == 310 || num == 339 || num == 538 || (num >= 361 && num <= 364) || num == 532 || num == 533 || num == 486 || num == 488 || num == 544 || num == 582 || num == 619)
                        {
                            Place3x2(i, j, (ushort)num);
                        }
                        else if (num == 128)
                        {
                            PlaceMan(i, j, style);
                            SquareTileFrame(i, j);
                        }
                        else if (num == 269)
                        {
                            PlaceWoman(i, j, style);
                            SquareTileFrame(i, j);
                        }
                        else if (num == 334)
                        {
                            int style2 = 0;
                            if (style == -1)
                            {
                                style2 = 1;
                            }
                            Place3x3Wall(i, j, 334, style2);
                            SquareTileFrame(i, j);
                        }
                        else if (num == 149)
                        {
                            if (SolidTile(i - 1, j) || SolidTile(i + 1, j) || SolidTile(i, j - 1) || SolidTile(i, j + 1))
                            {
                                tile.frameX = (short)(18 * style);
                                tile.active(active: true);
                                tile.type = (ushort)num;
                                SquareTileFrame(i, j);
                            }
                        }
                        else if (num == 139 || num == 35)
                        {
                            PlaceMB(i, j, (ushort)num, style);
                            SquareTileFrame(i, j);
                        }
                        else if (num == 165)
                        {
                            PlaceTight(i, j);
                            SquareTileFrame(i, j);
                        }
                        else if (num == 235)
                        {
                            Place3x1(i, j, (ushort)num);
                            SquareTileFrame(i, j);
                        }
                        else if (num == 240)
                        {
                            Place3x3Wall(i, j, (ushort)num, style);
                        }
                        else if (num == 440)
                        {
                            Place3x3Wall(i, j, (ushort)num, style);
                        }
                        else if (num == 245)
                        {
                            Place2x3Wall(i, j, (ushort)num, style);
                        }
                        else if (num == 246)
                        {
                            Place3x2Wall(i, j, (ushort)num, style);
                        }
                        else if (num == 241)
                        {
                            Place4x3Wall(i, j, (ushort)num, style);
                        }
                        else if (num == 242)
                        {
                            Place6x4Wall(i, j, (ushort)num, style);
                        }
                        else if (num == 34)
                        {
                            PlaceChand(i, j, (ushort)num, style);
                            SquareTileFrame(i, j);
                        }
                        else if (num == 106 || num == 212 || num == 219 || num == 220 || num == 228 || num == 231 || num == 243 || num == 247 || num == 283 || (num >= 300 && num <= 308) || num == 354 || num == 355 || num == 491)
                        {
                            Place3x3(i, j, (ushort)num, style);
                            SquareTileFrame(i, j);
                        }
                        else
                        {
                            switch (num)
                            {
                                case 13:
                                case 33:
                                case 49:
                                case 50:
                                case 78:
                                case 174:
                                case 372:
                                    PlaceOnTable1x1(i, j, num, style);
                                    SquareTileFrame(i, j);
                                    break;
                                case 14:
                                case 26:
                                case 86:
                                case 87:
                                case 88:
                                case 89:
                                case 114:
                                case 186:
                                case 187:
                                case 215:
                                case 217:
                                case 218:
                                case 377:
                                case 469:
                                    Place3x2(i, j, (ushort)num, style);
                                    SquareTileFrame(i, j);
                                    break;
                                case 236:
                                    PlaceJunglePlant(i, j, (ushort)num, WorldGen.genRand.Next(3), 0);
                                    SquareTileFrame(i, j);
                                    break;
                                case 238:
                                    PlaceJunglePlant(i, j, (ushort)num, 0, 0);
                                    SquareTileFrame(i, j);
                                    break;
                                case 20:
                                    {
                                        if (this[i, j + 1] == null)
                                        {
                                            this[i, j + 1] = CreateTile();
                                        }
                                        int type = this[i, j + 1].type;
                                        if (this[i, j + 1].active() && (type == 2 || type == 109 || type == 147 || type == 60 || type == 23 || type == 199 || type == 53 || type == 234 || type == 116 || type == 112))
                                        {
                                            Place1x2(i, j, (ushort)num, style);
                                            SquareTileFrame(i, j);
                                        }
                                        break;
                                    }
                                case 15:
                                case 216:
                                case 338:
                                case 390:
                                    if (this[i, j - 1] == null)
                                    {
                                        this[i, j - 1] = CreateTile();
                                    }
                                    if (this[i, j] == null)
                                    {
                                        this[i, j] = CreateTile();
                                    }
                                    Place1x2(i, j, (ushort)num, style);
                                    SquareTileFrame(i, j);
                                    break;
                                case 227:
                                    PlaceDye(i, j, style);
                                    SquareTileFrame(i, j);
                                    break;
                                case 567:
                                    PlaceGnome(i, j, style);
                                    SquareTileFrame(i, j);
                                    break;
                                case 16:
                                case 18:
                                case 29:
                                case 103:
                                case 134:
                                case 462:
                                    Place2x1(i, j, (ushort)num, style);
                                    SquareTileFrame(i, j);
                                    break;
                                case 92:
                                case 93:
                                case 453:
                                    Place1xX(i, j, (ushort)num, style);
                                    SquareTileFrame(i, j);
                                    break;
                                case 104:
                                case 105:
                                case 320:
                                case 337:
                                case 349:
                                case 356:
                                case 378:
                                case 456:
                                case 506:
                                case 545:
                                    Place2xX(i, j, (ushort)num, style);
                                    SquareTileFrame(i, j);
                                    break;
                                case 17:
                                case 77:
                                case 133:
                                    Place3x2(i, j, (ushort)num, style);
                                    SquareTileFrame(i, j);
                                    break;
                                case 207:
                                    Place2xX(i, j, (ushort)num, style);
                                    SquareTileFrame(i, j);
                                    break;
                                case 410:
                                case 480:
                                case 509:
                                    Place2xX(i, j, (ushort)num, style);
                                    SquareTileFrame(i, j);
                                    break;
                                case 465:
                                case 531:
                                case 591:
                                case 592:
                                    Place2xX(i, j, (ushort)num, style);
                                    SquareTileFrame(i, j);
                                    break;
                                default:
                                    if (TileID.Sets.BasicChest[num])
                                    {
                                        PlaceChest(i, j, (ushort)num, notNearOtherChests: false, style);
                                        SquareTileFrame(i, j);
                                        break;
                                    }
                                    switch (num)
                                    {
                                        case 91:
                                            PlaceBanner(i, j, (ushort)num, style);
                                            SquareTileFrame(i, j);
                                            break;
                                        case 419:
                                        case 420:
                                        case 423:
                                        case 424:
                                        case 429:
                                        case 445:
                                            PlaceLogicTiles(i, j, num, style);
                                            SquareTileFrame(i, j);
                                            break;
                                        case 36:
                                        case 135:
                                        case 141:
                                        case 144:
                                        case 210:
                                        case 239:
                                        case 324:
                                        case 476:
                                        case 494:
                                            Place1x1(i, j, num, style);
                                            SquareTileFrame(i, j);
                                            break;
                                        case 101:
                                        case 102:
                                        case 463:
                                            Place3x4(i, j, (ushort)num, style);
                                            SquareTileFrame(i, j);
                                            break;
                                        case 464:
                                        case 466:
                                            Place5x4(i, j, (ushort)num, style);
                                            SquareTileFrame(i, j);
                                            break;
                                        case 27:
                                            PlaceSunflower(i, j, 27);
                                            SquareTileFrame(i, j);
                                            break;
                                        case 28:
                                            PlacePot(i, j, 28, WorldGen.genRand.Next(4));
                                            SquareTileFrame(i, j);
                                            break;
                                        case 42:
                                        case 270:
                                        case 271:
                                            Place1x2Top(i, j, (ushort)num, style);
                                            SquareTileFrame(i, j);
                                            break;
                                        case 55:
                                        case 425:
                                        case 510:
                                        case 511:
                                            PlaceSign(i, j, (ushort)num, style);
                                            break;
                                        case 85:
                                        case 376:
                                            Place2x2Horizontal(i, j, (ushort)num, style);
                                            break;
                                        default:
                                            if (Main.tileAlch[num])
                                            {
                                                PlaceAlch(i, j, style);
                                                break;
                                            }
                                            switch (num)
                                            {
                                                case 94:
                                                case 95:
                                                case 97:
                                                case 98:
                                                case 99:
                                                case 100:
                                                case 125:
                                                case 126:
                                                case 172:
                                                case 173:
                                                case 287:
                                                    Place2x2(i, j, (ushort)num, style);
                                                    break;
                                                case 96:
                                                    Place2x2Style(i, j, (ushort)num, style);
                                                    break;
                                                case 79:
                                                case 90:
                                                    {
                                                        int direction = 1;
                                                        if (plr > -1)
                                                        {
                                                            direction = Main.player[plr].direction;
                                                        }
                                                        Place4x2(i, j, (ushort)num, direction, style);
                                                        break;
                                                    }
                                                case 209:
                                                    PlaceCannon(i, j, (ushort)num, style);
                                                    break;
                                                case 81:
                                                    tile.frameX = (short)(26 * WorldGen.genRand.Next(6));
                                                    tile.active(active: true);
                                                    tile.type = (ushort)num;
                                                    break;
                                                case 19:
                                                    tile.frameY = (short)(18 * style);
                                                    tile.active(active: true);
                                                    tile.type = (ushort)num;
                                                    break;
                                                case 380:
                                                    tile.frameY = (short)(18 * style);
                                                    tile.active(active: true);
                                                    tile.type = (ushort)num;
                                                    break;
                                                case 314:
                                                    PlaceTrack(tile, style);
                                                    break;
                                                default:
                                                    tile.active(active: true);
                                                    tile.type = (ushort)num;
                                                    break;
                                            }
                                            break;
                                    }
                                    break;
                            }
                        }
                        if (tile.active())
                        {
                            if (TileID.Sets.BlocksWaterDrawingBehindSelf[tile.type])
                            {
                                SquareWallFrame(i, j);
                            }
                            SquareTileFrame(i, j);
                            result = true;
                        }
                    }
                }
                return result;
            }
            public void WallFrame(int i, int j, bool resetFrame = false)
            {
                if (WorldGen.SkipFramingBecauseOfGen || i <= 0 || j <= 0 || i >= MaxTilesX - 1 || j >= MaxTilesY - 1 || this[i, j] == null)
                {
                    return;
                }
                if (this[i, j].wall >= 316)
                {
                    this[i, j].wall = 0;
                }
                WorldGen.UpdateMapTile(i, j);
                ITile tile = this[i, j];
                if (tile.wall == 0)
                {
                    tile.wallColor(0);
                    return;
                }
                int num = 0;
                if (j - 1 >= 0)
                {
                    ITile tile2 = this[i, j - 1];
                    if (tile2 != null && (tile2.wall > 0 || (tile2.active() && tile2.type == 54)))
                    {
                        num = 1;
                    }
                }
                if (i - 1 >= 0)
                {
                    ITile tile2 = this[i - 1, j];
                    if (tile2 != null && (tile2.wall > 0 || (tile2.active() && tile2.type == 54)))
                    {
                        num |= 2;
                    }
                }
                if (i + 1 <= MaxTilesX - 1)
                {
                    ITile tile2 = this[i + 1, j];
                    if (tile2 != null && (tile2.wall > 0 || (tile2.active() && tile2.type == 54)))
                    {
                        num |= 4;
                    }
                }
                if (j + 1 <= MaxTilesY - 1)
                {
                    ITile tile2 = this[i, j + 1];
                    if (tile2 != null && (tile2.wall > 0 || (tile2.active() && tile2.type == 54)))
                    {
                        num |= 8;
                    }
                }
                int num2 = 0;
                if (Main.wallLargeFrames[tile.wall] == 1)
                {
                    num2 = Framing.phlebasTileFrameNumberLookup[j % 4][i % 3] - 1;
                    tile.wallFrameNumber((byte)num2);
                }
                else if (Main.wallLargeFrames[tile.wall] == 2)
                {
                    num2 = Framing.lazureTileFrameNumberLookup[i % 2][j % 2] - 1;
                    tile.wallFrameNumber((byte)num2);
                }
                else if (resetFrame)
                {
                    num2 = WorldGen.genRand.Next(0, 3);
                    if (tile.wall == 21 && WorldGen.genRand.Next(2) == 0)
                    {
                        num2 = 2;
                    }
                    tile.wallFrameNumber((byte)num2);
                }
                else
                {
                    num2 = tile.wallFrameNumber();
                }
                if (num == 15)
                {
                    num += Framing.centerWallFrameLookup[i % 3][j % 3];
                }
                Point16 point = Framing.wallFrameLookup[num][num2];
                tile.wallFrameX(point.X);
                tile.wallFrameY(point.Y);
            }
            public void SquareWallFrame(int i, int j, bool resetFrame = true)
            {
                WallFrame(i - 1, j - 1);
                WallFrame(i - 1, j);
                WallFrame(i - 1, j + 1);
                WallFrame(i, j - 1);
                WallFrame(i, j, resetFrame);
                WallFrame(i, j + 1);
                WallFrame(i + 1, j - 1);
                WallFrame(i + 1, j);
                WallFrame(i + 1, j + 1);
            }
            private Func<ITile> GetNewTileMethod()
            {
                DynamicMethod dynamicMethod = new DynamicMethod("GetTileCollection", typeof(ITile), null);
                ILGenerator ilgenerator = dynamicMethod.GetILGenerator();
                ilgenerator.Emit(OpCodes.Newobj, typeof(Tile).GetConstructors().Single((ConstructorInfo x) => x.GetParameters().Length == 0));
                ilgenerator.Emit(OpCodes.Ret);
                return (Func<ITile>)dynamicMethod.CreateDelegate(typeof(Func<ITile>));
            }
            public ITile CreateTile() => GetNewTileMethod().Invoke();
            public bool SolidTile(int i, int j, bool noDoors = false)
            {
                try
                {
                    if (this[i, j] == null)
                    {
                        return true;
                    }
                    if (this[i, j].active() && Main.tileSolid[(int)this[i, j].type] && !Main.tileSolidTop[(int)this[i, j].type] && !this[i, j].halfBrick() && this[i, j].slope() == 0 && !this[i, j].inActive())
                    {
                        if (noDoors && this[i, j].type == 10)
                        {
                            return false;
                        }
                        return true;
                    }
                }
                catch
                {
                }
                return false;
            }
            public bool SolidTile(ITile testTile)
            {
                try
                {
                    if (testTile == null)
                    {
                        return true;
                    }
                    if (testTile.active() && Main.tileSolid[testTile.type] && !Main.tileSolidTop[testTile.type] && !testTile.halfBrick() && testTile.slope() == 0 && !testTile.inActive())
                    {
                        return true;
                    }
                }
                catch
                {
                }
                return false;
            }
            public bool SolidTile2(ITile testTile)
            {
                try
                {
                    if (testTile == null)
                    {
                        return true;
                    }
                    if (testTile.active() && Main.tileSolid[testTile.type] && !Main.tileSolidTop[testTile.type] && !testTile.halfBrick() && testTile.slope() == 0 && !testTile.inActive())
                    {
                        return true;
                    }
                }
                catch
                {
                }
                return false;
            }
            public bool SolidTile2(int i, int j)
            {
                try
                {
                    if (this[i, j] == null)
                    {
                        return true;
                    }
                    if (this[i, j].active() && Main.tileSolid[this[i, j].type] && ((TileID.Sets.Platforms[this[i, j].type] && (this[i, j].halfBrick() || this[i, j].topSlope())) || this[i, j].slope() == 0) && !this[i, j].halfBrick() && !this[i, j].inActive())
                    {
                        return true;
                    }
                }
                catch
                {
                }
                return false;
            }
            public bool CanPlaceSink(int x, int y, ushort type, int style)
            {
                if (x < 5 || x > MaxTilesX - 5 || y < 5 || y > MaxTilesY - 5)
                {
                    return false;
                }
                bool result = true;
                x--;
                y--;
                for (int i = 0; i < 2; i++)
                {
                    ITile tileSafely;
                    for (int j = 0; j < 2; j++)
                    {
                        tileSafely = GetTileSafely(x + i, y + j);
                        if (tileSafely.active())
                        {
                            result = false;
                        }
                    }
                    tileSafely = GetTileSafely(x + i, y + 2);
                    if (!tileSafely.nactive() || !SolidTile(tileSafely))
                    {
                        result = false;
                    }
                }
                return result;
            }
            public void Place1x1(int x, int y, int type, int style = 0)
            {
                ITile tile = this[x, y];
                if (this[x, y] == null)
                {
                    tile = CreateTile();
                    this[x, y] = tile;
                }
                if (this[x, y + 1] == null)
                {
                    this[x, y + 1] = CreateTile();
                }
                if (type == 324)
                {
                    if (SolidTile2(x, y + 1) || (this[x, y + 1].nactive() && Main.tileTable[this[x, y + 1].type]))
                    {
                        tile.active(active: true);
                        tile.type = (ushort)type;
                        tile.frameX = (short)(22 * WorldGen.genRand.Next(3));
                        tile.frameY = (short)(22 * style);
                    }
                }
                else if (SolidTile2(x, y + 1) && !tile.active())
                {
                    tile.active(active: true);
                    tile.type = (ushort)type;
                    switch (type)
                    {
                        case 324:
                            tile.frameX = (short)(22 * WorldGen.RollRandomSeaShellStyle());
                            tile.frameY = (short)(22 * style);
                            break;
                        case 36:
                        case 144:
                        case 239:
                            tile.frameX = (short)(style * 18);
                            tile.frameY = 0;
                            break;
                        default:
                            tile.frameY = (short)(style * 18);
                            break;
                    }
                }
            }
            public void Place1xX(int x, int y, ushort type, int style = 0)
            {
                int num = style * 18;
                int num2 = 3;
                if (type == 92)
                {
                    num2 = 6;
                }
                bool flag = true;
                for (int i = y - num2 + 1; i < y + 1; i++)
                {
                    if (this[x, i] == null)
                    {
                        this[x, i] = CreateTile();
                    }
                    if (this[x, i].active())
                    {
                        flag = false;
                    }
                    if (type == 93 && this[x, i].liquid > 0)
                    {
                        flag = false;
                    }
                }
                if (flag && SolidTile2(x, y + 1))
                {
                    for (int j = 0; j < num2; j++)
                    {
                        this[x, y - num2 + 1 + j].active(active: true);
                        this[x, y - num2 + 1 + j].frameY = (short)(j * 18 + num2 * num);
                        this[x, y - num2 + 1 + j].frameX = 0;
                        this[x, y - num2 + 1 + j].type = type;
                    }
                }
            }
            public void Place1x2(int x, int y, ushort type, int style)
            {
                short frameX = 0;
                if (type == 20)
                {
                    frameX = (short)(WorldGen.genRand.Next(3) * 18);
                }
                if (this[x, y - 1] == null)
                {
                    this[x, y - 1] = CreateTile();
                }
                if (this[x, y + 1] == null)
                {
                    this[x, y + 1] = CreateTile();
                }
                if (SolidTile2(x, y + 1) & !this[x, y - 1].active())
                {
                    short num = (short)(style * 40);
                    this[x, y - 1].active(active: true);
                    this[x, y - 1].frameY = num;
                    this[x, y - 1].frameX = frameX;
                    this[x, y - 1].type = type;
                    this[x, y].active(active: true);
                    this[x, y].frameY = (short)(num + 18);
                    this[x, y].frameX = frameX;
                    this[x, y].type = type;
                }
            }
            public void Place1x2Top(int x, int y, ushort type, int style)
            {
                short frameX = 0;
                if (this[x, y - 1] == null)
                {
                    this[x, y - 1] = CreateTile();
                }
                if (this[x, y + 1] == null)
                {
                    this[x, y + 1] = CreateTile();
                }
                if (this[x, y - 1].nactive() && Main.tileSolid[this[x, y - 1].type] && !Main.tileSolidTop[this[x, y - 1].type] && !this[x, y + 1].active())
                {
                    short num = (short)(style * 36);
                    this[x, y].active(active: true);
                    this[x, y].frameY = num;
                    this[x, y].frameX = frameX;
                    this[x, y].type = type;
                    this[x, y + 1].active(active: true);
                    this[x, y + 1].frameY = (short)(num + 18);
                    this[x, y + 1].frameX = frameX;
                    this[x, y + 1].type = type;
                }
            }
            public void Place2x1(int x, int y, ushort type, int style = 0)
            {
                if (this[x, y] == null)
                {
                    this[x, y] = CreateTile();
                }
                if (this[x + 1, y] == null)
                {
                    this[x + 1, y] = CreateTile();
                }
                if (this[x, y + 1] == null)
                {
                    this[x, y + 1] = CreateTile();
                }
                if (this[x + 1, y + 1] == null)
                {
                    this[x + 1, y + 1] = CreateTile();
                }
                bool flag = false;
                if (type != 29 && type != 103 && SolidTile2(x, y + 1) && SolidTile2(x + 1, y + 1) && !this[x, y].active() && !this[x + 1, y].active())
                {
                    flag = true;
                }
                else if ((type == 29 || type == 103) && this[x, y + 1].active() && this[x + 1, y + 1].active() && Main.tileTable[this[x, y + 1].type] && Main.tileTable[this[x + 1, y + 1].type] && !this[x, y].active() && !this[x + 1, y].active())
                {
                    flag = true;
                }
                if (flag)
                {
                    this[x, y].active(active: true);
                    this[x, y].frameY = 0;
                    this[x, y].frameX = (short)(36 * style);
                    this[x, y].type = type;
                    this[x + 1, y].active(active: true);
                    this[x + 1, y].frameY = 0;
                    this[x + 1, y].frameX = (short)(36 * style + 18);
                    this[x + 1, y].type = type;
                }
            }
            public void Place2x2(int x, int y, ushort type, int style)
            {
                if (type == 95 || type == 126)
                {
                    y++;
                }
                if (x < 5 || x > MaxTilesX - 5 || y < 5 || y > MaxTilesY - 5)
                {
                    return;
                }
                if (type == 172)
                {
                    if (!CanPlaceSink(x, y, type, style))
                    {
                        return;
                    }
                }
                else
                {
                    for (int i = x - 1; i < x + 1; i++)
                    {
                        for (int j = y - 1; j < y + 1; j++)
                        {
                            ITile tileSafely = GetTileSafely(i, j);
                            if (tileSafely.active() || (type == 98 && tileSafely.liquid > 0))
                            {
                                return;
                            }
                        }
                        switch (type)
                        {
                            case 95:
                            case 126:
                                {
                                    ITile tileSafely = GetTileSafely(i, y - 2);
                                    if (!tileSafely.nactive() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type])
                                    {
                                        return;
                                    }
                                    break;
                                }
                            default:
                                {
                                    ITile tileSafely = GetTileSafely(i, y + 1);
                                    if (!tileSafely.nactive() || (!SolidTile2(tileSafely) && !Main.tileTable[tileSafely.type]))
                                    {
                                        return;
                                    }
                                    break;
                                }
                            case 132:
                                break;
                        }
                    }
                }
                if (type == 132)
                {
                    bool flag = true;
                    if (this[x - 1, y + 1] == null)
                    {
                        this[x - 1, y + 1] = CreateTile();
                    }
                    if (this[x, y + 1] == null)
                    {
                        this[x, y + 1] = CreateTile();
                    }
                    if (!this[x - 1, y + 1].nactive() || (!SolidTile(x - 1, y + 1) && !Main.tileTable[this[x - 1, y + 1].type]))
                    {
                        flag = false;
                    }
                    if (!this[x, y + 1].nactive() || (!SolidTile(x, y + 1) && !Main.tileTable[this[x, y + 1].type]))
                    {
                        flag = false;
                    }
                    if (!flag && (this[x - 1, y - 1].wall < 1 || this[x, y - 1].wall < 1 || this[x - 1, y].wall < 1 || this[x - 1, y].wall < 1))
                    {
                        return;
                    }
                }
                x--;
                y--;
                int num = (type == 172) ? 38 : 36;
                for (int k = 0; k < 2; k++)
                {
                    for (int l = 0; l < 2; l++)
                    {
                        ITile tileSafely = this[x + k, y + l];
                        tileSafely.active(active: true);
                        tileSafely.frameX = (short)(k * 18);
                        tileSafely.frameY = (short)(style * num + l * 18);
                        tileSafely.type = type;
                    }
                }
            }
            public void Place2xX(int x, int y, ushort type, int style = 0)
            {
                int num = style * 36;
                int num2 = 0;
                int num3 = 3;
                if (type == 105 && style == 34)
                {
                    type = 349;
                    style = 0;
                    num = 0;
                }
                if (type == 105)
                {
                    int num4 = style / 55;
                    num -= 1980 * num4;
                    num2 += 54 * num4;
                }
                if (type == 104)
                {
                    num3 = 5;
                }
                if (type == 207)
                {
                    num3 = 4;
                }
                bool flag = true;
                for (int i = y - num3 + 1; i < y + 1; i++)
                {
                    if (this[x, i] == null)
                    {
                        this[x, i] = CreateTile();
                    }
                    if (this[x, i].active())
                    {
                        flag = false;
                    }
                    if (this[x + 1, i] == null)
                    {
                        this[x + 1, i] = CreateTile();
                    }
                    if (this[x + 1, i].active())
                    {
                        flag = false;
                    }
                }
                if (flag && SolidTile2(x, y + 1) && SolidTile2(x + 1, y + 1))
                {
                    for (int j = 0; j < num3; j++)
                    {
                        this[x, y - num3 + 1 + j].active(active: true);
                        this[x, y - num3 + 1 + j].frameY = (short)(num2 + j * 18);
                        this[x, y - num3 + 1 + j].frameX = (short)num;
                        this[x, y - num3 + 1 + j].type = type;
                        this[x + 1, y - num3 + 1 + j].active(active: true);
                        this[x + 1, y - num3 + 1 + j].frameY = (short)(num2 + j * 18);
                        this[x + 1, y - num3 + 1 + j].frameX = (short)(num + 18);
                        this[x + 1, y - num3 + 1 + j].type = type;
                    }
                }
            }
            public void Place2x3Wall(int x, int y, ushort type, int style)
            {
                int num = y - 1;
                bool flag = true;
                for (int i = x; i < x + 2; i++)
                {
                    for (int j = num; j < num + 3; j++)
                    {
                        if (this[i, j].active() || this[i, j].wall == 0)
                        {
                            flag = false;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    return;
                }
                int num2 = style * 36;
                int num3 = 0;
                for (int k = x; k < x + 2; k++)
                {
                    for (int l = num; l < num + 3; l++)
                    {
                        this[k, l].active(active: true);
                        this[k, l].type = type;
                        this[k, l].frameX = (short)(num2 + 18 * (k - x));
                        this[k, l].frameY = (short)(num3 + 18 * (l - num));
                    }
                }
            }
            public bool Place2x2Horizontal(int x, int y, ushort type, int Style = 0)
            {
                int num = x - 2;
                int num2 = x + 3;
                int num3 = y - 2;
                int num4 = y + 3;
                if (num < 0)
                {
                    return false;
                }
                if (num2 > MaxTilesX)
                {
                    return false;
                }
                if (num3 < 0)
                {
                    return false;
                }
                if (num4 > MaxTilesY)
                {
                    return false;
                }
                for (int i = num; i < num2; i++)
                {
                    for (int j = num3; j < num4; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                    }
                }
                int num5 = y;
                int num6 = 0;
                if (SolidTile2(x, y + 1) && SolidTile2(x + 1, y + 1))
                {
                    num5--;
                    num6 = Style;
                    if (this[x, num5].active() || this[x + 1, num5].active() || this[x, num5 + 1].active() || this[x + 1, num5 + 1].active())
                    {
                        return false;
                    }
                    int num7 = 36 * num6;
                    for (int k = 0; k < 2; k++)
                    {
                        for (int l = 0; l < 2; l++)
                        {
                            this[x + k, num5 + l].active(active: true);
                            this[x + k, num5 + l].type = type;
                            this[x + k, num5 + l].frameX = (short)(num7 + 18 * k);
                            this[x + k, num5 + l].frameY = (short)(18 * l);
                        }
                    }
                    return true;
                }
                return false;
            }
            public void Place3x4(int x, int y, ushort type, int style)
            {
                if (x < 5 || x > MaxTilesX - 5 || y < 5 || y > MaxTilesY - 5)
                {
                    return;
                }
                bool flag = true;
                for (int i = x - 1; i < x + 2; i++)
                {
                    for (int j = y - 3; j < y + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                        if (this[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (this[i, y + 1] == null)
                    {
                        this[i, y + 1] = CreateTile();
                    }
                    if (!SolidTile2(i, y + 1))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    int num = style * 54;
                    for (int k = -3; k <= 0; k++)
                    {
                        short frameY = (short)((3 + k) * 18);
                        this[x - 1, y + k].active(active: true);
                        this[x - 1, y + k].frameY = frameY;
                        this[x - 1, y + k].frameX = (short)num;
                        this[x - 1, y + k].type = type;
                        this[x, y + k].active(active: true);
                        this[x, y + k].frameY = frameY;
                        this[x, y + k].frameX = (short)(num + 18);
                        this[x, y + k].type = type;
                        this[x + 1, y + k].active(active: true);
                        this[x + 1, y + k].frameY = frameY;
                        this[x + 1, y + k].frameX = (short)(num + 36);
                        this[x + 1, y + k].type = type;
                    }
                }
            }
            public void Place5x4(int x, int y, ushort type, int style)
            {
                if (x < 5 || x > MaxTilesX - 5 || y < 5 || y > MaxTilesY - 5)
                {
                    return;
                }
                bool flag = true;
                for (int i = x - 2; i < x + 3; i++)
                {
                    for (int j = y - 3; j < y + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                        if (this[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (this[i, y + 1] == null)
                    {
                        this[i, y + 1] = CreateTile();
                    }
                    if (!SolidTile2(i, y + 1))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    int num = style * 54;
                    for (int k = -3; k <= 0; k++)
                    {
                        short frameY = (short)((3 + k) * 18);
                        this[x - 2, y + k].active(active: true);
                        this[x - 2, y + k].frameY = frameY;
                        this[x - 2, y + k].frameX = (short)(num - 36);
                        this[x - 2, y + k].type = type;
                        this[x - 1, y + k].active(active: true);
                        this[x - 1, y + k].frameY = frameY;
                        this[x - 1, y + k].frameX = (short)(num - 18);
                        this[x - 1, y + k].type = type;
                        this[x, y + k].active(active: true);
                        this[x, y + k].frameY = frameY;
                        this[x, y + k].frameX = (short)num;
                        this[x, y + k].type = type;
                        this[x + 1, y + k].active(active: true);
                        this[x + 1, y + k].frameY = frameY;
                        this[x + 1, y + k].frameX = (short)(num + 18);
                        this[x + 1, y + k].type = type;
                        this[x + 1, y + k].active(active: true);
                        this[x + 1, y + k].frameY = frameY;
                        this[x + 1, y + k].frameX = (short)(num + 36);
                        this[x + 1, y + k].type = type;
                    }
                }
            }
            public void Place3x1(int x, int y, ushort type, int style = 0)
            {
                if (x < 5 || x > MaxTilesX - 5 || y < 5 || y > MaxTilesY - 5)
                {
                    return;
                }
                bool flag = true;
                for (int i = x - 1; i < x + 2; i++)
                {
                    if (this[i, y] == null)
                    {
                        this[i, y] = CreateTile();
                    }
                    if (this[i, y].active())
                    {
                        flag = false;
                    }
                    if (this[i, y + 1] == null)
                    {
                        this[i, y + 1] = CreateTile();
                    }
                    if (!SolidTile2(i, y + 1))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    short num = (short)(54 * style);
                    this[x - 1, y].active(active: true);
                    this[x - 1, y].frameY = 0;
                    this[x - 1, y].frameX = num;
                    this[x - 1, y].type = type;
                    this[x, y].active(active: true);
                    this[x, y].frameY = 0;
                    this[x, y].frameX = (short)(num + 18);
                    this[x, y].type = type;
                    this[x + 1, y].active(active: true);
                    this[x + 1, y].frameY = 0;
                    this[x + 1, y].frameX = (short)(num + 36);
                    this[x + 1, y].type = type;
                }
            }
            public void Place3x2(int x, int y, ushort type, int style = 0)
            {
                if (x < 5 || x > MaxTilesX - 5 || y < 5 || y > MaxTilesY - 5)
                {
                    return;
                }
                bool flag = false;
                bool flag2 = true;
                if (type == 14 && style == 25)
                {
                    flag = true;
                }
                int num = y - 1;
                if (flag)
                {
                    num = y;
                }
                for (int i = x - 1; i < x + 2; i++)
                {
                    for (int j = num; j < y + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                        if (this[i, j].active())
                        {
                            flag2 = false;
                        }
                        if (type == 215 && this[i, j].liquid > 0)
                        {
                            flag2 = false;
                        }
                    }
                    if (this[i, y + 1] == null)
                    {
                        this[i, y + 1] = CreateTile();
                    }
                    switch (type)
                    {
                        default:
                            if (type != 582 && type != 619)
                            {
                                if (type == 26 && this[i, y + 1].type == 484)
                                {
                                    flag2 = false;
                                }
                                if (!SolidTile2(i, y + 1))
                                {
                                    flag2 = false;
                                }
                                break;
                            }
                            goto case 285;
                        case 285:
                        case 286:
                        case 298:
                        case 299:
                        case 310:
                        case 361:
                        case 362:
                        case 363:
                        case 364:
                            if (!SolidTile2(i, y + 1) && (!this[i, y + 1].nactive() || !Main.tileSolidTop[this[i, y + 1].type] || this[i, y + 1].frameY != 0))
                            {
                                flag2 = false;
                            }
                            break;
                    }
                }
                if (type == 88)
                {
                    if (CreateChest(x - 1, y - 1) == -1)
                    {
                        flag2 = false;
                    }
                    else if (Main.netMode == 1)
                    {
                        SendDataToPlayer(34, -1, -1, null, 2, x, y, style);
                    }
                }
                if (flag2)
                {
                    short num2 = (short)(54 * style);
                    if (flag)
                    {
                        this[x - 1, y].active(active: true);
                        this[x - 1, y].frameY = 0;
                        this[x - 1, y].frameX = num2;
                        this[x - 1, y].type = type;
                        this[x, y].active(active: true);
                        this[x, y].frameY = 0;
                        this[x, y].frameX = (short)(num2 + 18);
                        this[x, y].type = type;
                        this[x + 1, y].active(active: true);
                        this[x + 1, y].frameY = 0;
                        this[x + 1, y].frameX = (short)(num2 + 36);
                        this[x + 1, y].type = type;
                        return;
                    }
                    this[x - 1, y - 1].active(active: true);
                    this[x - 1, y - 1].frameY = 0;
                    this[x - 1, y - 1].frameX = num2;
                    this[x - 1, y - 1].type = type;
                    this[x, y - 1].active(active: true);
                    this[x, y - 1].frameY = 0;
                    this[x, y - 1].frameX = (short)(num2 + 18);
                    this[x, y - 1].type = type;
                    this[x + 1, y - 1].active(active: true);
                    this[x + 1, y - 1].frameY = 0;
                    this[x + 1, y - 1].frameX = (short)(num2 + 36);
                    this[x + 1, y - 1].type = type;
                    this[x - 1, y].active(active: true);
                    this[x - 1, y].frameY = 18;
                    this[x - 1, y].frameX = num2;
                    this[x - 1, y].type = type;
                    this[x, y].active(active: true);
                    this[x, y].frameY = 18;
                    this[x, y].frameX = (short)(num2 + 18);
                    this[x, y].type = type;
                    this[x + 1, y].active(active: true);
                    this[x + 1, y].frameY = 18;
                    this[x + 1, y].frameX = (short)(num2 + 36);
                    this[x + 1, y].type = type;
                }
            }
            public void Place3x2Wall(int x, int y, ushort type, int style)
            {
                int num = x - 1;
                bool flag = true;
                for (int i = num; i < num + 3; i++)
                {
                    for (int j = y; j < y + 2; j++)
                    {
                        if (this[i, j].active() || this[i, j].wall == 0)
                        {
                            flag = false;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    return;
                }
                int num2 = 0;
                int num3 = style * 36;
                for (int k = num; k < num + 3; k++)
                {
                    for (int l = y; l < y + 2; l++)
                    {
                        this[k, l].active(active: true);
                        this[k, l].type = type;
                        this[k, l].frameX = (short)(num2 + 18 * (k - num));
                        this[k, l].frameY = (short)(num3 + 18 * (l - y));
                    }
                }
            }
            public void Place3x3(int x, int y, ushort type, int style = 0)
            {
                bool flag = true;
                int num = 0;
                if (type == 106 || type == 212 || type == 219 || type == 220 || type == 228 || type == 231 || type == 243 || type == 247 || type == 283 || (type >= 300 && type <= 308) || type == 354 || type == 355)
                {
                    num = -2;
                    for (int i = x - 1; i < x + 2; i++)
                    {
                        for (int j = y - 2; j < y + 1; j++)
                        {
                            if (this[i, j] == null)
                            {
                                this[i, j] = CreateTile();
                            }
                            if (this[i, j].active())
                            {
                                flag = false;
                            }
                        }
                    }
                    for (int k = x - 1; k < x + 2; k++)
                    {
                        if (this[k, y + 1] == null)
                        {
                            this[k, y + 1] = CreateTile();
                        }
                        if (!SolidTile2(k, y + 1))
                        {
                            flag = false;
                            break;
                        }
                    }
                }
                else
                {
                    for (int l = x - 1; l < x + 2; l++)
                    {
                        for (int m = y; m < y + 3; m++)
                        {
                            if (this[l, m] == null)
                            {
                                this[l, m] = CreateTile();
                            }
                            if (this[l, m].active())
                            {
                                flag = false;
                            }
                        }
                    }
                    if (this[x, y - 1] == null)
                    {
                        this[x, y - 1] = CreateTile();
                    }
                    if (!this[x, y - 1].nactive() || !Main.tileSolid[this[x, y - 1].type] || Main.tileSolidTop[this[x, y - 1].type])
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    int num2 = style * 18 * 3;
                    this[x - 1, y + num].active(active: true);
                    this[x - 1, y + num].frameY = 0;
                    this[x - 1, y + num].frameX = (short)num2;
                    this[x - 1, y + num].type = type;
                    this[x, y + num].active(active: true);
                    this[x, y + num].frameY = 0;
                    this[x, y + num].frameX = (short)(num2 + 18);
                    this[x, y + num].type = type;
                    this[x + 1, y + num].active(active: true);
                    this[x + 1, y + num].frameY = 0;
                    this[x + 1, y + num].frameX = (short)(num2 + 36);
                    this[x + 1, y + num].type = type;
                    this[x - 1, y + 1 + num].active(active: true);
                    this[x - 1, y + 1 + num].frameY = 18;
                    this[x - 1, y + 1 + num].frameX = (short)num2;
                    this[x - 1, y + 1 + num].type = type;
                    this[x, y + 1 + num].active(active: true);
                    this[x, y + 1 + num].frameY = 18;
                    this[x, y + 1 + num].frameX = (short)(num2 + 18);
                    this[x, y + 1 + num].type = type;
                    this[x + 1, y + 1 + num].active(active: true);
                    this[x + 1, y + 1 + num].frameY = 18;
                    this[x + 1, y + 1 + num].frameX = (short)(num2 + 36);
                    this[x + 1, y + 1 + num].type = type;
                    this[x - 1, y + 2 + num].active(active: true);
                    this[x - 1, y + 2 + num].frameY = 36;
                    this[x - 1, y + 2 + num].frameX = (short)num2;
                    this[x - 1, y + 2 + num].type = type;
                    this[x, y + 2 + num].active(active: true);
                    this[x, y + 2 + num].frameY = 36;
                    this[x, y + 2 + num].frameX = (short)(num2 + 18);
                    this[x, y + 2 + num].type = type;
                    this[x + 1, y + 2 + num].active(active: true);
                    this[x + 1, y + 2 + num].frameY = 36;
                    this[x + 1, y + 2 + num].frameX = (short)(num2 + 36);
                    this[x + 1, y + 2 + num].type = type;
                }
            }
            public void Place3x3Wall(int x, int y, ushort type, int style)
            {
                int num = x - 1;
                int num2 = y - 1;
                bool flag = true;
                for (int i = num; i < num + 3; i++)
                {
                    for (int j = num2; j < num2 + 3; j++)
                    {
                        if (this[i, j].active() || this[i, j].wall == 0)
                        {
                            flag = false;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    return;
                }
                int num3 = 0;
                while (style > 35)
                {
                    num3++;
                    style -= 36;
                }
                int num4 = style * 54;
                int num5 = num3 * 54;
                for (int k = num; k < num + 3; k++)
                {
                    for (int l = num2; l < num2 + 3; l++)
                    {
                        this[k, l].active(active: true);
                        this[k, l].type = type;
                        this[k, l].frameX = (short)(num4 + 18 * (k - num));
                        this[k, l].frameY = (short)(num5 + 18 * (l - num2));
                    }
                }
            }
            public void Place2x2Style(int x, int y, ushort type, int style = 0)
            {
                if (x < 5 || x > MaxTilesX - 5 || y < 5 || y > MaxTilesY - 5)
                {
                    return;
                }
                short num = 0;
                if (type == 254)
                {
                    num = (short)(x % 12 / 2);
                    num = (short)(num * 36);
                }
                bool flag = true;
                for (int i = x - 1; i < x + 1; i++)
                {
                    for (int j = y - 1; j < y + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                        if (this[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (this[i, y + 1] == null)
                    {
                        this[i, y + 1] = CreateTile();
                    }
                    if (!SolidTile(i, y + 1))
                    {
                        flag = false;
                    }
                    if (type == 254 && this[i, y + 1].type != 2 && this[i, y + 1].type != 477 && this[i, y + 1].type != 492 && this[i, y + 1].type != 109)
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    short num2 = (short)(36 * style);
                    this[x - 1, y - 1].active(active: true);
                    this[x - 1, y - 1].frameY = num;
                    this[x - 1, y - 1].frameX = num2;
                    this[x - 1, y - 1].type = type;
                    this[x, y - 1].active(active: true);
                    this[x, y - 1].frameY = num;
                    this[x, y - 1].frameX = (short)(num2 + 18);
                    this[x, y - 1].type = type;
                    this[x - 1, y].active(active: true);
                    this[x - 1, y].frameY = (short)(num + 18);
                    this[x - 1, y].frameX = num2;
                    this[x - 1, y].type = type;
                    this[x, y].active(active: true);
                    this[x, y].frameY = (short)(num + 18);
                    this[x, y].frameX = (short)(num2 + 18);
                    this[x, y].type = type;
                }
            }
            public void Place6x3(int x, int y, ushort type, int direction = -1, int style = 0)
            {
                if (x < 5 || x > MaxTilesX - 5 || y < 5 || y > MaxTilesY - 5)
                {
                    return;
                }
                bool flag = true;
                for (int i = x - 3; i < x + 3; i++)
                {
                    for (int j = y - 2; j <= y; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                        if (this[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (this[i, y + 1] == null)
                    {
                        this[i, y + 1] = CreateTile();
                    }
                    if (!SolidTile2(i, y + 1) && (!this[i, y + 1].nactive() || !Main.tileSolidTop[this[i, y + 1].type] || this[i, y + 1].frameY != 0))
                    {
                        flag = false;
                    }
                }
                if (!flag)
                {
                    return;
                }
                int num = 0;
                for (int k = x - 3; k < x + 3; k++)
                {
                    int num2 = 0;
                    for (int l = y - 2; l <= y; l++)
                    {
                        this[k, l].active(active: true);
                        this[k, l].frameY = (short)num2;
                        this[k, l].frameX = (short)num;
                        this[k, l].type = type;
                        num2 += 18;
                    }
                    num += 18;
                }
            }
            public void Place6x4Wall(int x, int y, ushort type, int style)
            {
                int num = x - 2;
                int num2 = y - 2;
                bool flag = true;
                for (int i = num; i < num + 6; i++)
                {
                    for (int j = num2; j < num2 + 4; j++)
                    {
                        if (this[i, j].active() || this[i, j].wall == 0)
                        {
                            flag = false;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    return;
                }
                int num3 = 27;
                int num4 = style / num3 * 108;
                int num5 = style % num3 * 72;
                for (int k = num; k < num + 6; k++)
                {
                    for (int l = num2; l < num2 + 4; l++)
                    {
                        this[k, l].active(active: true);
                        this[k, l].type = type;
                        this[k, l].frameX = (short)(num4 + 18 * (k - num));
                        this[k, l].frameY = (short)(num5 + 18 * (l - num2));
                    }
                }
            }
            public void Place4x3Wall(int x, int y, ushort type, int style)
            {
                int num = x - 1;
                int num2 = y - 1;
                bool flag = true;
                for (int i = num; i < num + 4; i++)
                {
                    for (int j = num2; j < num2 + 3; j++)
                    {
                        if (this[i, j].active() || this[i, j].wall == 0)
                        {
                            flag = false;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    return;
                }
                int num3 = 0;
                int num4 = style * 54;
                for (int k = num; k < num + 4; k++)
                {
                    for (int l = num2; l < num2 + 3; l++)
                    {
                        this[k, l].active(active: true);
                        this[k, l].type = type;
                        this[k, l].frameX = (short)(num3 + 18 * (k - num));
                        this[k, l].frameY = (short)(num4 + 18 * (l - num2));
                    }
                }
            }
            public void Place4x2(int x, int y, ushort type, int direction = -1, int style = 0)
            {
                if (x < 5 || x > MaxTilesX - 5 || y < 5 || y > MaxTilesY - 5)
                {
                    return;
                }
                bool flag = true;
                for (int i = x - 1; i < x + 3; i++)
                {
                    for (int j = y - 1; j < y + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                        if (this[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (this[i, y + 1] == null)
                    {
                        this[i, y + 1] = CreateTile();
                    }
                    if (!SolidTile2(i, y + 1))
                    {
                        flag = false;
                    }
                }
                short num = 0;
                if (direction == 1)
                {
                    num = 72;
                }
                int num2 = 36 * style;
                if (flag)
                {
                    this[x - 1, y - 1].active(active: true);
                    this[x - 1, y - 1].frameY = (short)num2;
                    this[x - 1, y - 1].frameX = num;
                    this[x - 1, y - 1].type = type;
                    this[x, y - 1].active(active: true);
                    this[x, y - 1].frameY = (short)num2;
                    this[x, y - 1].frameX = (short)(18 + num);
                    this[x, y - 1].type = type;
                    this[x + 1, y - 1].active(active: true);
                    this[x + 1, y - 1].frameY = (short)num2;
                    this[x + 1, y - 1].frameX = (short)(36 + num);
                    this[x + 1, y - 1].type = type;
                    this[x + 2, y - 1].active(active: true);
                    this[x + 2, y - 1].frameY = (short)num2;
                    this[x + 2, y - 1].frameX = (short)(54 + num);
                    this[x + 2, y - 1].type = type;
                    this[x - 1, y].active(active: true);
                    this[x - 1, y].frameY = (short)(num2 + 18);
                    this[x - 1, y].frameX = num;
                    this[x - 1, y].type = type;
                    this[x, y].active(active: true);
                    this[x, y].frameY = (short)(num2 + 18);
                    this[x, y].frameX = (short)(18 + num);
                    this[x, y].type = type;
                    this[x + 1, y].active(active: true);
                    this[x + 1, y].frameY = (short)(num2 + 18);
                    this[x + 1, y].frameX = (short)(36 + num);
                    this[x + 1, y].type = type;
                    this[x + 2, y].active(active: true);
                    this[x + 2, y].frameY = (short)(num2 + 18);
                    this[x + 2, y].frameX = (short)(54 + num);
                    this[x + 2, y].type = type;
                }
            }
            public bool PlaceAlch(int x, int y, int style)
            {
                if (this[x, y] == null)
                {
                    this[x, y] = CreateTile();
                }
                if (this[x, y + 1] == null)
                {
                    this[x, y + 1] = CreateTile();
                }
                if (!this[x, y].active() && this[x, y + 1].nactive() && !this[x, y + 1].halfBrick() && this[x, y + 1].slope() == 0)
                {
                    bool flag = false;
                    switch (style)
                    {
                        case 0:
                            if (this[x, y + 1].type != 2 && this[x, y + 1].type != 477 && this[x, y + 1].type != 492 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380 && this[x, y + 1].type != 109)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0)
                            {
                                flag = true;
                            }
                            break;
                        case 1:
                            if (this[x, y + 1].type != 60 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0)
                            {
                                flag = true;
                            }
                            break;
                        case 2:
                            if (this[x, y + 1].type != 0 && this[x, y + 1].type != 59 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0)
                            {
                                flag = true;
                            }
                            break;
                        case 3:
                            if (this[x, y + 1].type != 203 && this[x, y + 1].type != 199 && this[x, y + 1].type != 23 && this[x, y + 1].type != 25 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0)
                            {
                                flag = true;
                            }
                            break;
                        case 4:
                            if (this[x, y + 1].type != 53 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380 && this[x, y + 1].type != 116)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0 && this[x, y].lava())
                            {
                                flag = true;
                            }
                            break;
                        case 5:
                            if (this[x, y + 1].type != 57 && this[x, y + 1].type != 78 && this[x, y + 1].type != 380)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0 && !this[x, y].lava())
                            {
                                flag = true;
                            }
                            break;
                        case 6:
                            if (this[x, y + 1].type != 78 && this[x, y + 1].type != 380 && this[x, y + 1].type != 147 && this[x, y + 1].type != 161 && this[x, y + 1].type != 163 && this[x, y + 1].type != 164 && this[x, y + 1].type != 200)
                            {
                                flag = true;
                            }
                            if (this[x, y].liquid > 0 && this[x, y].lava())
                            {
                                flag = true;
                            }
                            break;
                    }
                    if (!flag)
                    {
                        this[x, y].active(active: true);
                        this[x, y].type = 82;
                        this[x, y].frameX = (short)(18 * style);
                        this[x, y].frameY = 0;
                        return true;
                    }
                }
                return false;
            }
            public void PlaceBanner(int x, int y, ushort type, int style = 0)
            {
                int num = style * 18;
                int num2 = 0;
                if (style >= 90)
                {
                    num -= 1620;
                    num2 += 54;
                }
                if (this[x, y - 1] == null)
                {
                    this[x, y - 1] = CreateTile();
                }
                if (this[x, y] == null)
                {
                    this[x, y] = CreateTile();
                }
                if (this[x, y + 1] == null)
                {
                    this[x, y + 1] = CreateTile();
                }
                if (this[x, y + 2] == null)
                {
                    this[x, y + 2] = CreateTile();
                }
                if (this[x, y - 1].nactive() && Main.tileSolid[this[x, y - 1].type] && !Main.tileSolidTop[this[x, y - 1].type] && !this[x, y].active() && !this[x, y + 1].active() && !this[x, y + 2].active())
                {
                    this[x, y].active(active: true);
                    this[x, y].frameY = (short)num2;
                    this[x, y].frameX = (short)num;
                    this[x, y].type = type;
                    this[x, y + 1].active(active: true);
                    this[x, y + 1].frameY = (short)(num2 + 18);
                    this[x, y + 1].frameX = (short)num;
                    this[x, y + 1].type = type;
                    this[x, y + 2].active(active: true);
                    this[x, y + 2].frameY = (short)(num2 + 36);
                    this[x, y + 2].frameX = (short)num;
                    this[x, y + 2].type = type;
                }
            }
            public void PlaceCannon(int x, int y, ushort type, int style = 0)
            {
                if (x < 5 || x > MaxTilesX - 5 || y < 5 || y > MaxTilesY - 5)
                {
                    return;
                }
                bool flag = true;
                for (int i = x - 1; i < x + 3; i++)
                {
                    for (int j = y - 2; j < y + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                        if (this[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (this[i, y + 1] == null)
                    {
                        this[i, y + 1] = CreateTile();
                    }
                    if (!SolidTile2(i, y + 1) && i != x - 1 && i != x + 2)
                    {
                        flag = false;
                    }
                }
                int num = 72 * style;
                int num2 = 0;
                if (flag)
                {
                    this[x - 1, y - 2].active(active: true);
                    this[x - 1, y - 2].frameY = (short)num2;
                    this[x - 1, y - 2].frameX = (short)num;
                    this[x - 1, y - 2].type = type;
                    this[x, y - 2].active(active: true);
                    this[x, y - 2].frameY = (short)num2;
                    this[x, y - 2].frameX = (short)(18 + num);
                    this[x, y - 2].type = type;
                    this[x + 1, y - 2].active(active: true);
                    this[x + 1, y - 2].frameY = (short)num2;
                    this[x + 1, y - 2].frameX = (short)(36 + num);
                    this[x + 1, y - 2].type = type;
                    this[x + 2, y - 2].active(active: true);
                    this[x + 2, y - 2].frameY = (short)num2;
                    this[x + 2, y - 2].frameX = (short)(54 + num);
                    this[x + 2, y - 2].type = type;
                    this[x - 1, y - 1].active(active: true);
                    this[x - 1, y - 1].frameY = (short)(num2 + 18);
                    this[x - 1, y - 1].frameX = (short)num;
                    this[x - 1, y - 1].type = type;
                    this[x, y - 1].active(active: true);
                    this[x, y - 1].frameY = (short)(num2 + 18);
                    this[x, y - 1].frameX = (short)(18 + num);
                    this[x, y - 1].type = type;
                    this[x + 1, y - 1].active(active: true);
                    this[x + 1, y - 1].frameY = (short)(num2 + 18);
                    this[x + 1, y - 1].frameX = (short)(36 + num);
                    this[x + 1, y - 1].type = type;
                    this[x + 2, y - 1].active(active: true);
                    this[x + 2, y - 1].frameY = (short)(num2 + 18);
                    this[x + 2, y - 1].frameX = (short)(54 + num);
                    this[x + 2, y - 1].type = type;
                    this[x - 1, y].active(active: true);
                    this[x - 1, y].frameY = (short)(num2 + 36);
                    this[x - 1, y].frameX = (short)num;
                    this[x - 1, y].type = type;
                    this[x, y].active(active: true);
                    this[x, y].frameY = (short)(num2 + 36);
                    this[x, y].frameX = (short)(18 + num);
                    this[x, y].type = type;
                    this[x + 1, y].active(active: true);
                    this[x + 1, y].frameY = (short)(num2 + 36);
                    this[x + 1, y].frameX = (short)(36 + num);
                    this[x + 1, y].type = type;
                    this[x + 2, y].active(active: true);
                    this[x + 2, y].frameY = (short)(num2 + 36);
                    this[x + 2, y].frameX = (short)(54 + num);
                    this[x + 2, y].type = type;
                }
            }
            public void PlaceChand(int x, int y, ushort type, int style = 0)
            {
                bool flag = true;
                int num = 0;
                for (int i = x - 1; i < x + 2; i++)
                {
                    for (int j = y; j < y + 3; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                        if (this[i, j].active())
                        {
                            flag = false;
                        }
                    }
                }
                if (this[x, y - 1] == null)
                {
                    this[x, y - 1] = CreateTile();
                }
                if (!this[x, y - 1].nactive() || !Main.tileSolid[this[x, y - 1].type] || Main.tileSolidTop[this[x, y - 1].type])
                {
                    flag = false;
                }
                if (flag)
                {
                    int num2 = style / 36 * 18 * 6;
                    int num3 = style * 18 * 3;
                    this[x - 1, y + num].active(active: true);
                    this[x - 1, y + num].frameY = (short)num3;
                    this[x - 1, y + num].frameX = (short)num2;
                    this[x - 1, y + num].type = type;
                    this[x, y + num].active(active: true);
                    this[x, y + num].frameY = (short)num3;
                    this[x, y + num].frameX = (short)(num2 + 18);
                    this[x, y + num].type = type;
                    this[x + 1, y + num].active(active: true);
                    this[x + 1, y + num].frameY = (short)num3;
                    this[x + 1, y + num].frameX = (short)(num2 + 36);
                    this[x + 1, y + num].type = type;
                    this[x - 1, y + 1 + num].active(active: true);
                    this[x - 1, y + 1 + num].frameY = (short)(num3 + 18);
                    this[x - 1, y + 1 + num].frameX = (short)num2;
                    this[x - 1, y + 1 + num].type = type;
                    this[x, y + 1 + num].active(active: true);
                    this[x, y + 1 + num].frameY = (short)(num3 + 18);
                    this[x, y + 1 + num].frameX = (short)(num2 + 18);
                    this[x, y + 1 + num].type = type;
                    this[x + 1, y + 1 + num].active(active: true);
                    this[x + 1, y + 1 + num].frameY = (short)(num3 + 18);
                    this[x + 1, y + 1 + num].frameX = (short)(num2 + 36);
                    this[x + 1, y + 1 + num].type = type;
                    this[x - 1, y + 2 + num].active(active: true);
                    this[x - 1, y + 2 + num].frameY = (short)(num3 + 36);
                    this[x - 1, y + 2 + num].frameX = (short)num2;
                    this[x - 1, y + 2 + num].type = type;
                    this[x, y + 2 + num].active(active: true);
                    this[x, y + 2 + num].frameY = (short)(num3 + 36);
                    this[x, y + 2 + num].frameX = (short)(num2 + 18);
                    this[x, y + 2 + num].type = type;
                    this[x + 1, y + 2 + num].active(active: true);
                    this[x + 1, y + 2 + num].frameY = (short)(num3 + 36);
                    this[x + 1, y + 2 + num].frameX = (short)(num2 + 36);
                    this[x + 1, y + 2 + num].type = type;
                }
            }
            public bool PlacePot(int x, int y, ushort type = 28, int style = 0)
            {
                bool flag = true;
                for (int i = x; i < x + 2; i++)
                {
                    for (int j = y - 1; j < y + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                        if (this[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (this[i, y + 1] == null)
                    {
                        this[i, y + 1] = CreateTile();
                    }
                    if (!this[i, y + 1].nactive() || this[i, y + 1].halfBrick() || this[i, y + 1].slope() != 0 || !Main.tileSolid[this[i, y + 1].type])
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    int num = WorldGen.genRand.Next(3) * 36;
                    for (int k = 0; k < 2; k++)
                    {
                        for (int l = -1; l < 1; l++)
                        {
                            int num2 = k * 18 + num;
                            int num3 = (l + 1) * 18;
                            this[x + k, y + l].active(active: true);
                            this[x + k, y + l].frameX = (short)num2;
                            this[x + k, y + l].frameY = (short)(num3 + style * 36);
                            this[x + k, y + l].type = type;
                            this[x + k, y + l].halfBrick(halfBrick: false);
                        }
                    }
                    return true;
                }
                return false;
            }
            public void PlaceOnTable1x1(int x, int y, int type, int style = 0)
            {
                bool flag = false;
                if (this[x, y] == null)
                {
                    this[x, y] = CreateTile();
                }
                if (this[x, y + 1] == null)
                {
                    this[x, y + 1] = CreateTile();
                }
                if (!this[x, y].active() && this[x, y + 1].nactive() && Main.tileTable[this[x, y + 1].type])
                {
                    flag = true;
                }
                if (type == 78 && !this[x, y].active() && this[x, y + 1].nactive() && Main.tileSolid[this[x, y + 1].type] && !this[x, y + 1].halfBrick() && this[x, y + 1].slope() == 0)
                {
                    flag = true;
                }
                if (flag)
                {
                    this[x, y].active(active: true);
                    this[x, y].type = (ushort)type;
                    if (type == 33)
                    {
                        this[x, y].frameX = 0;
                        this[x, y].frameY = (short)(style * 22);
                    }
                    else
                    {
                        this[x, y].frameX = (short)(style * 18);
                        this[x, y].frameY = 0;
                    }
                    if (type == 50)
                    {
                        this[x, y].frameX = (short)(18 * WorldGen.genRand.Next(5));
                    }
                }
            }
            public void PlaceDye(int x, int y, int style)
            {
                bool flag = false;
                if (this[x, y + 1] == null || this[x, y - 1] == null)
                {
                    return;
                }
                if (style == 7)
                {
                    if (this[x, y + 1].active() && this[x, y + 1].type != 3 && this[x, y + 1].type != 51 && this[x, y + 1].type != 61 && this[x, y + 1].type != 73 && this[x, y + 1].type != 74 && this[x, y + 1].type != 184)
                    {
                        return;
                    }
                    if (SolidTile(x, y - 1) && !this[x, y + 1].active())
                    {
                        flag = true;
                    }
                }
                else
                {
                    if (this[x, y - 1].active() && this[x, y - 1].type != 3 && this[x, y - 1].type != 51 && this[x, y - 1].type != 61 && this[x, y - 1].type != 73 && this[x, y - 1].type != 74 && this[x, y - 1].type != 184)
                    {
                        return;
                    }
                    if (style == 6)
                    {
                        if (this[x, y + 1].nactive() && this[x, y + 1].type == 80 && !this[x - 1, y + 1].active() && !this[x + 1, y + 1].active())
                        {
                            flag = true;
                        }
                    }
                    else if (SolidTile(x, y + 1) && !this[x, y - 1].active())
                    {
                        switch (style)
                        {
                            case 5:
                                if (this[x, y].liquid == byte.MaxValue)
                                {
                                    flag = true;
                                }
                                break;
                            case 8:
                            case 9:
                            case 10:
                            case 11:
                                flag = true;
                                break;
                            default:
                                if (this[x, y].liquid != 0)
                                {
                                    break;
                                }
                                if (style == 3 || style == 4)
                                {
                                    if (this[x, y].wall == 0)
                                    {
                                        flag = true;
                                    }
                                }
                                else
                                {
                                    flag = true;
                                }
                                break;
                        }
                    }
                }
                if (flag)
                {
                    this[x, y].type = 227;
                    this[x, y].active(active: true);
                    this[x, y].halfBrick(halfBrick: false);
                    this[x, y].slope(0);
                    this[x, y].frameY = 0;
                    this[x, y].frameX = (short)(34 * style);
                }
            }
            public bool PlaceDoor(int i, int j, int type, int style = 0)
            {
                int num = style / 36;
                int num2 = style % 36;
                int num3 = 54 * num;
                int num4 = 54 * num2;
                try
                {
                    if (this[i, j - 2].nactive() && Main.tileSolid[this[i, j - 2].type] && SolidTile(i, j + 2))
                    {
                        this[i, j - 1].active(active: true);
                        this[i, j - 1].type = 10;
                        this[i, j - 1].frameY = (short)num4;
                        this[i, j - 1].frameX = (short)(num3 + WorldGen.genRand.Next(3) * 18);
                        this[i, j].active(active: true);
                        this[i, j].type = 10;
                        this[i, j].frameY = (short)(num4 + 18);
                        this[i, j].frameX = (short)(num3 + WorldGen.genRand.Next(3) * 18);
                        this[i, j + 1].active(active: true);
                        this[i, j + 1].type = 10;
                        this[i, j + 1].frameY = (short)(num4 + 36);
                        this[i, j + 1].frameX = (short)(num3 + WorldGen.genRand.Next(3) * 18);
                        return true;
                    }
                    return false;
                }
                catch
                {
                    return false;
                }
            }
            public void PlaceGnome(int x, int y, int style)
            {
                PlaceObject(x, y, 567, mute: false, style);
            }
            public void PlaceJunglePlant(int X2, int Y2, ushort type, int styleX, int styleY)
            {
                if (styleY > 0 || type == 236 || type == 238)
                {
                    int num = Y2;
                    if (type == 95 || type == 126)
                    {
                        num++;
                    }
                    if (X2 < 5 || X2 > MaxTilesX - 5 || num < 5 || num > MaxTilesY - 5)
                    {
                        return;
                    }
                    bool flag = true;
                    for (int i = X2 - 1; i < X2 + 1; i++)
                    {
                        for (int j = num - 1; j < num + 1; j++)
                        {
                            if (this[i, j] == null)
                            {
                                this[i, j] = CreateTile();
                            }
                            if (this[i, j].active() && this[i, j].type != 61 && this[i, j].type != 62 && this[i, j].type != 69 && this[i, j].type != 74 && (type != 236 || this[i, j].type != 233) && (type != 238 || this[i, j].type != 233) && (this[i, j].type != 185 || this[i, j].frameY != 0))
                            {
                                flag = false;
                            }
                            if (type == 98 && this[i, j].liquid > 0)
                            {
                                flag = false;
                            }
                        }
                        if (this[i, num + 1] == null)
                        {
                            this[i, num + 1] = CreateTile();
                        }
                        if (!SolidTile(i, num + 1) || this[i, num + 1].type != 60)
                        {
                            flag = false;
                        }
                    }
                    if (flag)
                    {
                        short num2 = 36;
                        if (type == 236 || type == 238)
                        {
                            num2 = 0;
                        }
                        short num3 = (short)(36 * styleX);
                        this[X2 - 1, num - 1].active(active: true);
                        this[X2 - 1, num - 1].frameY = num2;
                        this[X2 - 1, num - 1].frameX = num3;
                        this[X2 - 1, num - 1].type = type;
                        this[X2, num - 1].active(active: true);
                        this[X2, num - 1].frameY = num2;
                        this[X2, num - 1].frameX = (short)(18 + num3);
                        this[X2, num - 1].type = type;
                        this[X2 - 1, num].active(active: true);
                        this[X2 - 1, num].frameY = (short)(num2 + 18);
                        this[X2 - 1, num].frameX = num3;
                        this[X2 - 1, num].type = type;
                        this[X2, num].active(active: true);
                        this[X2, num].frameY = (short)(num2 + 18);
                        this[X2, num].frameX = (short)(18 + num3);
                        this[X2, num].type = type;
                    }
                }
                else
                {
                    if (X2 < 5 || X2 > MaxTilesX - 5 || Y2 < 5 || Y2 > MaxTilesY - 5)
                    {
                        return;
                    }
                    bool flag2 = true;
                    for (int k = X2 - 1; k < X2 + 2; k++)
                    {
                        for (int l = Y2 - 1; l < Y2 + 1; l++)
                        {
                            if (this[k, l] == null)
                            {
                                this[k, l] = CreateTile();
                            }
                            if (this[k, l].active() && this[k, l].type != 61 && this[k, l].type != 62 && this[k, l].type != 69 && this[k, l].type != 74 && (this[k, l].type != 185 || this[k, l].frameY != 0))
                            {
                                flag2 = false;
                            }
                        }
                        if (this[k, Y2 + 1] == null)
                        {
                            this[k, Y2 + 1] = CreateTile();
                        }
                        if (!SolidTile(k, Y2 + 1) || this[k, Y2 + 1].type != 60)
                        {
                            flag2 = false;
                        }
                    }
                    if (flag2)
                    {
                        short num4 = (short)(54 * styleX);
                        this[X2 - 1, Y2 - 1].active(active: true);
                        this[X2 - 1, Y2 - 1].frameY = 0;
                        this[X2 - 1, Y2 - 1].frameX = num4;
                        this[X2 - 1, Y2 - 1].type = type;
                        this[X2, Y2 - 1].active(active: true);
                        this[X2, Y2 - 1].frameY = 0;
                        this[X2, Y2 - 1].frameX = (short)(num4 + 18);
                        this[X2, Y2 - 1].type = type;
                        this[X2 + 1, Y2 - 1].active(active: true);
                        this[X2 + 1, Y2 - 1].frameY = 0;
                        this[X2 + 1, Y2 - 1].frameX = (short)(num4 + 36);
                        this[X2 + 1, Y2 - 1].type = type;
                        this[X2 - 1, Y2].active(active: true);
                        this[X2 - 1, Y2].frameY = 18;
                        this[X2 - 1, Y2].frameX = num4;
                        this[X2 - 1, Y2].type = type;
                        this[X2, Y2].active(active: true);
                        this[X2, Y2].frameY = 18;
                        this[X2, Y2].frameX = (short)(num4 + 18);
                        this[X2, Y2].type = type;
                        this[X2 + 1, Y2].active(active: true);
                        this[X2 + 1, Y2].frameY = 18;
                        this[X2 + 1, Y2].frameX = (short)(num4 + 36);
                        this[X2 + 1, Y2].type = type;
                    }
                }
            }
            public void PlaceLogicTiles(int x, int y, int type, int style = 0)
            {
                ITile tile = this[x, y];
                if (this[x, y] == null)
                {
                    tile = CreateTile();
                    this[x, y] = tile;
                }
                if (this[x, y + 1] == null)
                {
                    this[x, y + 1] = CreateTile();
                }
                if (type == 419)
                {
                    if (this[x, y + 1].active() && (this[x, y + 1].type == 419 || this[x, y + 1].type == 420))
                    {
                        tile.active(active: true);
                        tile.type = (ushort)type;
                        tile.frameX = (short)(style * 18);
                        tile.frameY = 0;
                    }
                }
                else if (!tile.active())
                {
                    tile.active(active: true);
                    tile.type = (ushort)type;
                    tile.frameX = 0;
                    tile.frameY = (short)(18 * style);
                }
            }
            public void PlaceMB(int X, int y, ushort type, int style)
            {
                int num = X + 1;
                if (num < 5 || num > MaxTilesX - 5 || y < 5 || y > MaxTilesY - 5)
                {
                    return;
                }
                bool flag = true;
                for (int i = num - 1; i < num + 1; i++)
                {
                    for (int j = y - 1; j < y + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                        if (this[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (this[i, y + 1] == null)
                    {
                        this[i, y + 1] = CreateTile();
                    }
                    if (!this[i, y + 1].active() || this[i, y + 1].halfBrick() || (!Main.tileSolid[this[i, y + 1].type] && !Main.tileTable[this[i, y + 1].type]))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    this[num - 1, y - 1].active(active: true);
                    this[num - 1, y - 1].frameY = (short)(style * 36);
                    this[num - 1, y - 1].frameX = 0;
                    this[num - 1, y - 1].type = type;
                    this[num, y - 1].active(active: true);
                    this[num, y - 1].frameY = (short)(style * 36);
                    this[num, y - 1].frameX = 18;
                    this[num, y - 1].type = type;
                    this[num - 1, y].active(active: true);
                    this[num - 1, y].frameY = (short)(style * 36 + 18);
                    this[num - 1, y].frameX = 0;
                    this[num - 1, y].type = type;
                    this[num, y].active(active: true);
                    this[num, y].frameY = (short)(style * 36 + 18);
                    this[num, y].frameX = 18;
                    this[num, y].type = type;
                }
            }
            public ITile GetTileSafely(int i, int j)
            {
                if (!InWorld(i, j))
                {
                    return CreateTile();
                }
                ITile tile = this[i, j];
                if (tile == null)
                {
                    tile = CreateTile();
                    this[i, j] = tile;
                }
                return tile;
            }
            public bool NearOtherChests(int x, int y)
            {
                for (int i = x - 25; i < x + 25; i++)
                {
                    for (int j = y - 8; j < y + 8; j++)
                    {
                        ITile tileSafely = GetTileSafely(i, j);
                        if (tileSafely.active() && TileID.Sets.BasicChest[tileSafely.type])
                        {
                            return true;
                        }
                    }
                }
                return false;
            }
            /*public int FindEmptyChest(int x, int y, int type = 21, int style = 0, int direction = 1, int alternate = 0)
            {
                int num = -1;
                if (GetRelative(x, y, out int rx, out int ry))
                {
                    for (int i = 0; i < 8000; i++)
                    {
                        Chest chest = Chest[i];
                        if (chest != null)
                        {
                            if (chest.x == rx && chest.y == ry)
                            {
                                return -1;
                            }
                        }
                        else if (num == -1)
                        {
                            num = i;
                        }
                    }
                }
                return num;
            }*/
            public int CreateChest(int X, int Y, int id = -1)
            {
                int num = id;
                if (GetRelative(X, Y, out int x, out int y))
                {
                    num = Chest.Count;
                    Chest.Add(new Chest
                    {
                        x = x,
                        y = y
                    });
                    for (int i = 0; i < 40; i++)
                    {
                        Chest[num].item[i] = new EItem();
                    }
                }
                return num;
            }
            public int PlaceChest(int x, int y, ushort type = 21, bool notNearOtherChests = false, int style = 0)
            {
                int num = -1;
                if (TileID.Sets.Boulders[this[x, y + 1].type] || TileID.Sets.Boulders[this[x + 1, y + 1].type])
                {
                    return -1;
                }
                if (CanPlace(x, y, type, style, 1, out TileObject objectData))
                {
                    bool flag = true;
                    if (notNearOtherChests && NearOtherChests(x - 1, y - 1))
                    {
                        flag = false;
                    }
                    if (flag)
                    {
                        Place(objectData);
                        num = CreateChest(objectData.xCoord, objectData.yCoord);
                    }
                }
                else
                {
                    num = -1;
                }
                return num;
            }
            public void PlaceChestDirect(int x, int y, ushort type, int style, int id)
            {
                CreateChest(x, y - 1, id);
                for (int i = 0; i <= 1; i++)
                {
                    for (int j = -1; j <= 0; j++)
                    {
                        if (this[x + i, y + j] == null)
                        {
                            this[x + i, y + j] = CreateTile();
                        }
                    }
                }
                this[x, y - 1].active(active: true);
                this[x, y - 1].frameY = 0;
                this[x, y - 1].frameX = (short)(36 * style);
                this[x, y - 1].type = type;
                this[x, y - 1].halfBrick(halfBrick: false);
                this[x + 1, y - 1].active(active: true);
                this[x + 1, y - 1].frameY = 0;
                this[x + 1, y - 1].frameX = (short)(18 + 36 * style);
                this[x + 1, y - 1].type = type;
                this[x + 1, y - 1].halfBrick(halfBrick: false);
                this[x, y].active(active: true);
                this[x, y].frameY = 18;
                this[x, y].frameX = (short)(36 * style);
                this[x, y].type = type;
                this[x, y].halfBrick(halfBrick: false);
                this[x + 1, y].active(active: true);
                this[x + 1, y].frameY = 18;
                this[x + 1, y].frameX = (short)(18 + 36 * style);
                this[x + 1, y].type = type;
                this[x + 1, y].halfBrick(halfBrick: false);
            }
            public void PlaceDresserDirect(int x, int y, ushort type, int style, int id)
            {
                CreateChest(x - 1, y - 1, id);
                for (int i = -1; i <= 1; i++)
                {
                    for (int j = -1; j <= 0; j++)
                    {
                        if (this[x + i, y + j] == null)
                        {
                            this[x + i, y + j] = CreateTile();
                        }
                    }
                }
                short num = (short)(style * 54);
                this[x - 1, y - 1].active(active: true);
                this[x - 1, y - 1].frameY = 0;
                this[x - 1, y - 1].frameX = num;
                this[x - 1, y - 1].type = type;
                this[x, y - 1].active(active: true);
                this[x, y - 1].frameY = 0;
                this[x, y - 1].frameX = (short)(num + 18);
                this[x, y - 1].type = type;
                this[x + 1, y - 1].active(active: true);
                this[x + 1, y - 1].frameY = 0;
                this[x + 1, y - 1].frameX = (short)(num + 36);
                this[x + 1, y - 1].type = type;
                this[x - 1, y].active(active: true);
                this[x - 1, y].frameY = 18;
                this[x - 1, y].frameX = num;
                this[x - 1, y].type = type;
                this[x, y].active(active: true);
                this[x, y].frameY = 18;
                this[x, y].frameX = (short)(num + 18);
                this[x, y].type = type;
                this[x + 1, y].active(active: true);
                this[x + 1, y].frameY = 18;
                this[x + 1, y].frameX = (short)(num + 36);
                this[x + 1, y].type = type;
            }
            public int UsingChest(int i)
            {
                if (Chest[i] != null)
                {
                    for (int j = 0; j < 255; j++)
                    {
                        if (Main.player[j].active && Main.player[j].chest == i)
                        {
                            return j;
                        }
                    }
                }
                return -1;
            }
            public bool PlaceSign(int x, int y, ushort type, int Style = 0)
            {
                int num = x - 2;
                int num2 = x + 3;
                int num3 = y - 2;
                int num4 = y + 3;
                if (num < 0)
                {
                    return false;
                }
                if (num2 > MaxTilesX)
                {
                    return false;
                }
                if (num3 < 0)
                {
                    return false;
                }
                if (num4 > MaxTilesY)
                {
                    return false;
                }
                for (int i = num; i < num2; i++)
                {
                    for (int j = num3; j < num4; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                    }
                }
                int num5 = x;
                int num6 = y;
                int num7 = 0;
                if (type == 55 || type == 425 || type == 510 || type == 511)
                {
                    if (SolidTile2(x, y + 1) && SolidTile2(x + 1, y + 1))
                    {
                        num6--;
                        num7 = 0;
                    }
                    else if (this[x, y - 1].nactive() && Main.tileSolid[this[x, y - 1].type] && !Main.tileSolidTop[this[x, y - 1].type] && this[x + 1, y - 1].nactive() && Main.tileSolid[this[x + 1, y - 1].type] && !Main.tileSolidTop[this[x + 1, y - 1].type])
                    {
                        num7 = 1;
                    }
                    else if (this[x - 1, y].nactive() && Main.tileSolid[this[x - 1, y].type] && !Main.tileSolidTop[this[x - 1, y].type] && !Main.tileNoAttach[this[x - 1, y].type] && this[x - 1, y + 1].nactive() && Main.tileSolid[this[x - 1, y + 1].type] && !Main.tileSolidTop[this[x - 1, y + 1].type] && !Main.tileNoAttach[this[x - 1, y + 1].type])
                    {
                        num7 = 2;
                    }
                    else if (this[x + 1, y].nactive() && Main.tileSolid[this[x + 1, y].type] && !Main.tileSolidTop[this[x + 1, y].type] && !Main.tileNoAttach[this[x + 1, y].type] && this[x + 1, y + 1].nactive() && Main.tileSolid[this[x + 1, y + 1].type] && !Main.tileSolidTop[this[x + 1, y + 1].type] && !Main.tileNoAttach[this[x + 1, y + 1].type])
                    {
                        num5--;
                        num7 = 3;
                    }
                    else
                    {
                        if (this[num5, num6].wall <= 0 || this[num5 + 1, num6].wall <= 0 || this[num5, num6 + 1].wall <= 0 || this[num5 + 1, num6 + 1].wall <= 0)
                        {
                            return false;
                        }
                        num7 = 4;
                    }
                }
                if (this[num5, num6].active() || this[num5 + 1, num6].active() || this[num5, num6 + 1].active() || this[num5 + 1, num6 + 1].active())
                {
                    return false;
                }
                int num8 = 36 * num7;
                for (int k = 0; k < 2; k++)
                {
                    for (int l = 0; l < 2; l++)
                    {
                        this[num5 + k, num6 + l].active(active: true);
                        this[num5 + k, num6 + l].type = type;
                        this[num5 + k, num6 + l].frameX = (short)(num8 + 18 * k);
                        this[num5 + k, num6 + l].frameY = (short)(18 * l);
                    }
                }
                return true;
            }
            public void PlaceSunflower(int x, int y, ushort type = 27)
            {
                bool flag = true;
                for (int i = x; i < x + 2; i++)
                {
                    for (int j = y - 3; j < y + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            this[i, j] = CreateTile();
                        }
                        if (this[i, j].active() || this[i, j].wall > 0)
                        {
                            flag = false;
                        }
                    }
                    if (this[i, y + 1] == null)
                    {
                        this[i, y + 1] = CreateTile();
                    }
                    if (!this[i, y + 1].nactive() || this[i, y + 1].halfBrick() || this[i, y + 1].slope() != 0 || (this[i, y + 1].type != 2 && this[i, y + 1].type != 109))
                    {
                        flag = false;
                    }
                }
                if (!flag)
                {
                    return;
                }
                int num = WorldGen.genRand.Next(3);
                for (int k = 0; k < 2; k++)
                {
                    for (int l = -3; l < 1; l++)
                    {
                        int num2 = k * 18 + WorldGen.genRand.Next(3) * 36;
                        if (l <= -2)
                        {
                            num2 = k * 18 + num * 36;
                        }
                        int num3 = (l + 3) * 18;
                        this[x + k, y + l].active(active: true);
                        this[x + k, y + l].frameX = (short)num2;
                        this[x + k, y + l].frameY = (short)num3;
                        this[x + k, y + l].type = type;
                    }
                }
            }
            public void PlaceWoman(int i, int j, int dir)
            {
                for (int k = i; k <= i + 1; k++)
                {
                    for (int l = j - 2; l <= j; l++)
                    {
                        if (this[k, l].active())
                        {
                            return;
                        }
                    }
                }
                if (SolidTile2(i, j + 1) && SolidTile2(i + 1, j + 1))
                {
                    byte b = 0;
                    if (dir == 1)
                    {
                        b = 36;
                    }
                    this[i, j - 2].active(active: true);
                    this[i, j - 2].frameY = 0;
                    this[i, j - 2].frameX = b;
                    this[i, j - 2].type = 269;
                    this[i, j - 1].active(active: true);
                    this[i, j - 1].frameY = 18;
                    this[i, j - 1].frameX = b;
                    this[i, j - 1].type = 269;
                    this[i, j].active(active: true);
                    this[i, j].frameY = 36;
                    this[i, j].frameX = b;
                    this[i, j].type = 269;
                    this[i + 1, j - 2].active(active: true);
                    this[i + 1, j - 2].frameY = 0;
                    this[i + 1, j - 2].frameX = (byte)(18 + b);
                    this[i + 1, j - 2].type = 269;
                    this[i + 1, j - 1].active(active: true);
                    this[i + 1, j - 1].frameY = 18;
                    this[i + 1, j - 1].frameX = (byte)(18 + b);
                    this[i + 1, j - 1].type = 269;
                    this[i + 1, j].active(active: true);
                    this[i + 1, j].frameY = 36;
                    this[i + 1, j].frameX = (byte)(18 + b);
                    this[i + 1, j].type = 269;
                }
            }
            public void PlaceMan(int i, int j, int dir)
            {
                for (int k = i; k <= i + 1; k++)
                {
                    for (int l = j - 2; l <= j; l++)
                    {
                        if (this[k, l].active())
                        {
                            return;
                        }
                    }
                }
                if (SolidTile2(i, j + 1) && SolidTile2(i + 1, j + 1))
                {
                    byte b = 0;
                    if (dir == 1)
                    {
                        b = 36;
                    }
                    this[i, j - 2].active(active: true);
                    this[i, j - 2].frameY = 0;
                    this[i, j - 2].frameX = b;
                    this[i, j - 2].type = 128;
                    this[i, j - 1].active(active: true);
                    this[i, j - 1].frameY = 18;
                    this[i, j - 1].frameX = b;
                    this[i, j - 1].type = 128;
                    this[i, j].active(active: true);
                    this[i, j].frameY = 36;
                    this[i, j].frameX = b;
                    this[i, j].type = 128;
                    this[i + 1, j - 2].active(active: true);
                    this[i + 1, j - 2].frameY = 0;
                    this[i + 1, j - 2].frameX = (byte)(18 + b);
                    this[i + 1, j - 2].type = 128;
                    this[i + 1, j - 1].active(active: true);
                    this[i + 1, j - 1].frameY = 18;
                    this[i + 1, j - 1].frameX = (byte)(18 + b);
                    this[i + 1, j - 1].type = 128;
                    this[i + 1, j].active(active: true);
                    this[i + 1, j].frameY = 36;
                    this[i + 1, j].frameX = (byte)(18 + b);
                    this[i + 1, j].type = 128;
                }
            }
            public void PlaceTight(int x, int y, bool spiders = false)
            {
                if (this[x, y - 1] == null)
                {
                    this[x, y - 1] = CreateTile();
                }
                if (this[x, y] == null)
                {
                    this[x, y] = CreateTile();
                }
                if (this[x, y + 1] == null)
                {
                    this[x, y + 1] = CreateTile();
                }
                PlaceUncheckedStalactite(x, y, WorldGen.genRand.Next(2) == 0, WorldGen.genRand.Next(3), spiders);
                if (this[x, y].type == 165)
                {
                    CheckTight(x, y);
                }
            }
            public void GetStalagtiteStyle(int x, int y, out int style, out bool fail)
            {
                style = 0;
                fail = false;
                switch (this[x, y].frameX / 54)
                {
                    default:
                        fail = true;
                        break;
                    case 0:
                        style = 7;
                        break;
                    case 1:
                        style = 0;
                        break;
                    case 4:
                        style = 1;
                        break;
                    case 5:
                        style = 2;
                        break;
                    case 6:
                        style = 3;
                        break;
                    case 7:
                        style = 4;
                        break;
                    case 8:
                        style = 5;
                        break;
                    case 9:
                        style = 6;
                        break;
                    case 10:
                        style = 8;
                        break;
                    case 11:
                        style = 9;
                        break;
                    case 12:
                        style = 10;
                        break;
                }
            }
            public void GetDesiredStalagtiteStyle(int x, int j, out bool fail, out int desiredStyle, out int height, out int y)
            {
                fail = false;
                desiredStyle = 0;
                height = 1;
                y = j;
                if (this[x, y].frameY == 72)
                {
                    desiredStyle = this[x, y - 1].type;
                }
                else if (this[x, y].frameY == 90)
                {
                    desiredStyle = this[x, y + 1].type;
                }
                else if (this[x, y].frameY >= 36)
                {
                    if (this[x, y].frameY == 54)
                    {
                        y--;
                    }
                    height = 2;
                    desiredStyle = this[x, y + 2].type;
                }
                else
                {
                    if (this[x, y].frameY == 18)
                    {
                        y--;
                    }
                    height = 2;
                    desiredStyle = this[x, y - 1].type;
                }
                if (desiredStyle == 1 || Main.tileMoss[desiredStyle])
                {
                    desiredStyle = 0;
                }
                else if (desiredStyle == 200)
                {
                    desiredStyle = 10;
                }
                else if (desiredStyle == 164)
                {
                    desiredStyle = 8;
                }
                else if (desiredStyle == 163)
                {
                    desiredStyle = 9;
                }
                else if (desiredStyle == 117 || desiredStyle == 402 || desiredStyle == 403)
                {
                    desiredStyle = 1;
                }
                else if (desiredStyle == 25 || desiredStyle == 398 || desiredStyle == 400)
                {
                    desiredStyle = 2;
                }
                else if (desiredStyle == 203 || desiredStyle == 399 || desiredStyle == 401)
                {
                    desiredStyle = 3;
                }
                else if (desiredStyle == 396 || desiredStyle == 397)
                {
                    desiredStyle = 4;
                }
                else if (desiredStyle == 367)
                {
                    desiredStyle = 6;
                }
                else if (desiredStyle == 368)
                {
                    desiredStyle = 5;
                }
                else if (desiredStyle == 161 || desiredStyle == 147)
                {
                    desiredStyle = 7;
                }
                else
                {
                    fail = true;
                }
            }
            public bool UpdateStalagtiteStyle(int x, int j)
            {
                if (Main.netMode == 1)
                {
                    return true;
                }
                if (this[x, j] == null)
                {
                    return true;
                }
                GetStalagtiteStyle(x, j, out int style, out bool fail);
                if (fail)
                {
                    return false;
                }
                GetDesiredStalagtiteStyle(x, j, out bool fail2, out int desiredStyle, out int height, out int y);
                if (fail2)
                {
                    return false;
                }
                if (style != desiredStyle)
                {
                    int num = WorldGen.genRand.Next(3) * 18;
                    switch (desiredStyle)
                    {
                        case 0:
                            num += 54;
                            break;
                        case 1:
                            num += 216;
                            break;
                        case 2:
                            num += 270;
                            break;
                        case 3:
                            num += 324;
                            break;
                        case 4:
                            num += 378;
                            break;
                        case 5:
                            num += 432;
                            break;
                        case 6:
                            num += 486;
                            break;
                        case 8:
                            num += 540;
                            break;
                        case 9:
                            num += 594;
                            break;
                        case 10:
                            num += 648;
                            break;
                    }
                    for (int i = y; i < y + height; i++)
                    {
                        this[x, i].frameX = (short)num;
                    }
                    if (Main.netMode == 2)
                    {
                        SendTileSquare(-1, x, y, 2);
                    }
                }
                return true;
            }
            bool destroyObject;
            public void CheckTight(int x, int j)
            {
                if (this[x, j] == null)
                {
                    return;
                }
                int num = j;
                if (this[x, num].frameY == 72)
                {
                    if (this[x, num - 1] == null)
                    {
                        this[x, num - 1] = CreateTile();
                    }
                    if (this[x, num] == null)
                    {
                        this[x, num] = CreateTile();
                    }
                    if (this[x, num + 1] == null)
                    {
                        this[x, num + 1] = CreateTile();
                    }
                    bool flag = false;
                    if (!SolidTile(x, num - 1))
                    {
                        flag = true;
                    }
                    if (!flag && !UpdateStalagtiteStyle(x, num))
                    {
                        flag = true;
                    }
                    if (flag)
                    {
                        destroyObject = true;
                        if (this[x, num].type == this[x, j].type)
                        {
                            KillTile(x, num);
                        }
                        destroyObject = false;
                    }
                    return;
                }
                if (this[x, num].frameY == 90)
                {
                    if (this[x, num - 1] == null)
                    {
                        this[x, num - 1] = CreateTile();
                    }
                    if (this[x, num] == null)
                    {
                        this[x, num] = CreateTile();
                    }
                    if (this[x, num + 1] == null)
                    {
                        this[x, num + 1] = CreateTile();
                    }
                    bool flag2 = false;
                    if (!SolidTile(x, num + 1))
                    {
                        flag2 = true;
                    }
                    if (!flag2 && !UpdateStalagtiteStyle(x, num))
                    {
                        flag2 = true;
                    }
                    if (flag2)
                    {
                        destroyObject = true;
                        if (this[x, num].type == this[x, j].type)
                        {
                            KillTile(x, num);
                        }
                        destroyObject = false;
                    }
                    return;
                }
                if (this[x, num].frameY >= 36)
                {
                    if (this[x, num].frameY == 54)
                    {
                        num--;
                    }
                    if (this[x, num] == null)
                    {
                        this[x, num] = CreateTile();
                    }
                    if (this[x, num + 1] == null)
                    {
                        this[x, num + 1] = CreateTile();
                    }
                    if (this[x, num + 2] == null)
                    {
                        this[x, num + 2] = CreateTile();
                    }
                    bool flag3 = false;
                    if (!SolidTile(x, num + 2))
                    {
                        flag3 = true;
                    }
                    if (this[x, num + 1].type != this[x, num].type)
                    {
                        flag3 = true;
                    }
                    if (this[x, num + 1].frameX != this[x, num].frameX)
                    {
                        flag3 = true;
                    }
                    if (!flag3 && !UpdateStalagtiteStyle(x, num))
                    {
                        flag3 = true;
                    }
                    if (flag3)
                    {
                        destroyObject = true;
                        if (this[x, num].type == this[x, j].type)
                        {
                            KillTile(x, num);
                        }
                        if (this[x, num + 1].type == this[x, j].type)
                        {
                            KillTile(x, num + 1);
                        }
                        destroyObject = false;
                    }
                    return;
                }
                if (this[x, num].frameY == 18)
                {
                    num--;
                }
                if (this[x, num - 1] == null)
                {
                    this[x, num - 1] = CreateTile();
                }
                if (this[x, num] == null)
                {
                    this[x, num] = CreateTile();
                }
                if (this[x, num + 1] == null)
                {
                    this[x, num + 1] = CreateTile();
                }
                bool flag4 = false;
                if (!SolidTile(x, num - 1))
                {
                    flag4 = true;
                }
                if (this[x, num + 1].type != this[x, num].type)
                {
                    flag4 = true;
                }
                if (this[x, num + 1].frameX != this[x, num].frameX)
                {
                    flag4 = true;
                }
                if (!flag4 && !UpdateStalagtiteStyle(x, num))
                {
                    flag4 = true;
                }
                if (flag4)
                {
                    destroyObject = true;
                    if (this[x, num].type == this[x, j].type)
                    {
                        KillTile(x, num);
                    }
                    if (this[x, num + 1].type == this[x, j].type)
                    {
                        KillTile(x, num + 1);
                    }
                    destroyObject = false;
                }
            }
            public void PlaceUncheckedStalactite(int x, int y, bool preferSmall, int variation, bool spiders)
            {
                ushort type = 165;
                variation = Terraria.Utils.Clamp(variation, 0, 2);
                if (SolidTile(x, y - 1) && !this[x, y].active() && !this[x, y + 1].active())
                {
                    if (spiders)
                    {
                        int num = 108 + variation * 18;
                        this[x, y].type = type;
                        this[x, y].active(active: true);
                        this[x, y].frameX = (short)num;
                        this[x, y].frameY = 0;
                        this[x, y + 1].type = type;
                        this[x, y + 1].active(active: true);
                        this[x, y + 1].frameX = (short)num;
                        this[x, y + 1].frameY = 18;
                        return;
                    }
                    if (this[x, y - 1].type == 147 || this[x, y - 1].type == 161 || this[x, y - 1].type == 163 || this[x, y - 1].type == 164 || this[x, y - 1].type == 200)
                    {
                        if (preferSmall)
                        {
                            int num2 = variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num2;
                            this[x, y].frameY = 72;
                        }
                        else
                        {
                            int num3 = variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num3;
                            this[x, y].frameY = 0;
                            this[x, y + 1].type = type;
                            this[x, y + 1].active(active: true);
                            this[x, y + 1].frameX = (short)num3;
                            this[x, y + 1].frameY = 18;
                        }
                    }
                    if (this[x, y - 1].type == 1 || Main.tileMoss[this[x, y - 1].type] || this[x, y - 1].type == 117 || this[x, y - 1].type == 25 || this[x, y - 1].type == 203)
                    {
                        if (preferSmall)
                        {
                            int num4 = 54 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num4;
                            this[x, y].frameY = 72;
                        }
                        else
                        {
                            int num5 = 54 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num5;
                            this[x, y].frameY = 0;
                            this[x, y + 1].type = type;
                            this[x, y + 1].active(active: true);
                            this[x, y + 1].frameX = (short)num5;
                            this[x, y + 1].frameY = 18;
                        }
                    }
                    if (this[x, y - 1].type == 225)
                    {
                        int num6 = 162 + variation * 18;
                        this[x, y].type = type;
                        this[x, y].active(active: true);
                        this[x, y].frameX = (short)num6;
                        this[x, y].frameY = 72;
                    }
                    if (this[x, y - 1].type == 396 || this[x, y - 1].type == 397)
                    {
                        if (preferSmall)
                        {
                            int num7 = 378 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num7;
                            this[x, y].frameY = 72;
                        }
                        else
                        {
                            int num8 = 378 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num8;
                            this[x, y].frameY = 0;
                            this[x, y + 1].type = type;
                            this[x, y + 1].active(active: true);
                            this[x, y + 1].frameX = (short)num8;
                            this[x, y + 1].frameY = 18;
                        }
                    }
                    if (this[x, y - 1].type == 368)
                    {
                        if (preferSmall)
                        {
                            int num9 = 432 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num9;
                            this[x, y].frameY = 72;
                        }
                        else
                        {
                            int num10 = 432 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num10;
                            this[x, y].frameY = 0;
                            this[x, y + 1].type = type;
                            this[x, y + 1].active(active: true);
                            this[x, y + 1].frameX = (short)num10;
                            this[x, y + 1].frameY = 18;
                        }
                    }
                    if (this[x, y - 1].type == 367)
                    {
                        if (preferSmall)
                        {
                            int num11 = 486 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num11;
                            this[x, y].frameY = 72;
                        }
                        else
                        {
                            int num12 = 486 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num12;
                            this[x, y].frameY = 0;
                            this[x, y + 1].type = type;
                            this[x, y + 1].active(active: true);
                            this[x, y + 1].frameX = (short)num12;
                            this[x, y + 1].frameY = 18;
                        }
                    }
                }
                else
                {
                    if (spiders || !SolidTile(x, y + 1) || this[x, y].active() || this[x, y - 1].active())
                    {
                        return;
                    }
                    if (this[x, y + 1].type == 1 || Main.tileMoss[this[x, y + 1].type] || this[x, y - 1].type == 117 || this[x, y - 1].type == 25 || this[x, y - 1].type == 203)
                    {
                        if (preferSmall)
                        {
                            int num13 = 54 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num13;
                            this[x, y].frameY = 90;
                        }
                        else
                        {
                            int num14 = 54 + variation * 18;
                            this[x, y - 1].type = type;
                            this[x, y - 1].active(active: true);
                            this[x, y - 1].frameX = (short)num14;
                            this[x, y - 1].frameY = 36;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num14;
                            this[x, y].frameY = 54;
                        }
                    }
                    if (this[x, y + 1].type == 225)
                    {
                        int num15 = 162 + variation * 18;
                        this[x, y].type = type;
                        this[x, y].active(active: true);
                        this[x, y].frameX = (short)num15;
                        this[x, y].frameY = 90;
                    }
                    if (this[x, y + 1].type == 396 || this[x, y + 1].type == 397)
                    {
                        if (preferSmall)
                        {
                            int num16 = 378 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num16;
                            this[x, y].frameY = 90;
                        }
                        else
                        {
                            int num17 = 378 + variation * 18;
                            this[x, y - 1].type = type;
                            this[x, y - 1].active(active: true);
                            this[x, y - 1].frameX = (short)num17;
                            this[x, y - 1].frameY = 36;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num17;
                            this[x, y].frameY = 54;
                        }
                    }
                    if (this[x, y + 1].type == 368)
                    {
                        if (preferSmall)
                        {
                            int num18 = 432 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num18;
                            this[x, y].frameY = 90;
                        }
                        else
                        {
                            int num19 = 432 + variation * 18;
                            this[x, y - 1].type = type;
                            this[x, y - 1].active(active: true);
                            this[x, y - 1].frameX = (short)num19;
                            this[x, y - 1].frameY = 36;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num19;
                            this[x, y].frameY = 54;
                        }
                    }
                    if (this[x, y + 1].type == 367)
                    {
                        if (preferSmall)
                        {
                            int num20 = 486 + variation * 18;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num20;
                            this[x, y].frameY = 90;
                        }
                        else
                        {
                            int num21 = 486 + variation * 18;
                            this[x, y - 1].type = type;
                            this[x, y - 1].active(active: true);
                            this[x, y - 1].frameX = (short)num21;
                            this[x, y - 1].frameY = 36;
                            this[x, y].type = type;
                            this[x, y].active(active: true);
                            this[x, y].frameX = (short)num21;
                            this[x, y].frameY = 54;
                        }
                    }
                }
            }
            public bool PlaceObject(int x, int y, int type, bool mute = false, int style = 0, int alternate = 0, int random = -1, int direction = -1)
            {
                if (type >= 623)
                {
                    return false;
                }
                if (!CanPlace(x, y, type, style, direction, out TileObject objectData))
                {
                    return false;
                }
                objectData.random = random;
                if (Place(objectData) && !mute)
                {
                    SquareTileFrame(x, y);
                }
                return true;
            }
            public bool Place(TileObject toBePlaced)
            {
                TileObjectData tileData = TileObjectData.GetTileData(toBePlaced.type, toBePlaced.style, toBePlaced.alternate);
                if (tileData == null)
                {
                    return false;
                }
                if (tileData.HookPlaceOverride.hook != null)
                {
                    int arg;
                    int arg2;
                    if (tileData.HookPlaceOverride.processedCoordinates)
                    {
                        arg = toBePlaced.xCoord;
                        arg2 = toBePlaced.yCoord;
                    }
                    else
                    {
                        arg = toBePlaced.xCoord + tileData.Origin.X;
                        arg2 = toBePlaced.yCoord + tileData.Origin.Y;
                    }
                    if (tileData.HookPlaceOverride.hook(arg, arg2, toBePlaced.type, toBePlaced.style, 1, toBePlaced.alternate) == tileData.HookPlaceOverride.badReturn)
                    {
                        return false;
                    }
                }
                else
                {
                    ushort num = (ushort)toBePlaced.type;
                    int num2 = 0;
                    int num3 = 0;
                    int num4 = tileData.CalculatePlacementStyle(toBePlaced.style, toBePlaced.alternate, toBePlaced.random);
                    int num5 = 0;
                    if (tileData.StyleWrapLimit > 0)
                    {
                        num5 = num4 / tileData.StyleWrapLimit * tileData.StyleLineSkip;
                        num4 %= tileData.StyleWrapLimit;
                    }
                    if (tileData.StyleHorizontal)
                    {
                        num2 = tileData.CoordinateFullWidth * num4;
                        num3 = tileData.CoordinateFullHeight * num5;
                    }
                    else
                    {
                        num2 = tileData.CoordinateFullWidth * num5;
                        num3 = tileData.CoordinateFullHeight * num4;
                    }
                    int num6 = toBePlaced.xCoord;
                    int num7 = toBePlaced.yCoord;
                    for (int i = 0; i < tileData.Width; i++)
                    {
                        for (int j = 0; j < tileData.Height; j++)
                        {
                            ITile tileSafely = GetTileSafely(num6 + i, num7 + j);
                            if (tileSafely.active() && tileSafely.type != 484 && (Main.tileCut[tileSafely.type] || TileID.Sets.BreakableWhenPlacing[tileSafely.type]))
                            {
                                KillTile(num6 + i, num7 + j);
                            }
                        }
                    }
                    for (int k = 0; k < tileData.Width; k++)
                    {
                        int num8 = num2 + k * (tileData.CoordinateWidth + tileData.CoordinatePadding);
                        int num9 = num3;
                        for (int l = 0; l < tileData.Height; l++)
                        {
                            ITile tileSafely2 = GetTileSafely(num6 + k, num7 + l);
                            if (!tileSafely2.active())
                            {
                                tileSafely2.active(active: true);
                                tileSafely2.frameX = (short)num8;
                                tileSafely2.frameY = (short)num9;
                                tileSafely2.type = num;
                            }
                            num9 += tileData.CoordinateHeights[l] + tileData.CoordinatePadding;
                        }
                    }
                }
                if (tileData.FlattenAnchors)
                {
                    AnchorData anchorBottom = tileData.AnchorBottom;
                    if (anchorBottom.tileCount != 0 && (anchorBottom.type & AnchorType.SolidTile) == AnchorType.SolidTile)
                    {
                        int num10 = toBePlaced.xCoord + anchorBottom.checkStart;
                        int j2 = toBePlaced.yCoord + tileData.Height;
                        for (int m = 0; m < anchorBottom.tileCount; m++)
                        {
                            ITile tileSafely3 = GetTileSafely(num10 + m, j2);
                            if (Main.tileSolid[tileSafely3.type] && !Main.tileSolidTop[tileSafely3.type] && tileSafely3.blockType() != 0)
                            {
                                SlopeTile(num10 + m, j2);
                            }
                        }
                    }
                    anchorBottom = tileData.AnchorTop;
                    if (anchorBottom.tileCount != 0 && (anchorBottom.type & AnchorType.SolidTile) == AnchorType.SolidTile)
                    {
                        int num11 = toBePlaced.xCoord + anchorBottom.checkStart;
                        int j3 = toBePlaced.yCoord - 1;
                        for (int n = 0; n < anchorBottom.tileCount; n++)
                        {
                            ITile tileSafely4 = GetTileSafely(num11 + n, j3);
                            if (Main.tileSolid[tileSafely4.type] && !Main.tileSolidTop[tileSafely4.type] && tileSafely4.blockType() != 0)
                            {
                                SlopeTile(num11 + n, j3);
                            }
                        }
                    }
                    anchorBottom = tileData.AnchorRight;
                    if (anchorBottom.tileCount != 0 && (anchorBottom.type & AnchorType.SolidTile) == AnchorType.SolidTile)
                    {
                        int i2 = toBePlaced.xCoord + tileData.Width;
                        int num12 = toBePlaced.yCoord + anchorBottom.checkStart;
                        for (int num13 = 0; num13 < anchorBottom.tileCount; num13++)
                        {
                            ITile tileSafely5 = GetTileSafely(i2, num12 + num13);
                            if (Main.tileSolid[tileSafely5.type] && !Main.tileSolidTop[tileSafely5.type] && tileSafely5.blockType() != 0)
                            {
                                SlopeTile(i2, num12 + num13);
                            }
                        }
                    }
                    anchorBottom = tileData.AnchorLeft;
                    if (anchorBottom.tileCount != 0 && (anchorBottom.type & AnchorType.SolidTile) == AnchorType.SolidTile)
                    {
                        int i3 = toBePlaced.xCoord - 1;
                        int num14 = toBePlaced.yCoord + anchorBottom.checkStart;
                        for (int num15 = 0; num15 < anchorBottom.tileCount; num15++)
                        {
                            ITile tileSafely6 = GetTileSafely(i3, num14 + num15);
                            if (Main.tileSolid[tileSafely6.type] && !Main.tileSolidTop[tileSafely6.type] && tileSafely6.blockType() != 0)
                            {
                                SlopeTile(i3, num14 + num15);
                            }
                        }
                    }
                }
                return true;
            }
            public TileObjectPreviewData objectPreview = new TileObjectPreviewData();
            public bool CanPlace(int x, int y, int type, int style, int dir, out TileObject objectData, bool onlyCheck = false)
            {
                if (objectPreview == null) objectPreview = new TileObjectPreviewData();
                TileObjectData tileData = TileObjectData.GetTileData(type, style);
                objectData = TileObject.Empty;
                if (tileData == null)
                {
                    return false;
                }
                int num = x - tileData.Origin.X;
                int num2 = y - tileData.Origin.Y;
                if (num < 0 || num + tileData.Width >= MaxTilesX || num2 < 0 || num2 + tileData.Height >= MaxTilesY)
                {
                    return false;
                }
                bool flag = tileData.RandomStyleRange > 0;
                if (TileObjectPreviewData.placementCache == null)
                {
                    TileObjectPreviewData.placementCache = new TileObjectPreviewData();
                }
                TileObjectPreviewData.placementCache.Reset();
                int num3 = 0;
                if (tileData.AlternatesCount != 0)
                {
                    num3 = tileData.AlternatesCount;
                }
                float num4 = -1f;
                float num5 = -1f;
                int num6 = 0;
                TileObjectData tileObjectData = null;
                int num7 = -1;
                while (num7 < num3)
                {
                    num7++;
                    TileObjectData tileData2 = TileObjectData.GetTileData(type, style, num7);
                    if (tileData2.Direction != 0 && ((tileData2.Direction == TileObjectDirection.PlaceLeft && dir == 1) || (tileData2.Direction == TileObjectDirection.PlaceRight && dir == -1)))
                    {
                        continue;
                    }
                    int num8 = x - tileData2.Origin.X;
                    int num9 = y - tileData2.Origin.Y;
                    if (num8 < 5 || num8 + tileData2.Width > MaxTilesX - 5 || num9 < 5 || num9 + tileData2.Height > MaxTilesY - 5)
                    {
                        return false;
                    }
                    Rectangle rectangle = new Rectangle(0, 0, tileData2.Width, tileData2.Height);
                    int num10 = 0;
                    int num11 = 0;
                    if (tileData2.AnchorTop.tileCount != 0)
                    {
                        if (rectangle.Y == 0)
                        {
                            rectangle.Y = -1;
                            rectangle.Height++;
                            num11++;
                        }
                        int checkStart = tileData2.AnchorTop.checkStart;
                        if (checkStart < rectangle.X)
                        {
                            rectangle.Width += rectangle.X - checkStart;
                            num10 += rectangle.X - checkStart;
                            rectangle.X = checkStart;
                        }
                        int num12 = checkStart + tileData2.AnchorTop.tileCount - 1;
                        int num13 = rectangle.X + rectangle.Width - 1;
                        if (num12 > num13)
                        {
                            rectangle.Width += num12 - num13;
                        }
                    }
                    if (tileData2.AnchorBottom.tileCount != 0)
                    {
                        if (rectangle.Y + rectangle.Height == tileData2.Height)
                        {
                            rectangle.Height++;
                        }
                        int checkStart2 = tileData2.AnchorBottom.checkStart;
                        if (checkStart2 < rectangle.X)
                        {
                            rectangle.Width += rectangle.X - checkStart2;
                            num10 += rectangle.X - checkStart2;
                            rectangle.X = checkStart2;
                        }
                        int num14 = checkStart2 + tileData2.AnchorBottom.tileCount - 1;
                        int num15 = rectangle.X + rectangle.Width - 1;
                        if (num14 > num15)
                        {
                            rectangle.Width += num14 - num15;
                        }
                    }
                    if (tileData2.AnchorLeft.tileCount != 0)
                    {
                        if (rectangle.X == 0)
                        {
                            rectangle.X = -1;
                            rectangle.Width++;
                            num10++;
                        }
                        int num16 = tileData2.AnchorLeft.checkStart;
                        if ((tileData2.AnchorLeft.type & AnchorType.Tree) == AnchorType.Tree)
                        {
                            num16--;
                        }
                        if (num16 < rectangle.Y)
                        {
                            rectangle.Width += rectangle.Y - num16;
                            num11 += rectangle.Y - num16;
                            rectangle.Y = num16;
                        }
                        int num17 = num16 + tileData2.AnchorLeft.tileCount - 1;
                        if ((tileData2.AnchorLeft.type & AnchorType.Tree) == AnchorType.Tree)
                        {
                            num17 += 2;
                        }
                        int num18 = rectangle.Y + rectangle.Height - 1;
                        if (num17 > num18)
                        {
                            rectangle.Height += num17 - num18;
                        }
                    }
                    if (tileData2.AnchorRight.tileCount != 0)
                    {
                        if (rectangle.X + rectangle.Width == tileData2.Width)
                        {
                            rectangle.Width++;
                        }
                        int num19 = tileData2.AnchorLeft.checkStart;
                        if ((tileData2.AnchorRight.type & AnchorType.Tree) == AnchorType.Tree)
                        {
                            num19--;
                        }
                        if (num19 < rectangle.Y)
                        {
                            rectangle.Width += rectangle.Y - num19;
                            num11 += rectangle.Y - num19;
                            rectangle.Y = num19;
                        }
                        int num20 = num19 + tileData2.AnchorRight.tileCount - 1;
                        if ((tileData2.AnchorRight.type & AnchorType.Tree) == AnchorType.Tree)
                        {
                            num20 += 2;
                        }
                        int num21 = rectangle.Y + rectangle.Height - 1;
                        if (num20 > num21)
                        {
                            rectangle.Height += num20 - num21;
                        }
                    }
                    if (onlyCheck)
                    {
                        objectPreview.Reset();
                        objectPreview.Active = true;
                        objectPreview.Type = (ushort)type;
                        objectPreview.Style = (short)style;
                        objectPreview.Alternate = num7;
                        objectPreview.Size = new Point16(rectangle.Width, rectangle.Height);
                        objectPreview.ObjectStart = new Point16(num10, num11);
                        objectPreview.Coordinates = new Point16(num8 - num10, num9 - num11);
                    }
                    float num22 = 0f;
                    float num23 = tileData2.Width * tileData2.Height;
                    float num24 = 0f;
                    float num25 = 0f;
                    for (int i = 0; i < tileData2.Width; i++)
                    {
                        for (int j = 0; j < tileData2.Height; j++)
                        {
                            ITile tileSafely = GetTileSafely(num8 + i, num9 + j);
                            bool flag2 = !tileData2.LiquidPlace(tileSafely);
                            bool flag3 = false;
                            if (tileData2.AnchorWall)
                            {
                                num25 += 1f;
                                if (!tileData2.isValidWallAnchor(tileSafely.wall))
                                {
                                    flag3 = true;
                                }
                                else
                                {
                                    num24 += 1f;
                                }
                            }
                            bool flag4 = false;
                            if (tileSafely.active() && (!Main.tileCut[tileSafely.type] || tileSafely.type == 484) && !TileID.Sets.BreakableWhenPlacing[tileSafely.type])
                            {
                                flag4 = true;
                            }
                            if (flag4 || flag2 || flag3)
                            {
                                if (onlyCheck)
                                {
                                    objectPreview[i + num10, j + num11] = 2;
                                }
                                continue;
                            }
                            if (onlyCheck)
                            {
                                objectPreview[i + num10, j + num11] = 1;
                            }
                            num22 += 1f;
                        }
                    }
                    AnchorData anchorBottom = tileData2.AnchorBottom;
                    if (anchorBottom.tileCount != 0)
                    {
                        num25 += (float)anchorBottom.tileCount;
                        int height = tileData2.Height;
                        for (int k = 0; k < anchorBottom.tileCount; k++)
                        {
                            int num26 = anchorBottom.checkStart + k;
                            ITile tileSafely = GetTileSafely(num8 + num26, num9 + height);
                            bool flag5 = false;
                            if (tileSafely.nactive())
                            {
                                if ((anchorBottom.type & AnchorType.SolidTile) == AnchorType.SolidTile && Main.tileSolid[tileSafely.type] && !Main.tileSolidTop[tileSafely.type] && !Main.tileNoAttach[tileSafely.type] && (tileData2.FlattenAnchors || tileSafely.blockType() == 0))
                                {
                                    flag5 = tileData2.isValidTileAnchor(tileSafely.type);
                                }
                                if (!flag5 && ((anchorBottom.type & AnchorType.SolidWithTop) == AnchorType.SolidWithTop || (anchorBottom.type & AnchorType.Table) == AnchorType.Table))
                                {
                                    if (TileID.Sets.Platforms[tileSafely.type])
                                    {
                                        _ = tileSafely.frameX / TileObjectData.PlatformFrameWidth();
                                        if (!tileSafely.halfBrick() && WorldGen.PlatformProperTopFrame(tileSafely.frameX))
                                        {
                                            flag5 = true;
                                        }
                                    }
                                    else if (Main.tileSolid[tileSafely.type] && Main.tileSolidTop[tileSafely.type])
                                    {
                                        flag5 = true;
                                    }
                                }
                                if (!flag5 && (anchorBottom.type & AnchorType.Table) == AnchorType.Table && !TileID.Sets.Platforms[tileSafely.type] && Main.tileTable[tileSafely.type] && tileSafely.blockType() == 0)
                                {
                                    flag5 = true;
                                }
                                if (!flag5 && (anchorBottom.type & AnchorType.SolidSide) == AnchorType.SolidSide && Main.tileSolid[tileSafely.type] && !Main.tileSolidTop[tileSafely.type])
                                {
                                    int num27 = tileSafely.blockType();
                                    if ((uint)(num27 - 4) <= 1u)
                                    {
                                        flag5 = tileData2.isValidTileAnchor(tileSafely.type);
                                    }
                                }
                                if (!flag5 && (anchorBottom.type & AnchorType.AlternateTile) == AnchorType.AlternateTile && tileData2.isValidAlternateAnchor(tileSafely.type))
                                {
                                    flag5 = true;
                                }
                            }
                            else if (!flag5 && (anchorBottom.type & AnchorType.EmptyTile) == AnchorType.EmptyTile)
                            {
                                flag5 = true;
                            }
                            if (!flag5)
                            {
                                if (onlyCheck)
                                {
                                    objectPreview[num26 + num10, height + num11] = 2;
                                }
                                continue;
                            }
                            if (onlyCheck)
                            {
                                objectPreview[num26 + num10, height + num11] = 1;
                            }
                            num24 += 1f;
                        }
                    }
                    anchorBottom = tileData2.AnchorTop;
                    if (anchorBottom.tileCount != 0)
                    {
                        num25 += (float)anchorBottom.tileCount;
                        int num28 = -1;
                        for (int l = 0; l < anchorBottom.tileCount; l++)
                        {
                            int num29 = anchorBottom.checkStart + l;
                            ITile tileSafely = GetTileSafely(num8 + num29, num9 + num28);
                            bool flag6 = false;
                            if (tileSafely.nactive())
                            {
                                if (Main.tileSolid[tileSafely.type] && !Main.tileSolidTop[tileSafely.type] && !Main.tileNoAttach[tileSafely.type] && (tileData2.FlattenAnchors || tileSafely.blockType() == 0))
                                {
                                    flag6 = tileData2.isValidTileAnchor(tileSafely.type);
                                }
                                if (!flag6 && (anchorBottom.type & AnchorType.SolidBottom) == AnchorType.SolidBottom && ((Main.tileSolid[tileSafely.type] && (!Main.tileSolidTop[tileSafely.type] || (TileID.Sets.Platforms[tileSafely.type] && (tileSafely.halfBrick() || tileSafely.topSlope())))) || tileSafely.halfBrick() || tileSafely.topSlope()) && !TileID.Sets.NotReallySolid[tileSafely.type] && !tileSafely.bottomSlope())
                                {
                                    flag6 = tileData2.isValidTileAnchor(tileSafely.type);
                                }
                                if (!flag6 && (anchorBottom.type & AnchorType.SolidSide) == AnchorType.SolidSide && Main.tileSolid[tileSafely.type] && !Main.tileSolidTop[tileSafely.type])
                                {
                                    int num27 = tileSafely.blockType();
                                    if ((uint)(num27 - 2) <= 1u)
                                    {
                                        flag6 = tileData2.isValidTileAnchor(tileSafely.type);
                                    }
                                }
                                if (!flag6 && (anchorBottom.type & AnchorType.AlternateTile) == AnchorType.AlternateTile && tileData2.isValidAlternateAnchor(tileSafely.type))
                                {
                                    flag6 = true;
                                }
                            }
                            else if (!flag6 && (anchorBottom.type & AnchorType.EmptyTile) == AnchorType.EmptyTile)
                            {
                                flag6 = true;
                            }
                            if (!flag6)
                            {
                                if (onlyCheck)
                                {
                                    objectPreview[num29 + num10, num28 + num11] = 2;
                                }
                                continue;
                            }
                            if (onlyCheck)
                            {
                                objectPreview[num29 + num10, num28 + num11] = 1;
                            }
                            num24 += 1f;
                        }
                    }
                    anchorBottom = tileData2.AnchorRight;
                    if (anchorBottom.tileCount != 0)
                    {
                        num25 += (float)anchorBottom.tileCount;
                        int width = tileData2.Width;
                        for (int m = 0; m < anchorBottom.tileCount; m++)
                        {
                            int num30 = anchorBottom.checkStart + m;
                            ITile tileSafely = GetTileSafely(num8 + width, num9 + num30);
                            bool flag7 = false;
                            if (tileSafely.nactive())
                            {
                                if (Main.tileSolid[tileSafely.type] && !Main.tileSolidTop[tileSafely.type] && !Main.tileNoAttach[tileSafely.type] && (tileData2.FlattenAnchors || tileSafely.blockType() == 0))
                                {
                                    flag7 = tileData2.isValidTileAnchor(tileSafely.type);
                                }
                                if (!flag7 && (anchorBottom.type & AnchorType.SolidSide) == AnchorType.SolidSide && Main.tileSolid[tileSafely.type] && !Main.tileSolidTop[tileSafely.type])
                                {
                                    int num27 = tileSafely.blockType();
                                    if (num27 == 2 || num27 == 4)
                                    {
                                        flag7 = tileData2.isValidTileAnchor(tileSafely.type);
                                    }
                                }
                                if (!flag7 && (anchorBottom.type & AnchorType.Tree) == AnchorType.Tree && TileID.Sets.IsATreeTrunk[tileSafely.type])
                                {
                                    flag7 = true;
                                    if (m == 0)
                                    {
                                        num25 += 1f;
                                        ITile tileSafely2 = GetTileSafely(num8 + width, num9 + num30 - 1);
                                        if (tileSafely2.nactive() && TileID.Sets.IsATreeTrunk[tileSafely2.type])
                                        {
                                            num24 += 1f;
                                            if (onlyCheck)
                                            {
                                                objectPreview[width + num10, num30 + num11 - 1] = 1;
                                            }
                                        }
                                        else if (onlyCheck)
                                        {
                                            objectPreview[width + num10, num30 + num11 - 1] = 2;
                                        }
                                    }
                                    if (m == anchorBottom.tileCount - 1)
                                    {
                                        num25 += 1f;
                                        ITile tileSafely3 = GetTileSafely(num8 + width, num9 + num30 + 1);
                                        if (tileSafely3.nactive() && TileID.Sets.IsATreeTrunk[tileSafely3.type])
                                        {
                                            num24 += 1f;
                                            if (onlyCheck)
                                            {
                                                objectPreview[width + num10, num30 + num11 + 1] = 1;
                                            }
                                        }
                                        else if (onlyCheck)
                                        {
                                            objectPreview[width + num10, num30 + num11 + 1] = 2;
                                        }
                                    }
                                }
                                if (!flag7 && (anchorBottom.type & AnchorType.AlternateTile) == AnchorType.AlternateTile && tileData2.isValidAlternateAnchor(tileSafely.type))
                                {
                                    flag7 = true;
                                }
                            }
                            else if (!flag7 && (anchorBottom.type & AnchorType.EmptyTile) == AnchorType.EmptyTile)
                            {
                                flag7 = true;
                            }
                            if (!flag7)
                            {
                                if (onlyCheck)
                                {
                                    objectPreview[width + num10, num30 + num11] = 2;
                                }
                                continue;
                            }
                            if (onlyCheck)
                            {
                                objectPreview[width + num10, num30 + num11] = 1;
                            }
                            num24 += 1f;
                        }
                    }
                    anchorBottom = tileData2.AnchorLeft;
                    if (anchorBottom.tileCount != 0)
                    {
                        num25 += (float)anchorBottom.tileCount;
                        int num31 = -1;
                        for (int n = 0; n < anchorBottom.tileCount; n++)
                        {
                            int num32 = anchorBottom.checkStart + n;
                            ITile tileSafely = GetTileSafely(num8 + num31, num9 + num32);
                            bool flag8 = false;
                            if (tileSafely.nactive())
                            {
                                if (Main.tileSolid[tileSafely.type] && !Main.tileSolidTop[tileSafely.type] && !Main.tileNoAttach[tileSafely.type] && (tileData2.FlattenAnchors || tileSafely.blockType() == 0))
                                {
                                    flag8 = tileData2.isValidTileAnchor(tileSafely.type);
                                }
                                if (!flag8 && (anchorBottom.type & AnchorType.SolidSide) == AnchorType.SolidSide && Main.tileSolid[tileSafely.type] && !Main.tileSolidTop[tileSafely.type])
                                {
                                    int num27 = tileSafely.blockType();
                                    if (num27 == 3 || num27 == 5)
                                    {
                                        flag8 = tileData2.isValidTileAnchor(tileSafely.type);
                                    }
                                }
                                if (!flag8 && (anchorBottom.type & AnchorType.Tree) == AnchorType.Tree && TileID.Sets.IsATreeTrunk[tileSafely.type])
                                {
                                    flag8 = true;
                                    if (n == 0)
                                    {
                                        num25 += 1f;
                                        ITile tileSafely4 = GetTileSafely(num8 + num31, num9 + num32 - 1);
                                        if (tileSafely4.nactive() && TileID.Sets.IsATreeTrunk[tileSafely4.type])
                                        {
                                            num24 += 1f;
                                            if (onlyCheck)
                                            {
                                                objectPreview[num31 + num10, num32 + num11 - 1] = 1;
                                            }
                                        }
                                        else if (onlyCheck)
                                        {
                                            objectPreview[num31 + num10, num32 + num11 - 1] = 2;
                                        }
                                    }
                                    if (n == anchorBottom.tileCount - 1)
                                    {
                                        num25 += 1f;
                                        ITile tileSafely5 = GetTileSafely(num8 + num31, num9 + num32 + 1);
                                        if (tileSafely5.nactive() && TileID.Sets.IsATreeTrunk[tileSafely5.type])
                                        {
                                            num24 += 1f;
                                            if (onlyCheck)
                                            {
                                                objectPreview[num31 + num10, num32 + num11 + 1] = 1;
                                            }
                                        }
                                        else if (onlyCheck)
                                        {
                                            objectPreview[num31 + num10, num32 + num11 + 1] = 2;
                                        }
                                    }
                                }
                                if (!flag8 && (anchorBottom.type & AnchorType.AlternateTile) == AnchorType.AlternateTile && tileData2.isValidAlternateAnchor(tileSafely.type))
                                {
                                    flag8 = true;
                                }
                            }
                            else if (!flag8 && (anchorBottom.type & AnchorType.EmptyTile) == AnchorType.EmptyTile)
                            {
                                flag8 = true;
                            }
                            if (!flag8)
                            {
                                if (onlyCheck)
                                {
                                    objectPreview[num31 + num10, num32 + num11] = 2;
                                }
                                continue;
                            }
                            if (onlyCheck)
                            {
                                objectPreview[num31 + num10, num32 + num11] = 1;
                            }
                            num24 += 1f;
                        }
                    }
                    if (tileData2.HookCheckIfCanPlace.hook != null)
                    {
                        if (tileData2.HookCheckIfCanPlace.processedCoordinates)
                        {
                            _ = tileData2.Origin;
                            _ = tileData2.Origin;
                        }
                        if (tileData2.HookCheckIfCanPlace.hook(x, y, type, style, dir, num7) == tileData2.HookCheckIfCanPlace.badReturn && tileData2.HookCheckIfCanPlace.badResponse == 0)
                        {
                            num24 = 0f;
                            num22 = 0f;
                            objectPreview.AllInvalid();
                        }
                    }
                    float num33 = num24 / num25;
                    float num34 = num22 / num23;
                    if (num34 == 1f && num25 == 0f)
                    {
                        num23 = 1f;
                        num25 = 1f;
                        num33 = 1f;
                        num34 = 1f;
                    }
                    if (num33 == 1f && num34 == 1f)
                    {
                        num4 = 1f;
                        num5 = 1f;
                        num6 = num7;
                        tileObjectData = tileData2;
                        break;
                    }
                    if (num33 > num4 || (num33 == num4 && num34 > num5))
                    {
                        TileObjectPreviewData.placementCache.CopyFrom(objectPreview);
                        num4 = num33;
                        num5 = num34;
                        tileObjectData = tileData2;
                        num6 = num7;
                    }
                }
                int num35 = -1;
                if (flag)
                {
                    if (TileObjectPreviewData.randomCache == null)
                    {
                        TileObjectPreviewData.randomCache = new TileObjectPreviewData();
                    }
                    bool flag9 = false;
                    if (TileObjectPreviewData.randomCache.Type == type)
                    {
                        Point16 coordinates = TileObjectPreviewData.randomCache.Coordinates;
                        Point16 objectStart = TileObjectPreviewData.randomCache.ObjectStart;
                        int num36 = coordinates.X + objectStart.X;
                        int num37 = coordinates.Y + objectStart.Y;
                        int num38 = x - tileData.Origin.X;
                        int num39 = y - tileData.Origin.Y;
                        if (num36 != num38 || num37 != num39)
                        {
                            flag9 = true;
                        }
                    }
                    else
                    {
                        flag9 = true;
                    }
                    num35 = ((!flag9) ? TileObjectPreviewData.randomCache.Random : Main.rand.Next(tileData.RandomStyleRange));
                }
                if (onlyCheck)
                {
                    if (num4 != 1f || num5 != 1f)
                    {
                        objectPreview.CopyFrom(TileObjectPreviewData.placementCache);
                        num7 = num6;
                    }
                    objectPreview.Random = num35;
                    if (tileData.RandomStyleRange > 0)
                    {
                        TileObjectPreviewData.randomCache.CopyFrom(objectPreview);
                    }
                }
                if (!onlyCheck)
                {
                    objectData.xCoord = x - tileObjectData.Origin.X;
                    objectData.yCoord = y - tileObjectData.Origin.Y;
                    objectData.type = type;
                    objectData.style = style;
                    objectData.alternate = num7;
                    objectData.random = num35;
                }
                if (num4 == 1f)
                {
                    return num5 == 1f;
                }
                return false;
            }
            public bool PlaceLilyPad(int x, int j)
            {
                int num = j;
                if (x < 50 || x > MaxTilesX - 50 || num < 50 || num > MaxTilesY - 50)
                {
                    return false;
                }
                if (this[x, num].active() || this[x, num].liquid == 0 || this[x, num].liquidType() != 0)
                {
                    return false;
                }
                while (this[x, num].liquid > 0 && num > 50)
                {
                    num--;
                }
                num++;
                if (this[x, num].active() || this[x, num - 1].active() || this[x, num].liquid == 0 || this[x, num].liquidType() != 0)
                {
                    return false;
                }
                if (this[x, num].wall != 0 && this[x, num].wall != 15 && this[x, num].wall != 70 && (this[x, num].wall < 63 || this[x, num].wall > 68))
                {
                    return false;
                }
                int num2 = 5;
                int num3 = 0;
                for (int i = x - num2; i <= x + num2; i++)
                {
                    for (int k = num - num2; k <= num + num2; k++)
                    {
                        if (this[i, k].active() && this[i, k].type == 518)
                        {
                            num3++;
                        }
                    }
                }
                if (num3 > 3)
                {
                    return false;
                }
                int l;
                for (l = num; (!this[x, l].active() || !Main.tileSolid[this[x, l].type] || Main.tileSolidTop[this[x, l].type]) && l < MaxTilesY - 50; l++)
                {
                    if (this[x, l].active() && this[x, l].type == 519)
                    {
                        return false;
                    }
                }
                int num4 = 12;
                if (l - num > num4)
                {
                    return false;
                }
                if (l - num < 3)
                {
                    return false;
                }
                int type = this[x, l].type;
                int num5 = -1;
                if (type == 2 || type == 477)
                {
                    num5 = 0;
                }
                if (type == 109 || type == 109 || type == 116)
                {
                    num5 = 18;
                }
                if (type == 60)
                {
                    num5 = 36;
                }
                if (num5 < 0)
                {
                    return false;
                }
                this[x, num].active(active: true);
                this[x, num].type = 518;
                if (WorldGen.genRand.Next(2) == 0)
                {
                    this[x, num].frameX = (short)(18 * WorldGen.genRand.Next(3));
                }
                else if (WorldGen.genRand.Next(15) == 0)
                {
                    this[x, num].frameX = (short)(18 * WorldGen.genRand.Next(18));
                }
                else
                {
                    int num6 = MaxTilesX / 5;
                    if (x < num6)
                    {
                        this[x, num].frameX = (short)(18 * WorldGen.genRand.Next(6, 9));
                    }
                    else if (x < num6 * 2)
                    {
                        this[x, num].frameX = (short)(18 * WorldGen.genRand.Next(9, 12));
                    }
                    else if (x < num6 * 3)
                    {
                        this[x, num].frameX = (short)(18 * WorldGen.genRand.Next(3, 6));
                    }
                    else if (x < num6 * 4)
                    {
                        this[x, num].frameX = (short)(18 * WorldGen.genRand.Next(15, 18));
                    }
                    else
                    {
                        this[x, num].frameX = (short)(18 * WorldGen.genRand.Next(12, 15));
                    }
                }
                this[x, num].frameY = (short)num5;
                this[x, num].halfBrick(halfBrick: false);
                this[x, num].slope(0);
                SquareTileFrame(x, num);
                return true;
            }
            public Point PlaceCatTail(int x, int j)
            {
                int num = j;
                Point result = new Point(-1, -1);
                if (x < 50 || x > MaxTilesX - 50 || num < 50 || num > MaxTilesY - 50)
                {
                    return result;
                }
                if ((this[x, num].active() && this[x, num].type != 71) || this[x, num].liquid == 0 || this[x, num].liquidType() != 0)
                {
                    return result;
                }
                while (this[x, num].liquid > 0 && num > 50)
                {
                    num--;
                }
                num++;
                if (this[x, num].active() || this[x, num - 1].active() || this[x, num].liquid == 0 || this[x, num].liquidType() != 0)
                {
                    return result;
                }
                if (this[x, num].wall != 0 && this[x, num].wall != 80 && this[x, num].wall != 81 && this[x, num].wall != 69 && (this[x, num].wall < 63 || this[x, num].wall > 68))
                {
                    return result;
                }
                int num2 = 7;
                int num3 = 0;
                for (int i = x - num2; i <= x + num2; i++)
                {
                    for (int k = num - num2; k <= num + num2; k++)
                    {
                        if (this[i, k].active() && this[i, k].type == 519)
                        {
                            num3++;
                            break;
                        }
                    }
                }
                if (num3 > 3)
                {
                    return result;
                }
                int l;
                for (l = num; (!this[x, l].active() || !Main.tileSolid[this[x, l].type] || Main.tileSolidTop[this[x, l].type]) && l < MaxTilesY - 50; l++)
                {
                    if (this[x, l].active() && this[x, l].type != 71)
                    {
                        return result;
                    }
                }
                int num4 = WorldGen.catTailDistance - 1;
                if (l - num > num4)
                {
                    return result;
                }
                if (l - num < 2)
                {
                    return result;
                }
                int type = this[x, l].type;
                if (!this[x, l].nactive())
                {
                    return result;
                }
                int num5 = -1;
                switch (type)
                {
                    case 2:
                    case 477:
                        num5 = 0;
                        break;
                    case 53:
                        if (x < WorldGen.beachDistance || x > MaxTilesX - WorldGen.beachDistance)
                        {
                            return result;
                        }
                        num5 = 18;
                        break;
                    case 199:
                    case 234:
                        num5 = 54;
                        break;
                    case 23:
                    case 112:
                        num5 = 72;
                        break;
                    case 70:
                        num5 = 90;
                        break;
                }
                if (num5 < 0)
                {
                    return result;
                }
                if (this[x, l].topSlope() && WorldGen.gen && WorldGen.genRand.Next(3) != 0)
                {
                    this[x, l].slope(0);
                }
                else if (this[x, l].topSlope() || this[x, l].halfBrick())
                {
                    return result;
                }
                num = l - 1;
                this[x, num].active(active: true);
                this[x, num].type = 519;
                this[x, num].frameX = 0;
                this[x, num].frameY = (short)num5;
                this[x, num].halfBrick(halfBrick: false);
                this[x, num].slope(0);
                SquareTileFrame(x, num);
                return new Point(x, num);
            }
            public void GrowCatTail(int x, int j)
            {
                if (Main.netMode == 1)
                {
                    return;
                }
                int num = j;
                while (this[x, num].liquid > 0 && num > 50)
                {
                    num--;
                }
                num++;
                int i;
                for (i = num; (!this[x, i].active() || !Main.tileSolid[this[x, i].type] || Main.tileSolidTop[this[x, i].type]) && i < MaxTilesY - 50; i++)
                {
                }
                num = i - 1;
                while (this[x, num].active() && this[x, num].type == 519)
                {
                    num--;
                }
                num++;
                if (this[x, num].frameX == 90 && this[x, num - 1].active() && Main.tileCut[this[x, num - 1].type])
                {
                    KillTile(x, num - 1);
                    if (Main.netMode == 2)
                    {
                        SendDataToPlayer(17, -1, -1, null, 0, x, num - 1);
                    }
                }
                if (this[x, num - 1].active())
                {
                    return;
                }
                if (this[x, num].frameX == 0)
                {
                    this[x, num].frameX = 18;
                    SquareTileFrame(x, num);
                    if (Main.netMode == 2)
                    {
                        SendTileSquare(-1, x, num, 2);
                    }
                }
                else if (this[x, num].frameX == 18)
                {
                    this[x, num].frameX = (short)(18 * WorldGen.genRand.Next(2, 5));
                    this[x, num - 1].active(active: true);
                    this[x, num - 1].type = 519;
                    this[x, num - 1].frameX = 90;
                    this[x, num - 1].frameY = this[x, num].frameY;
                    this[x, num - 1].halfBrick(halfBrick: false);
                    this[x, num - 1].slope(0);
                    SquareTileFrame(x, num);
                    if (Main.netMode == 2)
                    {
                        SendTileSquare(-1, x, num, 2);
                    }
                }
                else if (this[x, num].frameX == 90)
                {
                    if (this[x, num - 1].liquid == 0)
                    {
                        if (!this[x, num - 2].active() && (this[x, num].liquid > 0 || this[x, num + 1].liquid > 0 || this[x, num + 2].liquid > 0) && WorldGen.genRand.Next(3) == 0)
                        {
                            this[x, num].frameX = 108;
                            this[x, num - 1].active(active: true);
                            this[x, num - 1].type = 519;
                            this[x, num - 1].frameX = 90;
                            this[x, num - 1].frameY = this[x, num].frameY;
                            this[x, num - 1].halfBrick(halfBrick: false);
                            this[x, num - 1].slope(0);
                            SquareTileFrame(x, num);
                        }
                        else
                        {
                            int num2 = WorldGen.genRand.Next(3);
                            this[x, num].frameX = (short)(126 + num2 * 18);
                            this[x, num - 1].active(active: true);
                            this[x, num - 1].type = 519;
                            this[x, num - 1].frameX = (short)(180 + num2 * 18);
                            this[x, num - 1].frameY = this[x, num].frameY;
                            this[x, num - 1].halfBrick(halfBrick: false);
                            this[x, num - 1].slope(0);
                            SquareTileFrame(x, num);
                        }
                    }
                    else
                    {
                        this[x, num].frameX = 108;
                        this[x, num - 1].active(active: true);
                        this[x, num - 1].type = 519;
                        this[x, num - 1].frameX = 90;
                        this[x, num - 1].frameY = this[x, num].frameY;
                        this[x, num - 1].halfBrick(halfBrick: false);
                        this[x, num - 1].slope(0);
                        SquareTileFrame(x, num);
                    }
                }
                SquareTileFrame(x, num - 1);
                if (Main.netMode == 2)
                {
                    SendTileSquare(-1, x, num, 2);
                }
            }
            public bool SeaOatWaterCheck(int x, int y)
            {
                int num = 45;
                int num2 = 20;
                int num3 = 20;
                int num5 = num + 1;
                int num6 = 0;
                bool flag = false;
                if (x <= WorldGen.beachDistance || x >= MaxTilesX - WorldGen.beachDistance)
                {
                    flag = true;
                    num = 65;
                    num2 += 5;
                }
                for (int i = x - num; i <= x + num; i++)
                {
                    for (int j = y - num2; j <= y + num2; j++)
                    {
                        if (InWorld(i, j) && !SolidTile(i, j) && this[i, j].liquid > 0)
                        {
                            num6 += this[i, j].liquid;
                            int num7 = Math.Abs(i - x);
                            if (num7 < num5)
                            {
                                num5 = num7;
                            }
                        }
                    }
                }
                if (num6 / 255 >= num3)
                {
                    if (flag)
                    {
                        return false;
                    }
                    return true;
                }
                if (flag)
                {
                    return true;
                }
                return false;
            }
            public bool PlantSeaOat(int x, int y)
            {
                if (this[x, y].wall > 0 || this[x, y].active() || this[x, y].liquid > 0 || !SolidTileAllowBottomSlope(x, y + 1) || !TileID.Sets.Conversion.Sand[this[x, y + 1].type])
                {
                    return false;
                }
                if (!SeaOatWaterCheck(x, y))
                {
                    return false;
                }
                this[x, y].active(active: true);
                this[x, y].slope(0);
                this[x, y].halfBrick(halfBrick: false);
                this[x, y].type = 529;
                this[x, y].frameX = (short)(WorldGen.genRand.Next(5) * 18);
                int num = 0;
                this[x, y].frameY = (short)(num * 34);
                if (Main.netMode == 2)
                {
                    SendTileSquare(-1, x, y, 1);
                }
                return true;
            }
            public int GetWaterDepth(int x, int y)
            {
                int num = y;
                while (!SolidTile(x, num))
                {
                    num++;
                    if (num > MaxTilesY - 1)
                    {
                        return 0;
                    }
                }
                num--;
                int num2 = num;
                while (this[x, num2].liquid > 0 && !SolidTile(x, num2))
                {
                    num2--;
                }
                return num - num2;
            }
            public int CountGrowingPlantTiles(int x, int y, int range, int type)
            {
                int num = 0;
                for (int i = x - range; i <= x + range; i++)
                {
                    for (int j = y - range * 3; j <= y + range * 3; j++)
                    {
                        if (this[i, j].active() && this[i, j].type == type)
                        {
                            num++;
                        }
                    }
                }
                return num;
            }
            public bool PlaceBamboo(int x, int y)
            {
                int num = 2;
                int num2 = 5;
                int num3 = WorldGen.genRand.Next(1, 21);
                if (this[x, y].wall > 0)
                {
                    return false;
                }
                ITile tile = this[x, y + 1];
                if (tile.type == 571 || tile.type == 60)
                {
                    int waterDepth = GetWaterDepth(x, y);
                    if (waterDepth < num || waterDepth > num2)
                    {
                        return false;
                    }
                    int num4 = CountGrowingPlantTiles(x, y, 5, 571);
                    int i = 1;
                    if (tile.type == 571)
                    {
                        for (; !SolidTile(x, y + i); i++)
                        {
                        }
                        if (i + num4 / WorldGen.genRand.Next(1, 21) > num3)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        num4 += 25;
                    }
                    num4 += i * 2;
                    if (num4 > WorldGen.genRand.Next(40, 61))
                    {
                        return false;
                    }
                    ITile tile2 = this[x, y];
                    tile2.active(active: true);
                    tile2.type = 571;
                    tile2.frameX = 0;
                    tile2.frameY = 0;
                    tile2.slope(0);
                    tile2.halfBrick(halfBrick: false);
                    SquareTileFrame(x, y);
                    return true;
                }
                return false;
            }
            public void PlaceXmasTree(int x, int y, ushort type = 171)
            {
                bool flag = true;
                int num = x - 1;
                int num2 = y - 7;
                for (int i = num; i < num + 4; i++)
                {
                    for (int j = num2; j < num2 + 8; j++)
                    {
                        if (this[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (i > num && i < num + 3 && !SolidTile(i, num2 + 8))
                    {
                        flag = false;
                    }
                }
                if (!flag)
                {
                    return;
                }
                int num3 = 0;
                for (int k = num; k < num + 4; k++)
                {
                    int num4 = 0;
                    for (int l = num2; l < num2 + 8; l++)
                    {
                        this[k, l].active(active: true);
                        if (num3 == 0 && num4 == 0)
                        {
                            this[k, l].frameX = 10;
                            this[k, l].frameY = 0;
                        }
                        else
                        {
                            this[k, l].frameX = (short)num3;
                            this[k, l].frameY = (short)num4;
                        }
                        this[k, l].type = type;
                        this[k, l].active(active: true);
                        num4++;
                    }
                    num3++;
                }
            }
            public bool CanUnderwaterPlantGrowHere(ushort type, int x, int y, bool ignoreSelf)
            {
                if (!InWorld(x, y, 50))
                {
                    return false;
                }
                ITile tileSafely = GetTileSafely(x, y);
                if (!ignoreSelf && tileSafely.active())
                {
                    return false;
                }
                for (int i = 0; i < 3; i++)
                {
                    tileSafely = GetTileSafely(x, y - i);
                    if (tileSafely.liquid == 0 || tileSafely.liquidType() != 0)
                    {
                        return false;
                    }
                }
                ITile tileSafely2 = GetTileSafely(x, y + 1);
                if (!tileSafely2.nactive())
                {
                    return false;
                }
                if (!TileID.Sets.Conversion.Sand[tileSafely2.type] && type != tileSafely2.type)
                {
                    return false;
                }
                tileSafely = GetTileSafely(x, y);
                ushort wall = tileSafely.wall;
                if (wall != 0 && (uint)(wall - 63) > 6u && (uint)(wall - 80) > 1u)
                {
                    return false;
                }
                return true;
            }
            public void PlaceUnderwaterPlant(ushort type, int x, int y)
            {
                if (CanUnderwaterPlantGrowHere(type, x, y, ignoreSelf: false))
                {
                    ITile tileSafely = GetTileSafely(x, y + 1);
                    tileSafely.slope(0);
                    tileSafely.halfBrick(halfBrick: false);
                    ITile tileSafely2 = GetTileSafely(x, y);
                    tileSafely2.active(active: true);
                    tileSafely2.type = type;
                    tileSafely2.frameX = 0;
                    tileSafely2.frameY = 0;
                    tileSafely2.slope(0);
                    tileSafely2.halfBrick(halfBrick: false);
                    SquareTileFrame(x, y);
                }
            }
            public bool SolidTileAllowBottomSlope(int i, int j)
            {
                try
                {
                    ITile tile = this[i, j];
                    if (tile == null)
                    {
                        return true;
                    }
                    if (tile.active() && (Main.tileSolid[tile.type] || Main.tileSolidTop[tile.type]) && (!tile.topSlope() || (TileID.Sets.Platforms[tile.type] && PlatformProperTopFrame(tile.frameX))) && !tile.halfBrick() && !tile.inActive())
                    {
                        return true;
                    }
                }
                catch
                {
                }
                return false;
            }
            public bool PlatformProperTopFrame(short frameX)
            {
                int num = frameX / TileObjectData.PlatformFrameWidth();
                if ((num < 0 || num > 7) && (num < 12 || num > 16))
                {
                    if (num >= 25)
                    {
                        return num <= 26;
                    }
                    return false;
                }
                return true;
            }
            public bool IsFitToPlaceFlowerIn(int x, int y, int typeAttemptedToPlace)
            {
                if (y < 1 || y > MaxTilesY - 1)
                {
                    return false;
                }
                ITile tile = this[x, y + 1];
                if (tile.active() && tile.slope() == 0 && !tile.halfBrick())
                {
                    if (((tile.type != 2 && tile.type != 78 && tile.type != 380 && tile.type != 477 && tile.type != 579) || typeAttemptedToPlace != 3) && (tile.type != 23 || typeAttemptedToPlace != 24) && ((tile.type != 109 && tile.type != 492) || typeAttemptedToPlace != 110))
                    {
                        if (tile.type == 199)
                        {
                            return typeAttemptedToPlace == 201;
                        }
                        return false;
                    }
                    return true;
                }
                return false;
            }

            public void CheckLilyPad(int x, int y)
            {
                if (Main.netMode == 1)
                {
                    return;
                }
                if (this[x, y].liquidType() != 0)
                {
                    KillTile(x, y);
                    if (Main.netMode == 2)
                    {
                        SendDataToPlayer(17, -1, -1, null, 0, x, y);
                    }
                    return;
                }
                int num = y;
                while ((!this[x, num].active() || !Main.tileSolid[this[x, num].type] || Main.tileSolidTop[this[x, num].type]) && num < MaxTilesY - 50)
                {
                    num++;
                    if (this[x, num] == null)
                    {
                        return;
                    }
                }
                int type = this[x, num].type;
                int num2 = -1;
                if (type == 2 || type == 477)
                {
                    num2 = 0;
                }
                if (type == 109 || type == 109 || type == 116)
                {
                    num2 = 18;
                }
                if (type == 60)
                {
                    num2 = 36;
                }
                if (num2 >= 0)
                {
                    if (num2 != this[x, y].frameY)
                    {
                        this[x, y].frameY = (short)num2;
                        if (Main.netMode == 2)
                        {
                            SendTileSquare(-1, x, y, 2);
                        }
                    }
                    if (this[x, y - 1].liquid > 0 && !this[x, y - 1].active())
                    {
                        this[x, y - 1].active(active: true);
                        this[x, y - 1].type = 518;
                        this[x, y - 1].frameX = this[x, y].frameX;
                        this[x, y - 1].frameY = this[x, y].frameY;
                        this[x, y - 1].halfBrick(halfBrick: false);
                        this[x, y - 1].slope(0);
                        this[x, y].active(active: false);
                        this[x, y].type = 0;
                        //SquareTileFrame(x, y - 1, resetFrame: false);
                        SquareTileFrame(x, y + 1);
                        if (Main.netMode == 2)
                        {
                            SendTileSquare(-1, x, y - 1, 3);
                        }
                    }
                    else
                    {
                        if (this[x, y].liquid != 0)
                        {
                            return;
                        }
                        ITile tileSafely = GetTileSafely(x, y + 1);
                        if (!tileSafely.active())
                        {
                            this[x, y + 1].active(active: true);
                            this[x, y + 1].type = 518;
                            this[x, y + 1].frameX = this[x, y].frameX;
                            this[x, y + 1].frameY = this[x, y].frameY;
                            this[x, y + 1].halfBrick(halfBrick: false);
                            this[x, y + 1].slope(0);
                            this[x, y].active(active: false);
                            this[x, y].type = 0;
                            //SquareTileFrame(x, y + 1, resetFrame: false);
                            SquareTileFrame(x, y + 1);
                            if (Main.netMode == 2)
                            {
                                SendTileSquare(-1, x, y, 3);
                            }
                        }
                        else if (tileSafely.active() && !TileID.Sets.Platforms[tileSafely.type] && (!Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type]))
                        {
                            KillTile(x, y);
                            if (Main.netMode == 2)
                            {
                                SendDataToPlayer(17, -1, -1, null, 0, x, y);
                            }
                        }
                    }
                }
                else
                {
                    KillTile(x, y);
                    if (Main.netMode == 2)
                    {
                        SendDataToPlayer(17, -1, -1, null, 0, x, y);
                    }
                }
            }
            [IgnoreMember]
            int numTreeShakes = 0;
            [IgnoreMember]
            int maxTreeShakes = 200;
            [IgnoreMember]
            int[] treeShakeX = new int[200];
            [IgnoreMember]
            int[] treeShakeY = new int[200];
            public bool IsTileALeafyTreeTop(int i, int j)
            {
                ITile tileSafely = GetTileSafely(i, j);
                if (tileSafely.active() && TileID.Sets.GetsCheckedForLeaves[tileSafely.type])
                {
                    if (tileSafely.type == 323 && tileSafely.frameX >= 88)
                    {
                        return true;
                    }
                    if (tileSafely.frameX == 22 && tileSafely.frameY >= 198 && tileSafely.frameY <= 242)
                    {
                        return true;
                    }
                }
                return false;
            }
            public void ShakeTree(int i, int j)
            {
                if (numTreeShakes == maxTreeShakes)
                {
                    return;
                }
                GetTreeBottom(i, j, out int x, out int y);
                int y2 = y;
                TreeTypes treeType = WorldGen.GetTreeType(this[x, y].type);
                if (treeType == TreeTypes.None)
                {
                    return;
                }
                for (int k = 0; k < numTreeShakes; k++)
                {
                    if (treeShakeX[k] == x && treeShakeY[k] == y)
                    {
                        return;
                    }
                }
                treeShakeX[numTreeShakes] = x;
                treeShakeY[numTreeShakes] = y;
                numTreeShakes++;
                y--;
                while (y > 10 && this[x, y].active() && TileID.Sets.IsShakeable[this[x, y].type])
                {
                    y--;
                }
                y++;
                if (!IsTileALeafyTreeTop(x, y) || SolidTiles(x - 2, x + 2, y - 2, y + 2))
                {
                    return;
                }
                bool flag = false;
                if (Main.getGoodWorld && WorldGen.genRand.Next(15) == 0)
                {
                    Projectile.NewProjectile(x * 16, y * 16, (float)Rand.Next(-100, 101) * 0.002f, 0f, 28, 0, 0f, Terraria.Player.FindClosest(new Vector2(x * 16, y * 16), 16, 16));
                }
                else if (WorldGen.genRand.Next(1000) == 0 && treeType == TreeTypes.Forest)
                {
                    flag = true;
                    NewItem(x * 16, y * 16, 16, 16, 4366);
                }
                else if (WorldGen.genRand.Next(7) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Snow || treeType == TreeTypes.Hallowed))
                {
                    flag = true;
                    NewItem(x * 16, y * 16, 16, 16, 27, WorldGen.genRand.Next(1, 3));
                }
                else if (WorldGen.genRand.Next(8) == 0 && treeType == TreeTypes.Mushroom)
                {
                    flag = true;
                    NewItem(x * 16, y * 16, 16, 16, 194, WorldGen.genRand.Next(1, 2));
                }
                else if (WorldGen.genRand.Next(35) == 0 && Main.halloween)
                {
                    flag = true;
                    NewItem(x * 16, y * 16, 16, 16, 1809, WorldGen.genRand.Next(1, 3));
                }
                else if (WorldGen.genRand.Next(12) == 0)
                {
                    flag = true;
                    int dropItem = 0;
                    KillTile_GetItemDrops(i, j, this[i, j], out dropItem, out int _, out int _, out int _);
                    NewItem(x * 16, y * 16, 16, 16, dropItem, WorldGen.genRand.Next(1, 4));
                }
                else if (WorldGen.genRand.Next(20) == 0)
                {
                    flag = true;
                    int type = 71;
                    int num = WorldGen.genRand.Next(50, 100);
                    if (WorldGen.genRand.Next(30) == 0)
                    {
                        type = 73;
                        num = 1;
                        if (WorldGen.genRand.Next(5) == 0)
                        {
                            num++;
                        }
                        if (WorldGen.genRand.Next(10) == 0)
                        {
                            num++;
                        }
                    }
                    else if (WorldGen.genRand.Next(10) == 0)
                    {
                        type = 72;
                        num = WorldGen.genRand.Next(1, 21);
                        if (WorldGen.genRand.Next(3) == 0)
                        {
                            num += WorldGen.genRand.Next(1, 21);
                        }
                        if (WorldGen.genRand.Next(4) == 0)
                        {
                            num += WorldGen.genRand.Next(1, 21);
                        }
                    }
                    NewItem(x * 16, y * 16, 16, 16, type, num);
                }
                else if (WorldGen.genRand.Next(15) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Hallowed))
                {
                    flag = true;
                    var type2 = (WorldGen.genRand.Next(5)) switch
                    {
                        0 => 74,
                        1 => 297,
                        2 => 298,
                        3 => 299,
                        _ => 538,
                    };
                    if (Terraria.Player.GetClosestRollLuck(x, y, NPC.goldCritterChance) == 0f)
                    {
                        type2 = ((WorldGen.genRand.Next(2) != 0) ? 539 : 442);
                    }
                    NPC.NewNPC(x * 16, y * 16, type2);
                }
                else if (WorldGen.genRand.Next(50) == 0 && treeType == TreeTypes.Hallowed && !Main.dayTime)
                {
                    flag = true;
                    NPC.NewNPC(x * 16, y * 16, Rand.NextFromList(new short[3]
                    {
                    583,
                    584,
                    585
                    }));
                }
                else if (WorldGen.genRand.Next(50) == 0 && treeType == TreeTypes.Forest && !Main.dayTime)
                {
                    flag = true;
                    NPC obj = Main.npc[NPC.NewNPC(x * 16, y * 16, 611)];
                    obj.velocity.Y = 1f;
                    obj.netUpdate = true;
                }
                else if (WorldGen.genRand.Next(40) == 0 && treeType == TreeTypes.Forest && !Main.dayTime && Main.halloween)
                {
                    flag = true;
                    NPC.NewNPC(x * 16, y * 16, 301);
                }
                else if (WorldGen.genRand.Next(50) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Hallowed))
                {
                    flag = true;
                    for (int l = 0; l < 5; l++)
                    {
                        Point point = new Point(x + Rand.Next(-2, 2), y - 1 + Rand.Next(-2, 2));
                        int type3 = (Terraria.Player.GetClosestRollLuck(x, y, NPC.goldCritterChance) != 0f) ? Rand.NextFromList(new short[3]
                        {
                        74,
                        297,
                        298
                        }) : 442;
                        NPC obj2 = Main.npc[NPC.NewNPC(point.X * 16, point.Y * 16, type3)];
                        obj2.velocity = Rand.NextVector2CircularEdge(3f, 3f);
                        obj2.netUpdate = true;
                    }
                }
                else if (WorldGen.genRand.Next(40) == 0 && treeType == TreeTypes.Jungle)
                {
                    flag = true;
                    for (int m = 0; m < 5; m++)
                    {
                        Point point2 = new Point(x + Rand.Next(-2, 2), y - 1 + Rand.Next(-2, 2));
                        NPC obj3 = Main.npc[NPC.NewNPC(point2.X * 16, point2.Y * 16, Rand.NextFromList(new short[2]
                        {
                        210,
                        211
                        }))];
                        obj3.ai[1] = 65f;
                        obj3.netUpdate = true;
                    }
                }
                else if (WorldGen.genRand.Next(20) == 0 && (treeType == TreeTypes.Palm || treeType == TreeTypes.PalmCorrupt || treeType == TreeTypes.PalmCrimson || treeType == TreeTypes.PalmHallowed) && !WorldGen.IsPalmOasisTree(x))
                {
                    flag = true;
                    NPC.NewNPC(x * 16, y * 16, 603);
                }
                else if (WorldGen.genRand.Next(30) == 0 && (treeType == TreeTypes.Crimson || treeType == TreeTypes.PalmCrimson))
                {
                    flag = true;
                    NPC.NewNPC(x * 16 + 8, (y - 1) * 16, -22);
                }
                else if (WorldGen.genRand.Next(30) == 0 && (treeType == TreeTypes.Corrupt || treeType == TreeTypes.PalmCorrupt))
                {
                    flag = true;
                    NPC.NewNPC(x * 16 + 8, (y - 1) * 16, -11);
                }
                else if (WorldGen.genRand.Next(30) == 0 && treeType == TreeTypes.Jungle && !Main.dayTime)
                {
                    flag = true;
                    NPC.NewNPC(x * 16, y * 16, 51);
                }
                else if (WorldGen.genRand.Next(40) == 0 && treeType == TreeTypes.Jungle)
                {
                    flag = true;
                    Projectile.NewProjectile(x * 16 + 8, (y - 1) * 16, 0f, 0f, 655, 0, 0f, Main.myPlayer);
                }
                else if (WorldGen.genRand.Next(20) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Hallowed) && !Main.raining && !NPC.TooWindyForButterflies && Main.dayTime)
                {
                    flag = true;
                    int type4 = 356;
                    if (Terraria.Player.GetClosestRollLuck(x, y, NPC.goldCritterChance) == 0f)
                    {
                        type4 = 444;
                    }
                    NPC.NewNPC(x * 16, y * 16, type4);
                }
                else if (WorldGen.genRand.Next(15) == 0 && treeType == TreeTypes.Forest)
                {
                    flag = true;
                    int type5;
                    switch (WorldGen.genRand.Next(5))
                    {
                        case 0:
                            type5 = 4009;
                            break;
                        case 1:
                            type5 = 4293;
                            break;
                        case 2:
                            type5 = 4282;
                            break;
                        case 3:
                            type5 = 4290;
                            break;
                        default:
                            type5 = 4291;
                            break;
                    }
                    NewItem(x * 16, y * 16, 16, 16, type5);
                }
                else if (WorldGen.genRand.Next(15) == 0 && treeType == TreeTypes.Snow)
                {
                    flag = true;
                    NewItem(Type: (WorldGen.genRand.Next(2) != 0) ? 4295 : 4286, X: x * 16, Y: y * 16, Width: 16, Height: 16);
                }
                else if (WorldGen.genRand.Next(15) == 0 && treeType == TreeTypes.Jungle)
                {
                    flag = true;
                    NewItem(Type: (WorldGen.genRand.Next(2) != 0) ? 4292 : 4294, X: x * 16, Y: y * 16, Width: 16, Height: 16);
                }
                else if (WorldGen.genRand.Next(15) == 0 && (treeType == TreeTypes.Palm || treeType == TreeTypes.PalmCorrupt || treeType == TreeTypes.PalmCrimson || treeType == TreeTypes.PalmHallowed) && !WorldGen.IsPalmOasisTree(x))
                {
                    flag = true;
                    NewItem(Type: (WorldGen.genRand.Next(2) != 0) ? 4287 : 4283, X: x * 16, Y: y * 16, Width: 16, Height: 16);
                }
                else if (WorldGen.genRand.Next(15) == 0 && (treeType == TreeTypes.Corrupt || treeType == TreeTypes.PalmCorrupt))
                {
                    flag = true;
                    NewItem(Type: (WorldGen.genRand.Next(2) != 0) ? 4289 : 4284, X: x * 16, Y: y * 16, Width: 16, Height: 16);
                }
                else if (WorldGen.genRand.Next(15) == 0 && (treeType == TreeTypes.Hallowed || treeType == TreeTypes.PalmHallowed))
                {
                    flag = true;
                    NewItem(Type: (WorldGen.genRand.Next(2) != 0) ? 4288 : 4297, X: x * 16, Y: y * 16, Width: 16, Height: 16);
                }
                else if (WorldGen.genRand.Next(15) == 0 && (treeType == TreeTypes.Crimson || treeType == TreeTypes.PalmCrimson))
                {
                    flag = true;
                    NewItem(Type: (WorldGen.genRand.Next(2) != 0) ? 4285 : 4296, X: x * 16, Y: y * 16, Width: 16, Height: 16);
                }
                if (flag)
                {
                    int treeHeight = 0;
                    int treeFrame = 0;
                    int passStyle = 0;
                    WorldGen.GetTreeLeaf(x, this[x, y], this[x, y2], ref treeHeight, out treeFrame, out passStyle);
                    if (Main.netMode == 2)
                    {
                        SendDataToPlayer(112, -1, -1, null, 1, x, y, 1f, passStyle);
                    }
                }
            }
            public void KillTile(int i, int j, bool fail = false, bool effectOnly = false, bool noItem = false)
            {
                if (i < 0 || j < 0 || i >= MaxTilesX || j >= MaxTilesY)
                {
                    return;
                }
                ITile tile = this[i, j];
                if (tile == null)
                {
                    tile = CreateTile();
                    this[i, j] = tile;
                }
                if (!tile.active())
                {
                    return;
                }
                if (j >= 1 && this[i, j - 1] == null)
                {
                    this[i, j - 1] = CreateTile();
                }
                int num = CheckTileBreakability(i, j);
                if (num == 1)
                {
                    fail = true;
                }
                if (num == 2)
                {
                    return;
                }
                if (WorldGen.gen)
                {
                    noItem = true;
                }
                if (!effectOnly && !WorldGen.stopDrops && !noItem && FixExploitManEaters.SpotProtected(i, j))
                {
                    return;
                }
                if (tile.type == 128 || tile.type == 269)
                {
                    int num2 = i;
                    int num3 = tile.frameX;
                    int num4;
                    for (num4 = tile.frameX; num4 >= 100; num4 -= 100)
                    {
                    }
                    while (num4 >= 36)
                    {
                        num4 -= 36;
                    }
                    if (num4 == 18)
                    {
                        num3 = this[i - 1, j].frameX;
                        num2--;
                    }
                    if (num3 >= 100)
                    {
                        int num5 = 0;
                        while (num3 >= 100)
                        {
                            num3 -= 100;
                            num5++;
                        }
                        int num6 = this[num2, j].frameY / 18;
                        if (num6 == 0)
                        {
                            NewItem(i * 16, j * 16, 16, 16, Item.headType[num5]);
                        }
                        if (num6 == 1)
                        {
                            NewItem(i * 16, j * 16, 16, 16, Item.bodyType[num5]);
                        }
                        if (num6 == 2)
                        {
                            NewItem(i * 16, j * 16, 16, 16, Item.legType[num5]);
                        }
                        for (num3 = this[num2, j].frameX; num3 >= 100; num3 -= 100)
                        {
                        }
                        this[num2, j].frameX = (short)num3;
                    }
                }
                if (tile.type == 334)
                {
                    int num7 = i;
                    int frameX = tile.frameX;
                    int num8 = tile.frameX;
                    int num9 = 0;
                    while (num8 >= 5000)
                    {
                        num8 -= 5000;
                        num9++;
                    }
                    if (num9 != 0)
                    {
                        num8 = (num9 - 1) * 18;
                    }
                    num8 %= 54;
                    if (num8 == 18)
                    {
                        frameX = this[i - 1, j].frameX;
                        num7--;
                    }
                    if (num8 == 36)
                    {
                        frameX = this[i - 2, j].frameX;
                        num7 -= 2;
                    }
                    if (frameX >= 5000)
                    {
                        int num10 = frameX % 5000;
                        num10 -= 100;
                        int frameX2 = this[num7 + 1, j].frameX;
                        frameX2 = ((frameX2 < 25000) ? (frameX2 - 10000) : (frameX2 - 25000));
                        if (Main.netMode != 1)
                        {
                            Item item = new Item();
                            item.netDefaults(num10);
                            item.Prefix(frameX2);
                            int num11 = NewItem(i * 16, j * 16, 16, 16, num10, 1, noBroadcast: true);
                            item.position = Main.item[num11].position;
                            Main.item[num11] = item;
                            SendDataToPlayer(21, -1, -1, null, num11);
                        }
                        frameX = this[num7, j].frameX;
                        int num12 = 0;
                        while (frameX >= 5000)
                        {
                            frameX -= 5000;
                            num12++;
                        }
                        if (num12 != 0)
                        {
                            frameX = (num12 - 1) * 18;
                        }
                        this[num7, j].frameX = (short)frameX;
                        this[num7 + 1, j].frameX = (short)(frameX + 18);
                    }
                }
                if (tile.type == 395)
                {
                    int num13 = TEItemFrame.Find(i - tile.frameX % 36 / 18, j - tile.frameY % 36 / 18);
                    if (num13 != -1 && ((TEItemFrame)TileEntity.ByID[num13]).item.stack > 0)
                    {
                        ((TEItemFrame)TileEntity.ByID[num13]).DropItem();
                        if (Main.netMode != 2)
                        {
                            Main.LocalPlayer.InterruptItemUsageIfOverTile(395);
                        }
                        return;
                    }
                }
                if (tile.type == 520)
                {
                    int num14 = TEFoodPlatter.Find(i, j);
                    if (num14 != -1 && ((TEFoodPlatter)TileEntity.ByID[num14]).item.stack > 0)
                    {
                        ((TEFoodPlatter)TileEntity.ByID[num14]).DropItem();
                        if (Main.netMode != 2)
                        {
                            Main.LocalPlayer.InterruptItemUsageIfOverTile(520);
                        }
                        return;
                    }
                }
                if ((tile.type == 471 && TEWeaponsRack.KillTileDropItem(tile, i, j)) || (tile.type == 470 && (CheckTileBreakability2_ShouldTileSurvive(i, j) || fail)) || (tile.type == 475 && (CheckTileBreakability2_ShouldTileSurvive(i, j) || fail)))
                {
                    return;
                }
                if (effectOnly)
                {
                    return;
                }
                AttemptFossilShattering(i, j, tile, fail);
                if (fail)
                {
                    if (Main.netMode != 1 && TileID.Sets.IsShakeable[tile.type])
                    {
                        ShakeTree(i, j);
                    }
                    if (tile.type == 2 || tile.type == 23 || tile.type == 109 || tile.type == 199 || tile.type == 477 || tile.type == 492)
                    {
                        tile.type = 0;
                    }
                    if (tile.type == 60 || tile.type == 70)
                    {
                        tile.type = 59;
                    }
                    if (Main.tileMoss[tile.type])
                    {
                        tile.type = 1;
                    }
                    if (TileID.Sets.tileMossBrick[tile.type])
                    {
                        tile.type = 38;
                    }
                    SquareTileFrame(i, j);
                    return;
                }
                if (Main.getGoodWorld && Main.netMode != 1 && tile.type == 57)
                {
                    for (int l = 0; l < 8; l++)
                    {
                        int maxValue = 2;
                        int num16 = i;
                        int num17 = j;
                        switch (l)
                        {
                            case 0:
                                num16--;
                                break;
                            case 1:
                                num16++;
                                break;
                            case 2:
                                num17--;
                                break;
                            case 3:
                                num17++;
                                break;
                            case 4:
                                num16--;
                                num17--;
                                break;
                            case 5:
                                num16++;
                                num17--;
                                break;
                            case 6:
                                num16--;
                                num17++;
                                break;
                            case 7:
                                num16++;
                                num17++;
                                break;
                        }
                        ITile tile2 = this[num16, num17];
                        if (tile2.active() && WorldGen.genRand.Next(maxValue) == 0 && tile2.type == 57 && !SolidTile(num16, num17 + 1))
                        {
                            KillTile(num16, num17, fail: false, effectOnly: false, noItem: true);
                            int num18 = Projectile.NewProjectile(num16 * 16 + 8, num17 * 16 + 8, 0f, 0.41f, 40, 15, 0f, Main.myPlayer);
                            Main.projectile[num18].netUpdate = true;
                        }
                    }
                }
                if (Main.netMode != 1 && tile.type >= 481 && tile.type <= 483)
                {
                    for (int m = 0; m < 8; m++)
                    {
                        int num19 = 6;
                        int num20 = i;
                        int num21 = j;
                        switch (m)
                        {
                            case 0:
                                num20--;
                                break;
                            case 1:
                                num20++;
                                break;
                            case 2:
                                num21--;
                                num19 /= 2;
                                break;
                            case 3:
                                num21++;
                                break;
                            case 4:
                                num20--;
                                num21--;
                                break;
                            case 5:
                                num20++;
                                num21--;
                                break;
                            case 6:
                                num20--;
                                num21++;
                                break;
                            case 7:
                                num20++;
                                num21++;
                                break;
                        }
                        ITile tile3 = this[num20, num21];
                        if (tile3.active() && WorldGen.genRand.Next(num19) == 0 && tile3.type >= 481 && tile3.type <= 483)
                        {
                            tile.active(active: false);
                            KillTile(num20, num21, fail: false, effectOnly: false, noItem: true);
                        }
                    }
                    int type = tile.type - 481 + 736;
                    int damage = 20;
                    if (Main.netMode == 0)
                    {
                        Projectile.NewProjectile(i * 16 + 8, j * 16 + 8, 0f, 0.41f, type, damage, 0f, Main.myPlayer);
                    }
                    else if (Main.netMode == 2)
                    {
                        int num22 = Projectile.NewProjectile(i * 16 + 8, j * 16 + 8, 0f, 0.41f, type, damage, 0f, Main.myPlayer);
                        Main.projectile[num22].netUpdate = true;
                    }
                }
                if (!CheckTileBreakability2_ShouldTileSurvive(i, j))
                {
                    if (tile.type == 51 && tile.wall == 62 && WorldGen.genRand.Next(4) != 0)
                    {
                        noItem = true;
                    }
                    if (!noItem)
                    {
                        KillTile_DropBait(i, j, tile);
                        KillTile_DropItems(i, j, tile);
                    }
                    tile.active(active: false);
                    tile.halfBrick(halfBrick: false);
                    tile.frameX = -1;
                    tile.frameY = -1;
                    tile.color(0);
                    tile.frameNumber(0);
                    if (tile.type == 58 && j > Main.UnderworldLayer)
                    {
                        tile.lava(lava: true);
                        tile.liquid = 128;
                    }
                    else if (tile.type == 419)
                    {
                        PokeLogicGate(i, j + 1);
                    }
                    else if (TileID.Sets.BlocksWaterDrawingBehindSelf[tile.type])
                    {
                        SquareWallFrame(i, j);
                    }
                    tile.type = 0;
                    tile.inActive(inActive: false);
                    SquareTileFrame(i, j);
                }
            }
            public void KillTile_DropItems(int x, int y, ITile tileCache, bool includeLargeObjectDrops = false)
            {
                KillTile_GetItemDrops(x, y, tileCache, out int dropItem, out int dropItemStack, out int secondaryItem, out int secondaryItemStack, includeLargeObjectDrops);
                if (!Main.getGoodWorld || tileCache.active())
                {
                    if (dropItem > 0)
                    {
                        int num = NewItem(x * 16, y * 16, 16, 16, dropItem, dropItemStack, noBroadcast: false, -1);
                        Main.item[num].TryCombiningIntoNearbyItems(num);
                    }
                    if (secondaryItem > 0)
                    {
                        int num2 = NewItem(x * 16, y * 16, 16, 16, secondaryItem, secondaryItemStack, noBroadcast: false, -1);
                        Main.item[num2].TryCombiningIntoNearbyItems(num2);
                    }
                }
            }
            public void KillTile_DropBait(int i, int j, ITile tileCache)
            {
                int num = -1;
                int num2 = -1;
                int num3 = -1;
                int num4 = Terraria.Player.FindClosest(new Vector2(i * 16, j * 16), 16, 16);
                if (tileCache.type == 3)
                {
                    num = 400;
                    num2 = 100;
                    if (Main.player[num4].flowerBoots && tileCache.frameX >= 108)
                    {
                        num *= 10000;
                        num2 *= 10000;
                    }
                }
                if (tileCache.type == 73)
                {
                    num = 200;
                    num2 = 50;
                    if (Main.player[num4].flowerBoots && tileCache.frameX >= 108)
                    {
                        num *= 10000;
                        num2 *= 10000;
                    }
                }
                if (tileCache.type == 61)
                {
                    num3 = 80;
                    if (Main.player[num4].flowerBoots && tileCache.frameX >= 108)
                    {
                        num3 *= 10000;
                    }
                }
                if (tileCache.type == 74)
                {
                    num3 = 40;
                    if (Main.player[num4].flowerBoots && tileCache.frameX >= 108)
                    {
                        num3 *= 10000;
                    }
                }
                if (tileCache.type == 62)
                {
                    num3 = 250;
                }
                if (tileCache.type == 185)
                {
                    if (tileCache.frameY == 0 && tileCache.frameX < 214)
                    {
                        num = 6;
                    }
                    if (tileCache.frameY == 18 && (tileCache.frameX < 214 || tileCache.frameX >= 1368))
                    {
                        num = 6;
                    }
                }
                else if (tileCache.type == 186)
                {
                    if (tileCache.frameX >= 378 && tileCache.frameX <= 700)
                    {
                        num = 6;
                    }
                }
                else if (tileCache.type == 187)
                {
                    if (tileCache.frameX >= 756 && tileCache.frameX <= 916)
                    {
                        num = 6;
                    }
                    if (tileCache.frameX <= 322)
                    {
                        num = 6;
                    }
                }
                else if (tileCache.type == 233)
                {
                    num3 = 10;
                }
                int num5 = 357;
                if (Main.player[num4].ZoneGraveyard)
                {
                    num5 = 606;
                }
                if (num > 0 && NPC.CountNPCS(num5) < 5 && WorldGen.genRand.Next(num) == 0)
                {
                    int type = num5;
                    if (num5 == 357 && GetClosestRollLuck(i, j, NPC.goldCritterChance) == 0f)
                    {
                        type = 448;
                    }
                    int num6 = NPC.NewNPC(i * 16 + 10, j * 16, type);
                    Main.npc[num6].TargetClosest();
                    Main.npc[num6].velocity.Y = (float)WorldGen.genRand.Next(-50, -21) * 0.1f;
                    Main.npc[num6].velocity.X = (float)WorldGen.genRand.Next(0, 26) * 0.1f * (float)(-Main.npc[num6].direction);
                    Main.npc[num6].direction *= -1;
                    Main.npc[num6].netUpdate = true;
                }
                if (num2 > 0 && NPC.CountNPCS(377) < 5 && WorldGen.genRand.Next(num2) == 0)
                {
                    int type2 = 377;
                    if (Terraria.Player.GetClosestRollLuck(i, j, NPC.goldCritterChance) == 0f)
                    {
                        type2 = 446;
                    }
                    int num7 = NPC.NewNPC(i * 16 + 10, j * 16, type2);
                    Main.npc[num7].TargetClosest();
                    Main.npc[num7].velocity.Y = (float)WorldGen.genRand.Next(-50, -21) * 0.1f;
                    Main.npc[num7].velocity.X = (float)WorldGen.genRand.Next(0, 26) * 0.1f * (float)(-Main.npc[num7].direction);
                    Main.npc[num7].direction *= -1;
                    Main.npc[num7].netUpdate = true;
                }
                if (num3 > 0 && NPC.CountNPCS(485) + NPC.CountNPCS(486) + NPC.CountNPCS(487) < 8 && WorldGen.genRand.Next(num3) == 0)
                {
                    int type3 = 485;
                    if (WorldGen.genRand.Next(4) == 0)
                    {
                        type3 = 486;
                    }
                    if (WorldGen.genRand.Next(12) == 0)
                    {
                        type3 = 487;
                    }
                    int num8 = NPC.NewNPC(i * 16 + 10, j * 16, type3);
                    Main.npc[num8].TargetClosest();
                    Main.npc[num8].velocity.Y = (float)WorldGen.genRand.Next(-50, -21) * 0.1f;
                    Main.npc[num8].velocity.X = (float)WorldGen.genRand.Next(0, 26) * 0.1f * (float)(-Main.npc[num8].direction);
                    Main.npc[num8].direction *= -1;
                    Main.npc[num8].netUpdate = true;
                }
            }
            bool fossilBreak = false;
            public void AttemptFossilShattering(int i, int j, ITile tileCache, bool fail)
            {
                if (tileCache.type != 404 || Main.netMode == 1 || fossilBreak)
                {
                    return;
                }
                fossilBreak = true;
                for (int k = i - 1; k <= i + 1; k++)
                {
                    for (int l = j - 1; l <= j + 1; l++)
                    {
                        int maxValue = 15;
                        if (!SolidTile(k, l + 1))
                        {
                            maxValue = 4;
                        }
                        else if (k == i && l == j - 1 && !fail)
                        {
                            maxValue = 4;
                        }
                        if ((k != i || l != j) && this[k, l].active() && this[k, l].type == 404 && WorldGen.genRand.Next(maxValue) == 0)
                        {
                            KillTile(k, l, fail: false, effectOnly: false, noItem: true);
                            if (Main.netMode == 2)
                            {
                                SendDataToPlayer(17, -1, -1, null, 0, k, l);
                            }
                        }
                    }
                }
                fossilBreak = false;
            }
            public bool IsLockedDoor(int x, int y)
            {
                return IsLockedDoor(this[x, y]);
            }
            public bool IsLockedDoor(ITile t)
            {
                if (t.type == 10 && t.frameY >= 594 && t.frameY <= 646)
                {
                    return t.frameX < 54;
                }
                return false;
            }
            public bool CheckBoulderChest(int i, int j)
            {
                int num = this[i, j].frameX / 18 * -1;
                if (num < -1)
                {
                    num += 2;
                }
                num += i;
                int num2;
                for (num2 = this[i, j].frameY; num2 >= 36; num2 -= 36)
                {
                }
                num2 = j - num2 / 18;
                if (WorldGen.IsAContainer(this[num, num2 - 1]) || WorldGen.IsAContainer(this[num + 1, num2 - 1]))
                {
                    return true;
                }
                return false;
            }
            public int CheckTileBreakability(int x, int y)
            {
                ITile tile = this[x, y];
                if (y >= 1 && y <= MaxTilesY - 1)
                {
                    ITile tile2 = this[x, y - 1];
                    ITile tile3 = this[x, y + 1];
                    if (tile3 != null && tile3.active() && IsLockedDoor(x, y + 1))
                    {
                        return 2;
                    }
                    if (!Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
                    {
                        return 0;
                    }
                    if (tile2.active())
                    {
                        if ((TileID.Sets.PreventsTileRemovalIfOnTopOfIt[tile2.type] && tile.type != tile2.type) | IsLockedDoor(x, y - 1) | (tile2.type == 77 && tile.type != 77 && !Main.hardMode) | (WorldGen.IsAContainer(tile2) && !WorldGen.IsAContainer(tile)))
                        {
                            if (TileID.Sets.IsATreeTrunk[tile2.type])
                            {
                                if ((tile2.frameX == 66 && tile2.frameY >= 0 && tile2.frameY <= 44) || (tile2.frameX == 88 && tile2.frameY >= 66 && tile2.frameY <= 110) || tile2.frameY >= 198)
                                {
                                    return 0;
                                }
                                return 2;
                            }
                            if (tile2.type == 323)
                            {
                                if (tile2.frameX == 66 || tile2.frameX == 220)
                                {
                                    return 2;
                                }
                                return 0;
                            }
                            return 2;
                        }
                        if (tile2.type == 80 && tile2.type != tile.type)
                        {
                            int num = tile2.frameX / 18;
                            if ((uint)num <= 1u || (uint)(num - 4) <= 1u)
                            {
                                return 2;
                            }
                        }
                        if (tile.type == 10 && tile.frameY >= 594 && tile.frameY <= 646)
                        {
                            return 1;
                        }
                        if (tile.type == 138 || tile.type == 484)
                        {
                            if (CheckBoulderChest(x, y))
                            {
                                return 1;
                            }
                            return 0;
                        }
                    }
                    if (tile.type == 235)
                    {
                        int frameX = tile.frameX;
                        int num2 = x - frameX % 54 / 18;
                        for (int i = 0; i < 3; i++)
                        {
                            if (this[num2 + i, y - 1].active() && WorldGen.IsAContainer(this[num2 + i, y - 1]))
                            {
                                return 2;
                            }
                        }
                    }
                }
                return 0;
            }
            public bool CheckTileBreakability2_ShouldTileSurvive(int x, int y)
            {
                if (Main.netMode == 1)
                {
                    return false;
                }
                ITile tile = this[x, y];
                if (TileID.Sets.BasicChest[tile.type])
                {
                    int num = tile.frameX / 18;
                    int y2 = y - tile.frameY / 18;
                    while (num > 1)
                    {
                        num -= 2;
                    }
                    num = x - num;
                    if (!DestroyChest(num, y2))
                    {
                        return true;
                    }
                }
                if (tile.type == 88)
                {
                    int num2 = tile.frameX / 18;
                    int y3 = y - tile.frameY / 18;
                    num2 %= 3;
                    num2 = x - num2;
                    if (!DestroyChest(num2, y3))
                    {
                        return true;
                    }
                }
                if (tile.type == 470)
                {
                    return !IsBreakable(x, y);
                }
                if (tile.type == 475)
                {
                    return !IsBreakable(x, y);
                }
                return false;
            }
            public bool IsBreakable(int clickX, int clickY)
            {
                int num = clickX;
                int num2 = clickY;
                if (this[num, num2].frameX % 36 != 0)
                {
                    num--;
                }
                num2 -= this[num, num2].frameY / 18;
                int num3 = TEHatRack.Find(num, num2);
                if (num3 != -1)
                {
                    return !(TileEntity.ByID[num3] as TEDisplayDoll).ContainsItems();
                }
                return true;
            }
            public bool DestroyChest(int X, int Y)
            {
                if (GetRelative(X, Y, out int x, out int y))
                {
                    var list = Chest.Where(c => c != null && c.x == x && c.y == y).ToList();
                    if (list.Any())
                    {
                        for (int j = 0; j < 40; j++)
                        {
                            if (list[0].item[j] != null && list[0].item[j].type > 0 && list[0].item[j].stack > 0)
                            {
                                return false;
                            }
                        }
                        return true;
                    }
                }
                return false;
            }
            public int NewItem(int X, int Y, int Width, int Height, int Type, int Stack = 1, bool noBroadcast = false, int pfix = 0, bool noGrabDelay = false, bool reverseLookup = false)
            {
                if (WorldGen.gen)
                {
                    return 0;
                }
                if (Rand == null)
                {
                    Rand = new UnifiedRandom();
                }
                if (Main.halloween)
                {
                    if (Type == 58)
                    {
                        Type = 1734;
                    }
                    if (Type == 184)
                    {
                        Type = 1735;
                    }
                }
                if (Main.xMas)
                {
                    if (Type == 58)
                    {
                        Type = 1867;
                    }
                    if (Type == 184)
                    {
                        Type = 1868;
                    }
                }
                if (Type > 0 && Item.cachedItemSpawnsByType[Type] != -1)
                {
                    Item.cachedItemSpawnsByType[Type] += Stack;
                    return 400;
                }
                Main.item[400] = new Item();
                int num = 400;
                if (Main.netMode != 1)
                {
                    num = Item.PickAnItemSlotToSpawnItemOn(reverseLookup, num);
                }
                Main.timeItemSlotCannotBeReusedFor[num] = 0;
                Main.item[num] = new Item();
                Item item = Main.item[num];
                item.SetDefaults(Type);
                item.Prefix(pfix);
                item.stack = Stack;
                item.position.X = X + Width / 2 - item.width / 2;
                item.position.Y = Y + Height / 2 - item.height / 2;
                item.wet = WetCollision(item.position, item.width, item.height);
                item.velocity.X = (float)Rand.Next(-30, 31) * 0.1f;
                item.velocity.Y = (float)Rand.Next(-40, -15) * 0.1f;
                if (Type == 859 || Type == 4743)
                {
                    item.velocity *= 0f;
                }
                if (Type == 520 || Type == 521 || (item.type >= 0 && ItemID.Sets.NebulaPickup[item.type]))
                {
                    item.velocity.X = (float)Rand.Next(-30, 31) * 0.1f;
                    item.velocity.Y = (float)Rand.Next(-30, 31) * 0.1f;
                }
                item.active = true;
                item.timeSinceItemSpawned = ItemID.Sets.NewItemSpawnPriority[item.type];
                Item.numberOfNewItems++;
                if (Main.netMode == 2 && !noBroadcast)
                {
                    GetAllPlayers().ForEach(e =>
                    {
                        e.SendRawData(new EternalLandPlugin.Net.RawDataWriter().SetType(PacketTypes.ItemDrop).PackInt16((short)num).PackVector2(item.position).PackVector2(item.velocity).PackInt16((short)item.stack).PackByte(item.prefix).PackByte((byte)noGrabDelay.ToInt()).PackInt16((short)item.netID).GetByteData());
                    });
                }
                return num;
            }
            public bool WetCollision(Vector2 Position, int Width, int Height)
            {
                Vector2 vector = new Vector2(Position.X + (float)(Width / 2), Position.Y + (float)(Height / 2));
                int num = 10;
                int num2 = Height / 2;
                if (num > Width)
                {
                    num = Width;
                }
                if (num2 > Height)
                {
                    num2 = Height;
                }
                vector = new Vector2(vector.X - (float)(num / 2), vector.Y - (float)(num2 / 2));
                int value = (int)(Position.X / 16f) - 1;
                int value2 = (int)((Position.X + (float)Width) / 16f) + 2;
                int value3 = (int)(Position.Y / 16f) - 1;
                int value4 = (int)((Position.Y + (float)Height) / 16f) + 2;
                int num3 = Terraria.Utils.Clamp(value, 0, MaxTilesX - 1);
                value2 = Terraria.Utils.Clamp(value2, 0, MaxTilesX - 1);
                value3 = Terraria.Utils.Clamp(value3, 0, MaxTilesY - 1);
                value4 = Terraria.Utils.Clamp(value4, 0, MaxTilesY - 1);
                Vector2 vector2 = default(Vector2);
                for (int i = num3; i < value2; i++)
                {
                    for (int j = value3; j < value4; j++)
                    {
                        if (this[i, j] == null)
                        {
                            continue;
                        }
                        if (this[i, j].liquid > 0)
                        {
                            vector2.X = i * 16;
                            vector2.Y = j * 16;
                            int num4 = 16;
                            float num5 = 256 - this[i, j].liquid;
                            num5 /= 32f;
                            vector2.Y += num5 * 2f;
                            num4 -= (int)(num5 * 2f);
                            if (vector.X + (float)num > vector2.X && vector.X < vector2.X + 16f && vector.Y + (float)num2 > vector2.Y && vector.Y < vector2.Y + (float)num4)
                            {
                                if (this[i, j].honey())
                                {
                                    //honey = true;
                                }
                                return true;
                            }
                        }
                        else
                        {
                            if (!this[i, j].active() || this[i, j].slope() == 0 || j <= 0 || this[i, j - 1] == null || this[i, j - 1].liquid <= 0)
                            {
                                continue;
                            }
                            vector2.X = i * 16;
                            vector2.Y = j * 16;
                            int num6 = 16;
                            if (vector.X + (float)num > vector2.X && vector.X < vector2.X + 16f && vector.Y + (float)num2 > vector2.Y && vector.Y < vector2.Y + (float)num6)
                            {
                                if (this[i, j - 1].honey())
                                {
                                    //honey = true;
                                }
                                return true;
                            }
                        }
                    }
                }
                return false;
            }
            #endregion

            #region 矿车
            public enum TrackState
            {
                NoTrack = -1,
                AboveTrack,
                OnTrack,
                BelowTrack,
                AboveFront,
                AboveBack,
                OnFront,
                OnBack
            }

            public const int TotalFrames = 36;

            public const int LeftDownDecoration = 36;

            public const int RightDownDecoration = 37;

            public const int BouncyBumperDecoration = 38;

            public const int RegularBumperDecoration = 39;

            public const int Flag_OnTrack = 0;

            public const int Flag_BouncyBumper = 1;

            public const int Flag_UsedRamp = 2;

            public const int Flag_HitSwitch = 3;

            public const int Flag_BoostLeft = 4;

            public const int Flag_BoostRight = 5;

            public const int NoConnection = -1;

            public const int TopConnection = 0;

            public const int MiddleConnection = 1;

            public const int BottomConnection = 2;

            public const int BumperEnd = -1;

            public const int BouncyEnd = -2;

            public const int RampEnd = -3;

            public const int OpenEnd = -4;

            public const float BoosterSpeed = 4f;

            public const int Type_Normal = 0;

            public const int Type_Pressure = 1;

            public const int Type_Booster = 2;
            [IgnoreMember]
            public Vector2 _trackMagnetOffset = new Vector2(25f, 26f);
            public const float MinecartTextureWidth = 50f;
            [IgnoreMember]
            public int[] _leftSideConnection;
            [IgnoreMember]
            public int[] _rightSideConnection;
            [IgnoreMember]
            public int[] _trackType;
            [IgnoreMember]
            public bool[] _boostLeft;
            [IgnoreMember]
            public Vector2[] _texturePosition;
            [IgnoreMember]
            public short _firstPressureFrame;
            [IgnoreMember]
            public short _firstLeftBoostFrame;
            [IgnoreMember]
            public short _firstRightBoostFrame;
            [IgnoreMember]
            public int[][] _trackSwitchOptions;
            [IgnoreMember]
            public int[][] _tileHeight;

            public void InitializeMinecart()
            {
                _rightSideConnection = new int[36];
                _leftSideConnection = new int[36];
                _trackType = new int[36];
                _boostLeft = new bool[36];
                _texturePosition = new Vector2[40];
                _tileHeight = new int[36][];
                for (int i = 0; i < 36; i++)
                {
                    int[] array = new int[8];
                    for (int j = 0; j < array.Length; j++)
                    {
                        array[j] = 5;
                    }
                    _tileHeight[i] = array;
                }
                int num = 0;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = -1;
                _tileHeight[num][0] = -4;
                _tileHeight[num][7] = -4;
                _texturePosition[num] = new Vector2(0f, 0f);
                num++;
                _leftSideConnection[num] = 1;
                _rightSideConnection[num] = 1;
                _texturePosition[num] = new Vector2(1f, 0f);
                num++;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = 1;
                for (int k = 0; k < 4; k++)
                {
                    _tileHeight[num][k] = -1;
                }
                _texturePosition[num] = new Vector2(2f, 1f);
                num++;
                _leftSideConnection[num] = 1;
                _rightSideConnection[num] = -1;
                for (int l = 4; l < 8; l++)
                {
                    _tileHeight[num][l] = -1;
                }
                _texturePosition[num] = new Vector2(3f, 1f);
                num++;
                _leftSideConnection[num] = 2;
                _rightSideConnection[num] = 1;
                _tileHeight[num][0] = 1;
                _tileHeight[num][1] = 2;
                _tileHeight[num][2] = 3;
                _tileHeight[num][3] = 3;
                _tileHeight[num][4] = 4;
                _tileHeight[num][5] = 4;
                _texturePosition[num] = new Vector2(0f, 2f);
                num++;
                _leftSideConnection[num] = 1;
                _rightSideConnection[num] = 2;
                _tileHeight[num][2] = 4;
                _tileHeight[num][3] = 4;
                _tileHeight[num][4] = 3;
                _tileHeight[num][5] = 3;
                _tileHeight[num][6] = 2;
                _tileHeight[num][7] = 1;
                _texturePosition[num] = new Vector2(1f, 2f);
                num++;
                _leftSideConnection[num] = 1;
                _rightSideConnection[num] = 0;
                _tileHeight[num][4] = 6;
                _tileHeight[num][5] = 6;
                _tileHeight[num][6] = 7;
                _tileHeight[num][7] = 8;
                _texturePosition[num] = new Vector2(0f, 1f);
                num++;
                _leftSideConnection[num] = 0;
                _rightSideConnection[num] = 1;
                _tileHeight[num][0] = 8;
                _tileHeight[num][1] = 7;
                _tileHeight[num][2] = 6;
                _tileHeight[num][3] = 6;
                _texturePosition[num] = new Vector2(1f, 1f);
                num++;
                _leftSideConnection[num] = 0;
                _rightSideConnection[num] = 2;
                for (int m = 0; m < 8; m++)
                {
                    _tileHeight[num][m] = 8 - m;
                }
                _texturePosition[num] = new Vector2(0f, 3f);
                num++;
                _leftSideConnection[num] = 2;
                _rightSideConnection[num] = 0;
                for (int n = 0; n < 8; n++)
                {
                    _tileHeight[num][n] = n + 1;
                }
                _texturePosition[num] = new Vector2(1f, 3f);
                num++;
                _leftSideConnection[num] = 2;
                _rightSideConnection[num] = -1;
                _tileHeight[num][0] = 1;
                _tileHeight[num][1] = 2;
                for (int num2 = 2; num2 < 8; num2++)
                {
                    _tileHeight[num][num2] = -1;
                }
                _texturePosition[num] = new Vector2(4f, 1f);
                num++;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = 2;
                _tileHeight[num][6] = 2;
                _tileHeight[num][7] = 1;
                for (int num3 = 0; num3 < 6; num3++)
                {
                    _tileHeight[num][num3] = -1;
                }
                _texturePosition[num] = new Vector2(5f, 1f);
                num++;
                _leftSideConnection[num] = 0;
                _rightSideConnection[num] = -1;
                _tileHeight[num][0] = 8;
                _tileHeight[num][1] = 7;
                _tileHeight[num][2] = 6;
                for (int num4 = 3; num4 < 8; num4++)
                {
                    _tileHeight[num][num4] = -1;
                }
                _texturePosition[num] = new Vector2(6f, 1f);
                num++;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = 0;
                _tileHeight[num][5] = 6;
                _tileHeight[num][6] = 7;
                _tileHeight[num][7] = 8;
                for (int num5 = 0; num5 < 5; num5++)
                {
                    _tileHeight[num][num5] = -1;
                }
                _texturePosition[num] = new Vector2(7f, 1f);
                num++;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = 1;
                _tileHeight[num][0] = -4;
                _texturePosition[num] = new Vector2(2f, 0f);
                num++;
                _leftSideConnection[num] = 1;
                _rightSideConnection[num] = -1;
                _tileHeight[num][7] = -4;
                _texturePosition[num] = new Vector2(3f, 0f);
                num++;
                _leftSideConnection[num] = 2;
                _rightSideConnection[num] = -1;
                for (int num6 = 0; num6 < 6; num6++)
                {
                    _tileHeight[num][num6] = num6 + 1;
                }
                _tileHeight[num][6] = -3;
                _tileHeight[num][7] = -3;
                _texturePosition[num] = new Vector2(4f, 0f);
                num++;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = 2;
                _tileHeight[num][0] = -3;
                _tileHeight[num][1] = -3;
                for (int num7 = 2; num7 < 8; num7++)
                {
                    _tileHeight[num][num7] = 8 - num7;
                }
                _texturePosition[num] = new Vector2(5f, 0f);
                num++;
                _leftSideConnection[num] = 0;
                _rightSideConnection[num] = -1;
                for (int num8 = 0; num8 < 6; num8++)
                {
                    _tileHeight[num][num8] = 8 - num8;
                }
                _tileHeight[num][6] = -3;
                _tileHeight[num][7] = -3;
                _texturePosition[num] = new Vector2(6f, 0f);
                num++;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = 0;
                _tileHeight[num][0] = -3;
                _tileHeight[num][1] = -3;
                for (int num9 = 2; num9 < 8; num9++)
                {
                    _tileHeight[num][num9] = num9 + 1;
                }
                _texturePosition[num] = new Vector2(7f, 0f);
                num++;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = -1;
                _tileHeight[num][0] = -4;
                _tileHeight[num][7] = -4;
                _trackType[num] = 1;
                _texturePosition[num] = new Vector2(0f, 4f);
                num++;
                _leftSideConnection[num] = 1;
                _rightSideConnection[num] = 1;
                _trackType[num] = 1;
                _texturePosition[num] = new Vector2(1f, 4f);
                num++;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = 1;
                _tileHeight[num][0] = -4;
                _trackType[num] = 1;
                _texturePosition[num] = new Vector2(0f, 5f);
                num++;
                _leftSideConnection[num] = 1;
                _rightSideConnection[num] = -1;
                _tileHeight[num][7] = -4;
                _trackType[num] = 1;
                _texturePosition[num] = new Vector2(1f, 5f);
                num++;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = 1;
                for (int num10 = 0; num10 < 6; num10++)
                {
                    _tileHeight[num][num10] = -2;
                }
                _texturePosition[num] = new Vector2(2f, 2f);
                num++;
                _leftSideConnection[num] = 1;
                _rightSideConnection[num] = -1;
                for (int num11 = 2; num11 < 8; num11++)
                {
                    _tileHeight[num][num11] = -2;
                }
                _texturePosition[num] = new Vector2(3f, 2f);
                num++;
                _leftSideConnection[num] = 2;
                _rightSideConnection[num] = -1;
                _tileHeight[num][0] = 1;
                _tileHeight[num][1] = 2;
                for (int num12 = 2; num12 < 8; num12++)
                {
                    _tileHeight[num][num12] = -2;
                }
                _texturePosition[num] = new Vector2(4f, 2f);
                num++;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = 2;
                _tileHeight[num][6] = 2;
                _tileHeight[num][7] = 1;
                for (int num13 = 0; num13 < 6; num13++)
                {
                    _tileHeight[num][num13] = -2;
                }
                _texturePosition[num] = new Vector2(5f, 2f);
                num++;
                _leftSideConnection[num] = 0;
                _rightSideConnection[num] = -1;
                _tileHeight[num][0] = 8;
                _tileHeight[num][1] = 7;
                _tileHeight[num][2] = 6;
                for (int num14 = 3; num14 < 8; num14++)
                {
                    _tileHeight[num][num14] = -2;
                }
                _texturePosition[num] = new Vector2(6f, 2f);
                num++;
                _leftSideConnection[num] = -1;
                _rightSideConnection[num] = 0;
                _tileHeight[num][5] = 6;
                _tileHeight[num][6] = 7;
                _tileHeight[num][7] = 8;
                for (int num15 = 0; num15 < 5; num15++)
                {
                    _tileHeight[num][num15] = -2;
                }
                _texturePosition[num] = new Vector2(7f, 2f);
                num++;
                _leftSideConnection[num] = 1;
                _rightSideConnection[num] = 1;
                _trackType[num] = 2;
                _boostLeft[num] = false;
                _texturePosition[num] = new Vector2(2f, 3f);
                num++;
                _leftSideConnection[num] = 1;
                _rightSideConnection[num] = 1;
                _trackType[num] = 2;
                _boostLeft[num] = true;
                _texturePosition[num] = new Vector2(3f, 3f);
                num++;
                _leftSideConnection[num] = 0;
                _rightSideConnection[num] = 2;
                for (int num16 = 0; num16 < 8; num16++)
                {
                    _tileHeight[num][num16] = 8 - num16;
                }
                _trackType[num] = 2;
                _boostLeft[num] = false;
                _texturePosition[num] = new Vector2(4f, 3f);
                num++;
                _leftSideConnection[num] = 2;
                _rightSideConnection[num] = 0;
                for (int num17 = 0; num17 < 8; num17++)
                {
                    _tileHeight[num][num17] = num17 + 1;
                }
                _trackType[num] = 2;
                _boostLeft[num] = true;
                _texturePosition[num] = new Vector2(5f, 3f);
                num++;
                _leftSideConnection[num] = 0;
                _rightSideConnection[num] = 2;
                for (int num18 = 0; num18 < 8; num18++)
                {
                    _tileHeight[num][num18] = 8 - num18;
                }
                _trackType[num] = 2;
                _boostLeft[num] = true;
                _texturePosition[num] = new Vector2(6f, 3f);
                num++;
                _leftSideConnection[num] = 2;
                _rightSideConnection[num] = 0;
                for (int num19 = 0; num19 < 8; num19++)
                {
                    _tileHeight[num][num19] = num19 + 1;
                }
                _trackType[num] = 2;
                _boostLeft[num] = false;
                _texturePosition[num] = new Vector2(7f, 3f);
                num++;
                _texturePosition[36] = new Vector2(0f, 6f);
                _texturePosition[37] = new Vector2(1f, 6f);
                _texturePosition[39] = new Vector2(0f, 7f);
                _texturePosition[38] = new Vector2(1f, 7f);
                for (int num20 = 0; num20 < _texturePosition.Length; num20++)
                {
                    _texturePosition[num20] *= 18f;
                }
                for (int num21 = 0; num21 < _tileHeight.Length; num21++)
                {
                    int[] array2 = _tileHeight[num21];
                    for (int num22 = 0; num22 < array2.Length; num22++)
                    {
                        if (array2[num22] >= 0)
                        {
                            array2[num22] = (8 - array2[num22]) * 2;
                        }
                    }
                }
                int[] array3 = new int[36];
                _trackSwitchOptions = new int[64][];
                for (int num23 = 0; num23 < 64; num23++)
                {
                    int num24 = 0;
                    for (int num25 = 1; num25 < 256; num25 <<= 1)
                    {
                        if ((num23 & num25) == num25)
                        {
                            num24++;
                        }
                    }
                    int num26 = 0;
                    for (int num27 = 0; num27 < 36; num27++)
                    {
                        array3[num27] = -1;
                        int num28 = 0;
                        switch (_leftSideConnection[num27])
                        {
                            case 0:
                                num28 |= 1;
                                break;
                            case 1:
                                num28 |= 2;
                                break;
                            case 2:
                                num28 |= 4;
                                break;
                        }
                        switch (_rightSideConnection[num27])
                        {
                            case 0:
                                num28 |= 8;
                                break;
                            case 1:
                                num28 |= 0x10;
                                break;
                            case 2:
                                num28 |= 0x20;
                                break;
                        }
                        if (num24 < 2)
                        {
                            if (num23 != num28)
                            {
                                continue;
                            }
                        }
                        else if (num28 == 0 || (num23 & num28) != num28)
                        {
                            continue;
                        }
                        array3[num27] = num27;
                        num26++;
                    }
                    if (num26 == 0)
                    {
                        continue;
                    }
                    int[] array4 = new int[num26];
                    int num29 = 0;
                    for (int num30 = 0; num30 < 36; num30++)
                    {
                        if (array3[num30] != -1)
                        {
                            array4[num29] = array3[num30];
                            num29++;
                        }
                    }
                    _trackSwitchOptions[num23] = array4;
                }
                _firstPressureFrame = -1;
                _firstLeftBoostFrame = -1;
                _firstRightBoostFrame = -1;
                for (int num31 = 0; num31 < _trackType.Length; num31++)
                {
                    switch (_trackType[num31])
                    {
                        case 1:
                            if (_firstPressureFrame == -1)
                            {
                                _firstPressureFrame = (short)num31;
                            }
                            break;
                        case 2:
                            if (_boostLeft[num31])
                            {
                                if (_firstLeftBoostFrame == -1)
                                {
                                    _firstLeftBoostFrame = (short)num31;
                                }
                            }
                            else if (_firstRightBoostFrame == -1)
                            {
                                _firstRightBoostFrame = (short)num31;
                            }
                            break;
                    }
                }
            }

            public bool IsPressurePlate(ITile tile)
            {
                if (tile.active() && tile.type == 314 && (tile.frameX == 20 || tile.frameX == 21))
                {
                    return true;
                }
                return false;
            }

            public BitsByte TrackCollision(ref Vector2 Position, ref Vector2 Velocity, ref Vector2 lastBoost, int Width, int Height, bool followDown, bool followUp, int fallStart, bool trackOnly, Mount.MountDelegatesData delegatesData)
            {
                if (followDown && followUp)
                {
                    followDown = false;
                    followUp = false;
                }
                Vector2 vector = new Vector2((float)(Width / 2) - 25f, Height / 2);
                Vector2 vector2 = Position + new Vector2((float)(Width / 2) - 25f, Height / 2) + _trackMagnetOffset;
                Vector2 value = Velocity;
                float num = value.Length();
                value.Normalize();
                Vector2 vector3 = vector2;
                ITile tile = null;
                bool flag = false;
                bool flag2 = true;
                int num2 = -1;
                int num3 = -1;
                int num4 = -1;
                TrackState trackState = TrackState.NoTrack;
                bool flag3 = false;
                bool flag4 = false;
                bool flag5 = false;
                bool flag6 = false;
                Vector2 vector4 = Vector2.Zero;
                Vector2 vector5 = Vector2.Zero;
                BitsByte result = default(BitsByte);
                while (true)
                {
                    int num5 = (int)(vector3.X / 16f);
                    int num6 = (int)(vector3.Y / 16f);
                    int num7 = (int)vector3.X % 16 / 2;
                    if (flag2)
                    {
                        num4 = num7;
                    }
                    bool flag7 = num7 != num4;
                    if ((trackState == TrackState.OnBack || trackState == TrackState.OnTrack || trackState == TrackState.OnFront) && num5 != num2)
                    {
                        int num8 = (trackState != TrackState.OnBack) ? tile.FrontTrack() : tile.BackTrack();
                        switch ((!(value.X < 0f)) ? _rightSideConnection[num8] : _leftSideConnection[num8])
                        {
                            case 0:
                                num6--;
                                vector3.Y -= 2f;
                                break;
                            case 2:
                                num6++;
                                vector3.Y += 2f;
                                break;
                        }
                    }
                    TrackState trackState2 = TrackState.NoTrack;
                    bool flag8 = false;
                    if (num5 != num2 || num6 != num3)
                    {
                        if (flag2)
                        {
                            flag2 = false;
                        }
                        else
                        {
                            flag8 = true;
                        }
                        tile = this[num5, num6];
                        if (tile == null)
                        {
                            tile = CreateTile();
                            this[num5, num6] = tile;
                        }
                        flag = ((tile.nactive() && tile.type == 314) ? true : false);
                    }
                    if (flag)
                    {
                        TrackState trackState3 = TrackState.NoTrack;
                        int num9 = tile.FrontTrack();
                        int num10 = tile.BackTrack();
                        int num11 = _tileHeight[num9][num7];
                        switch (num11)
                        {
                            case -4:
                                if (trackState == TrackState.OnFront)
                                {
                                    if (trackOnly)
                                    {
                                        vector3 -= vector5;
                                        num = 0f;
                                        trackState2 = TrackState.OnFront;
                                        flag6 = true;
                                    }
                                    else
                                    {
                                        trackState2 = TrackState.NoTrack;
                                        flag5 = true;
                                    }
                                }
                                break;
                            case -1:
                                if (trackState == TrackState.OnFront)
                                {
                                    vector3 -= vector5;
                                    num = 0f;
                                    trackState2 = TrackState.OnFront;
                                    flag6 = true;
                                }
                                break;
                            case -2:
                                if (trackState != TrackState.OnFront)
                                {
                                    break;
                                }
                                if (trackOnly)
                                {
                                    vector3 -= vector5;
                                    num = 0f;
                                    trackState2 = TrackState.OnFront;
                                    flag6 = true;
                                    break;
                                }
                                if (value.X < 0f)
                                {
                                    float num14 = (float)(num5 * 16 + (num7 + 1) * 2) - vector3.X;
                                    vector3.X += num14;
                                    num += num14 / value.X;
                                }
                                value.X = 0f - value.X;
                                result[1] = true;
                                trackState2 = TrackState.OnFront;
                                break;
                            case -3:
                                if (trackState == TrackState.OnFront)
                                {
                                    trackState = TrackState.NoTrack;
                                    vector4 = Vector2.Transform(matrix: (Velocity.X > 0f) ? ((_leftSideConnection[num9] != 2) ? Matrix.CreateRotationZ((float)Math.PI / 4f) : Matrix.CreateRotationZ(-(float)Math.PI / 4f)) : ((_rightSideConnection[num9] != 2) ? Matrix.CreateRotationZ(-(float)Math.PI / 4f) : Matrix.CreateRotationZ((float)Math.PI / 4f)), position: new Vector2(Velocity.X, 0f));
                                    vector4.X = Velocity.X;
                                    flag4 = true;
                                    num = 0f;
                                }
                                break;
                            default:
                                {
                                    float num12 = num6 * 16 + num11;
                                    if (num5 != num2 && trackState == TrackState.NoTrack && vector3.Y > num12 && vector3.Y - num12 < 2f)
                                    {
                                        flag8 = false;
                                        trackState = TrackState.AboveFront;
                                    }
                                    TrackState trackState4 = (!(vector3.Y < num12)) ? ((!(vector3.Y > num12)) ? TrackState.OnTrack : TrackState.BelowTrack) : TrackState.AboveTrack;
                                    if (num10 != -1)
                                    {
                                        float num13 = num6 * 16 + _tileHeight[num10][num7];
                                        trackState3 = ((!(vector3.Y < num13)) ? ((!(vector3.Y > num13)) ? TrackState.OnTrack : TrackState.BelowTrack) : TrackState.AboveTrack);
                                    }
                                    switch (trackState4)
                                    {
                                        case TrackState.OnTrack:
                                            trackState2 = ((trackState3 == TrackState.OnTrack) ? TrackState.OnTrack : TrackState.OnFront);
                                            break;
                                        case TrackState.AboveTrack:
                                            switch (trackState3)
                                            {
                                                case TrackState.OnTrack:
                                                    trackState2 = TrackState.OnBack;
                                                    break;
                                                case TrackState.BelowTrack:
                                                    trackState2 = TrackState.AboveFront;
                                                    break;
                                                case TrackState.AboveTrack:
                                                    trackState2 = TrackState.AboveTrack;
                                                    break;
                                                default:
                                                    trackState2 = TrackState.AboveFront;
                                                    break;
                                            }
                                            break;
                                        case TrackState.BelowTrack:
                                            switch (trackState3)
                                            {
                                                case TrackState.OnTrack:
                                                    trackState2 = TrackState.OnBack;
                                                    break;
                                                case TrackState.AboveTrack:
                                                    trackState2 = TrackState.AboveBack;
                                                    break;
                                                case TrackState.BelowTrack:
                                                    trackState2 = TrackState.BelowTrack;
                                                    break;
                                                default:
                                                    trackState2 = TrackState.BelowTrack;
                                                    break;
                                            }
                                            break;
                                    }
                                    break;
                                }
                        }
                    }
                    if (!flag8)
                    {
                        if (trackState != trackState2)
                        {
                            bool flag9 = false;
                            if (flag7 || value.Y > 0f)
                            {
                                switch (trackState)
                                {
                                    case TrackState.AboveTrack:
                                        switch (trackState2)
                                        {
                                            case TrackState.AboveFront:
                                                trackState2 = TrackState.OnBack;
                                                break;
                                            case TrackState.AboveBack:
                                                trackState2 = TrackState.OnFront;
                                                break;
                                            case TrackState.AboveTrack:
                                                trackState2 = TrackState.OnTrack;
                                                break;
                                        }
                                        break;
                                    case TrackState.AboveFront:
                                        if (trackState2 == TrackState.BelowTrack)
                                        {
                                            trackState2 = TrackState.OnFront;
                                        }
                                        break;
                                    case TrackState.AboveBack:
                                        if (trackState2 == TrackState.BelowTrack)
                                        {
                                            trackState2 = TrackState.OnBack;
                                        }
                                        break;
                                    case TrackState.OnFront:
                                        trackState2 = TrackState.OnFront;
                                        flag9 = true;
                                        break;
                                    case TrackState.OnBack:
                                        trackState2 = TrackState.OnBack;
                                        flag9 = true;
                                        break;
                                    case TrackState.OnTrack:
                                        {
                                            int num15 = _tileHeight[tile.FrontTrack()][num7];
                                            int num16 = _tileHeight[tile.BackTrack()][num7];
                                            trackState2 = (followDown ? ((num15 >= num16) ? TrackState.OnFront : TrackState.OnBack) : ((!followUp) ? TrackState.OnFront : ((num15 >= num16) ? TrackState.OnBack : TrackState.OnFront)));
                                            flag9 = true;
                                            break;
                                        }
                                }
                                int num17 = -1;
                                switch (trackState2)
                                {
                                    case TrackState.OnTrack:
                                    case TrackState.OnFront:
                                        num17 = tile.FrontTrack();
                                        break;
                                    case TrackState.OnBack:
                                        num17 = tile.BackTrack();
                                        break;
                                }
                                if (num17 != -1)
                                {
                                    if (!flag9 && Velocity.Y > Terraria.Player.defaultGravity)
                                    {
                                        int num18 = (int)(Position.Y / 16f);
                                        if (fallStart < num18 - 1)
                                        {
                                            delegatesData.MinecartLandingSound(Position, Width, Height);
                                            WheelSparks(delegatesData.MinecartDust, Position, Width, Height, 10);
                                        }
                                    }
                                    if (trackState == TrackState.AboveFront && _trackType[num17] == 1)
                                    {
                                        flag3 = true;
                                    }
                                    value.Y = 0f;
                                    vector3.Y = num6 * 16 + _tileHeight[num17][num7];
                                }
                            }
                        }
                    }
                    else if (trackState2 == TrackState.OnFront || trackState2 == TrackState.OnBack || trackState2 == TrackState.OnTrack)
                    {
                        if (flag && _trackType[tile.FrontTrack()] == 1)
                        {
                            flag3 = true;
                        }
                        value.Y = 0f;
                    }
                    if (trackState2 == TrackState.OnFront)
                    {
                        int num19 = tile.FrontTrack();
                        if (_trackType[num19] == 2 && lastBoost.X == 0f && lastBoost.Y == 0f)
                        {
                            lastBoost = new Vector2(num5, num6);
                            if (_boostLeft[num19])
                            {
                                result[4] = true;
                            }
                            else
                            {
                                result[5] = true;
                            }
                        }
                    }
                    num4 = num7;
                    trackState = trackState2;
                    num2 = num5;
                    num3 = num6;
                    if (num > 0f)
                    {
                        float num20 = vector3.X % 2f;
                        float num21 = vector3.Y % 2f;
                        float num22 = 3f;
                        float num23 = 3f;
                        if (value.X < 0f)
                        {
                            num22 = num20 + 0.125f;
                        }
                        else if (value.X > 0f)
                        {
                            num22 = 2f - num20;
                        }
                        if (value.Y < 0f)
                        {
                            num23 = num21 + 0.125f;
                        }
                        else if (value.Y > 0f)
                        {
                            num23 = 2f - num21;
                        }
                        if (num22 == 3f && num23 == 3f)
                        {
                            break;
                        }
                        float num24 = Math.Abs(num22 / value.X);
                        float num25 = Math.Abs(num23 / value.Y);
                        float num26 = (num24 < num25) ? num24 : num25;
                        if (num26 > num)
                        {
                            vector5 = value * num;
                            num = 0f;
                        }
                        else
                        {
                            vector5 = value * num26;
                            num -= num26;
                        }
                        vector3 += vector5;
                        continue;
                    }
                    if (lastBoost.X != (float)num2 || lastBoost.Y != (float)num3)
                    {
                        lastBoost = Vector2.Zero;
                    }
                    break;
                }
                if (flag3)
                {
                    result[3] = true;
                }
                if (flag5)
                {
                    Velocity.X = vector3.X - vector2.X;
                    Velocity.Y = Terraria.Player.defaultGravity;
                }
                else if (flag4)
                {
                    result[2] = true;
                    Velocity = vector4;
                }
                else if (result[1])
                {
                    Velocity.X = 0f - Velocity.X;
                    Position.X = vector3.X - _trackMagnetOffset.X - vector.X - Velocity.X;
                    if (value.Y == 0f)
                    {
                        Velocity.Y = 0f;
                    }
                }
                else
                {
                    if (flag6)
                    {
                        Velocity.X = vector3.X - vector2.X;
                    }
                    if (value.Y == 0f)
                    {
                        Velocity.Y = 0f;
                    }
                }
                Position.Y += vector3.Y - vector2.Y - Velocity.Y;
                Position.Y = (float)Math.Round(Position.Y, 2);
                if (trackState == TrackState.OnTrack || (uint)(trackState - 5) <= 1u)
                {
                    result[0] = true;
                }
                return result;
            }

            public bool FrameTrack(int i, int j, bool pound, bool mute = false)
            {
                if (_trackType == null)
                {
                    return false;
                }
                ITile tile = this[i, j];
                if (tile == null)
                {
                    tile = CreateTile();
                    this[i, j] = tile;
                }
                if (mute && tile.type != 314)
                {
                    return false;
                }
                int nearbyTilesSetLookupIndex = GetNearbyTilesSetLookupIndex(i, j);
                int num = tile.FrontTrack();
                int num2 = tile.BackTrack();
                int num3 = (num >= 0 && num < _trackType.Length) ? _trackType[num] : 0;
                int num4 = -1;
                int num5 = -1;
                int[] array = _trackSwitchOptions[nearbyTilesSetLookupIndex];
                if (array == null)
                {
                    if (pound)
                    {
                        return false;
                    }
                    tile.FrontTrack(0);
                    tile.BackTrack(-1);
                    return false;
                }
                if (!pound)
                {
                    int num6 = -1;
                    int num7 = -1;
                    bool flag = false;
                    for (int k = 0; k < array.Length; k++)
                    {
                        int num8 = array[k];
                        if (num2 == array[k])
                        {
                            num5 = k;
                        }
                        if (_trackType[num8] != num3)
                        {
                            continue;
                        }
                        if (_leftSideConnection[num8] == -1 || _rightSideConnection[num8] == -1)
                        {
                            if (num == array[k])
                            {
                                num4 = k;
                                flag = true;
                            }
                            if (num6 == -1)
                            {
                                num6 = k;
                            }
                        }
                        else
                        {
                            if (num == array[k])
                            {
                                num4 = k;
                                flag = false;
                            }
                            if (num7 == -1)
                            {
                                num7 = k;
                            }
                        }
                    }
                    if (num7 != -1)
                    {
                        if (num4 == -1 || flag)
                        {
                            num4 = num7;
                        }
                    }
                    else
                    {
                        if (num4 == -1)
                        {
                            switch (num3)
                            {
                                case 2:
                                    return false;
                                case 1:
                                    return false;
                            }
                            num4 = num6;
                        }
                        num5 = -1;
                    }
                }
                else
                {
                    for (int l = 0; l < array.Length; l++)
                    {
                        if (num == array[l])
                        {
                            num4 = l;
                        }
                        if (num2 == array[l])
                        {
                            num5 = l;
                        }
                    }
                    int num9 = 0;
                    int num10 = 0;
                    for (int m = 0; m < array.Length; m++)
                    {
                        if (_trackType[array[m]] == num3)
                        {
                            if (_leftSideConnection[array[m]] == -1 || _rightSideConnection[array[m]] == -1)
                            {
                                num10++;
                            }
                            else
                            {
                                num9++;
                            }
                        }
                    }
                    if (num9 < 2 && num10 < 2)
                    {
                        return false;
                    }
                    bool flag2 = num9 == 0;
                    bool flag3 = false;
                    if (!flag2)
                    {
                        while (!flag3)
                        {
                            num5++;
                            if (num5 >= array.Length)
                            {
                                num5 = -1;
                                break;
                            }
                            if ((_leftSideConnection[array[num5]] != _leftSideConnection[array[num4]] || _rightSideConnection[array[num5]] != _rightSideConnection[array[num4]]) && _trackType[array[num5]] == num3 && _leftSideConnection[array[num5]] != -1 && _rightSideConnection[array[num5]] != -1)
                            {
                                flag3 = true;
                            }
                        }
                    }
                    if (!flag3)
                    {
                        do
                        {
                            num4++;
                            if (num4 >= array.Length)
                            {
                                num4 = -1;
                                do
                                {
                                    num4++;
                                }
                                while (_trackType[array[num4]] != num3 || (_leftSideConnection[array[num4]] == -1 || _rightSideConnection[array[num4]] == -1) != flag2);
                                break;
                            }
                        }
                        while (_trackType[array[num4]] != num3 || (_leftSideConnection[array[num4]] == -1 || _rightSideConnection[array[num4]] == -1) != flag2);
                    }
                }
                bool flag4 = false;
                switch (num4)
                {
                    case -2:
                        if (tile.FrontTrack() != _firstPressureFrame)
                        {
                            flag4 = true;
                        }
                        break;
                    case -1:
                        if (tile.FrontTrack() != 0)
                        {
                            flag4 = true;
                        }
                        break;
                    default:
                        if (tile.FrontTrack() != array[num4])
                        {
                            flag4 = true;
                        }
                        break;
                }
                if (num5 == -1)
                {
                    if (tile.BackTrack() != -1)
                    {
                        flag4 = true;
                    }
                }
                else if (tile.BackTrack() != array[num5])
                {
                    flag4 = true;
                }
                switch (num4)
                {
                    case -2:
                        tile.FrontTrack(_firstPressureFrame);
                        break;
                    case -1:
                        tile.FrontTrack(0);
                        break;
                    default:
                        tile.FrontTrack((short)array[num4]);
                        break;
                }
                if (num5 == -1)
                {
                    tile.BackTrack(-1);
                }
                else
                {
                    tile.BackTrack((short)array[num5]);
                }
                if (pound && flag4 && !mute)
                {
                    KillTile(i, j, fail: true);
                }
                return true;
            }

            public int GetNearbyTilesSetLookupIndex(int i, int j)
            {
                int num = 0;
                if (this[i - 1, j - 1] != null && this[i - 1, j - 1].type == 314)
                {
                    num++;
                }
                if (this[i - 1, j] != null && this[i - 1, j].type == 314)
                {
                    num += 2;
                }
                if (this[i - 1, j + 1] != null && this[i - 1, j + 1].type == 314)
                {
                    num += 4;
                }
                if (this[i + 1, j - 1] != null && this[i + 1, j - 1].type == 314)
                {
                    num += 8;
                }
                if (this[i + 1, j] != null && this[i + 1, j].type == 314)
                {
                    num += 16;
                }
                if (this[i + 1, j + 1] != null && this[i + 1, j + 1].type == 314)
                {
                    num += 32;
                }
                return num;
            }

            public bool GetOnTrack(int tileX, int tileY, ref Vector2 Position, int Width, int Height)
            {
                ITile tile = this[tileX, tileY];
                if (tile.type != 314)
                {
                    return false;
                }
                Vector2 value = new Vector2((float)(Width / 2) - 25f, Height / 2);
                Vector2 value2 = Position + value + _trackMagnetOffset;
                int num = (int)value2.X % 16 / 2;
                int num2 = -1;
                int num3 = 0;
                for (int i = num; i < 8; i++)
                {
                    num3 = _tileHeight[tile.frameX][i];
                    if (num3 >= 0)
                    {
                        num2 = i;
                        break;
                    }
                }
                if (num2 == -1)
                {
                    for (int num4 = num - 1; num4 >= 0; num4--)
                    {
                        num3 = _tileHeight[tile.frameX][num4];
                        if (num3 >= 0)
                        {
                            num2 = num4;
                            break;
                        }
                    }
                }
                if (num2 == -1)
                {
                    return false;
                }
                value2.X = tileX * 16 + num2 * 2;
                value2.Y = tileY * 16 + num3;
                value2 -= _trackMagnetOffset;
                value2 = (Position = value2 - value);
                return true;
            }

            public bool OnTrack(Vector2 Position, int Width, int Height)
            {
                Vector2 vector = Position + new Vector2((float)(Width / 2) - 25f, Height / 2) + _trackMagnetOffset;
                int x = (int)(vector.X / 16f);
                int y = (int)(vector.Y / 16f);
                if (this[x, y] == null)
                {
                    return false;
                }
                return this[x, y].type == 314;
            }

            public float TrackRotation(ref float rotation, Vector2 Position, int Width, int Height, bool followDown, bool followUp, Mount.MountDelegatesData delegatesData)
            {
                GetWheelsPositions(Position, Width, Height, followDown, followUp, delegatesData, out Vector2 leftWheel, out Vector2 rightWheel);
                float num = rightWheel.Y - leftWheel.Y;
                float num2 = rightWheel.X - leftWheel.X;
                float num3 = num / num2;
                float num4 = leftWheel.Y + (Position.X - leftWheel.X) * num3;
                float num5 = (Position.X - (float)(int)Position.X) * num3;
                rotation = (float)Math.Atan2(num, num2);
                return num4 - Position.Y + num5;
            }

            public void GetWheelsPositions(Vector2 Position, int Width, int Height, bool followDown, bool followUp, Mount.MountDelegatesData delegatesData, out Vector2 leftWheel, out Vector2 rightWheel)
            {
                leftWheel = Position;
                rightWheel = Position;
                Vector2 lastBoost = Vector2.Zero;
                Vector2 Velocity = new Vector2(-12f, 0f);
                TrackCollision(ref leftWheel, ref Velocity, ref lastBoost, Width, Height, followDown, followUp, 0, trackOnly: true, delegatesData);
                leftWheel += Velocity;
                Velocity = new Vector2(12f, 0f);
                TrackCollision(ref rightWheel, ref Velocity, ref lastBoost, Width, Height, followDown, followUp, 0, trackOnly: true, delegatesData);
                rightWheel += Velocity;
            }

            public void HitTrackSwitch(Vector2 Position, int Width, int Height)
            {
                Vector2 magnetPosition = GetMagnetPosition(Position, Width, Height);
                int num = (int)(magnetPosition.X / 16f);
                int num2 = (int)(magnetPosition.Y / 16f);
                HitSwitch(num, num2);
                SendDataToPlayer((PacketTypes)59, null, num, num2);
            }

            public Vector2 GetMagnetPosition(Vector2 Position, int Width, int Height)
            {
                new Vector2((float)(Width / 2) - 25f, Height / 2);
                return Position + new Vector2((float)(Width / 2) - 25f, Height / 2) + _trackMagnetOffset;
            }

            public void FlipSwitchTrack(int i, int j)
            {
                ITile tileTrack = this[i, j];
                short num = tileTrack.FrontTrack();
                if (num == -1)
                {
                    return;
                }
                switch (_trackType[num])
                {
                    case 0:
                        if (tileTrack.BackTrack() != -1)
                        {
                            tileTrack.FrontTrack(tileTrack.BackTrack());
                            tileTrack.BackTrack(num);
                            SendTileSquare(-1, i, j, 1);
                        }
                        break;
                    case 2:
                        FrameTrack(i, j, pound: true, mute: true);
                        SendTileSquare(-1, i, j, 1);
                        break;
                }
            }

            public void TrackColors(int i, int j, ITile trackTile, out int frontColor, out int backColor)
            {
                if (trackTile.type == 314)
                {
                    frontColor = trackTile.color();
                    backColor = frontColor;
                    if (trackTile.frameY == -1)
                    {
                        return;
                    }
                    int num = _leftSideConnection[trackTile.frameX];
                    int num2 = _rightSideConnection[trackTile.frameX];
                    int num3 = _leftSideConnection[trackTile.frameY];
                    int num4 = _rightSideConnection[trackTile.frameY];
                    int num5 = 0;
                    int num6 = 0;
                    int num7 = 0;
                    int num8 = 0;
                    for (int k = 0; k < 4; k++)
                    {
                        int num9;
                        switch (k)
                        {
                            default:
                                num9 = num;
                                break;
                            case 1:
                                num9 = num2;
                                break;
                            case 2:
                                num9 = num3;
                                break;
                            case 3:
                                num9 = num4;
                                break;
                        }
                        int num10;
                        switch (num9)
                        {
                            case 0:
                                num10 = -1;
                                break;
                            case 1:
                                num10 = 0;
                                break;
                            case 2:
                                num10 = 1;
                                break;
                            default:
                                num10 = 0;
                                break;
                        }
                        ITile tile = (k % 2 != 0) ? this[i + 1, j + num10] : this[i - 1, j + num10];
                        int num11 = (tile != null && tile.active() && tile.type == 314) ? tile.color() : 0;
                        switch (k)
                        {
                            default:
                                num5 = num11;
                                break;
                            case 1:
                                num6 = num11;
                                break;
                            case 2:
                                num7 = num11;
                                break;
                            case 3:
                                num8 = num11;
                                break;
                        }
                    }
                    if (num == num3)
                    {
                        if (num6 != 0)
                        {
                            frontColor = num6;
                        }
                        else if (num5 != 0)
                        {
                            frontColor = num5;
                        }
                        if (num8 != 0)
                        {
                            backColor = num8;
                        }
                        else if (num7 != 0)
                        {
                            backColor = num7;
                        }
                        return;
                    }
                    if (num2 == num4)
                    {
                        if (num5 != 0)
                        {
                            frontColor = num5;
                        }
                        else if (num6 != 0)
                        {
                            frontColor = num6;
                        }
                        if (num7 != 0)
                        {
                            backColor = num7;
                        }
                        else if (num8 != 0)
                        {
                            backColor = num8;
                        }
                        return;
                    }
                    if (num6 == 0)
                    {
                        if (num5 != 0)
                        {
                            frontColor = num5;
                        }
                    }
                    else if (num5 != 0)
                    {
                        frontColor = ((num2 <= num) ? num6 : num5);
                    }
                    if (num8 == 0)
                    {
                        if (num7 != 0)
                        {
                            backColor = num7;
                        }
                    }
                    else if (num7 != 0)
                    {
                        backColor = ((num4 <= num3) ? num8 : num7);
                    }
                }
                else
                {
                    frontColor = 0;
                    backColor = 0;
                }
            }

            public bool DrawLeftDecoration(int frameID)
            {
                if (frameID < 0 || frameID >= 36)
                {
                    return false;
                }
                return _leftSideConnection[frameID] == 2;
            }

            public bool DrawRightDecoration(int frameID)
            {
                if (frameID < 0 || frameID >= 36)
                {
                    return false;
                }
                return _rightSideConnection[frameID] == 2;
            }

            public bool DrawBumper(int frameID)
            {
                if (frameID < 0 || frameID >= 36)
                {
                    return false;
                }
                if (_tileHeight[frameID][0] != -1)
                {
                    return _tileHeight[frameID][7] == -1;
                }
                return true;
            }

            public bool DrawBouncyBumper(int frameID)
            {
                if (frameID < 0 || frameID >= 36)
                {
                    return false;
                }
                if (_tileHeight[frameID][0] != -2)
                {
                    return _tileHeight[frameID][7] == -2;
                }
                return true;
            }

            public void PlaceTrack(ITile trackCache, int style)
            {
                trackCache.active(active: true);
                trackCache.type = 314;
                trackCache.frameY = -1;
                switch (style)
                {
                    case 0:
                        trackCache.frameX = -1;
                        break;
                    case 1:
                        trackCache.frameX = _firstPressureFrame;
                        break;
                    case 2:
                        trackCache.frameX = _firstLeftBoostFrame;
                        break;
                    case 3:
                        trackCache.frameX = _firstRightBoostFrame;
                        break;
                }
            }

            public int GetTrackItem(ITile trackCache)
            {
                switch (_trackType[trackCache.frameX])
                {
                    case 0:
                        return 2340;
                    case 1:
                        return 2492;
                    case 2:
                        return 2739;
                    default:
                        return 0;
                }
            }

            public Rectangle GetSourceRect(int frameID, int animationFrame = 0)
            {
                if (frameID < 0 || frameID >= 40)
                {
                    return new Rectangle(0, 0, 0, 0);
                }
                Vector2 vector = _texturePosition[frameID];
                Rectangle result = new Rectangle((int)vector.X, (int)vector.Y, 16, 16);
                if (frameID < 36 && _trackType[frameID] == 2)
                {
                    result.Y += 18 * animationFrame;
                }
                return result;
            }

            public bool GetAreExpectationsForSidesMet(Point tileCoords, int? expectedYOffsetForLeft, int? expectedYOffsetForRight)
            {
                ITile tileTrack = this[tileCoords.X, tileCoords.Y];
                if (expectedYOffsetForLeft.HasValue)
                {
                    short num = tileTrack.FrontTrack();
                    int num2 = ConvertOffsetYToTrackConnectionValue(expectedYOffsetForLeft.Value);
                    if (_leftSideConnection[num] != num2)
                    {
                        return false;
                    }
                }
                if (expectedYOffsetForRight.HasValue)
                {
                    short num3 = tileTrack.FrontTrack();
                    int num4 = ConvertOffsetYToTrackConnectionValue(expectedYOffsetForRight.Value);
                    if (_rightSideConnection[num3] != num4)
                    {
                        return false;
                    }
                }
                return true;
            }
            public ITile GetTileSafely(Point pt)
            {
                return GetTileSafely(pt.X, pt.Y);
            }
            public void TryFittingTileOrientation(Point tileCoords, int? expectedYOffsetForLeft, int? expectedYOffsetForRight)
            {
                int nearbyTilesSetLookupIndex = GetNearbyTilesSetLookupIndex(tileCoords.X, tileCoords.Y);
                int[] array = _trackSwitchOptions[nearbyTilesSetLookupIndex];
                if (array == null)
                {
                    return;
                }
                ITile tileSafely = GetTileSafely(tileCoords);
                int num = _trackType[tileSafely.FrontTrack()];
                int? num2 = null;
                foreach (int num3 in array)
                {
                    _ = _leftSideConnection[num3];
                    _ = _rightSideConnection[num3];
                    _ = _trackType[num3];
                    if (expectedYOffsetForLeft.HasValue)
                    {
                        int num4 = ConvertOffsetYToTrackConnectionValue(expectedYOffsetForLeft.Value);
                        if (_leftSideConnection[num3] != num4)
                        {
                            continue;
                        }
                    }
                    if (expectedYOffsetForRight.HasValue)
                    {
                        int num5 = ConvertOffsetYToTrackConnectionValue(expectedYOffsetForRight.Value);
                        if (_rightSideConnection[num3] != num5)
                        {
                            continue;
                        }
                    }
                    if (_trackType[num3] == num)
                    {
                        num2 = num3;
                        break;
                    }
                }
                if (num2.HasValue)
                {
                    tileSafely.FrontTrack((short)num2.Value);
                    SendTileSquare(-1, tileCoords.X, tileCoords.Y, 1);
                }
            }

            public int ConvertOffsetYToTrackConnectionValue(int offsetY)
            {
                switch (offsetY)
                {
                    case -1:
                        return 0;
                    default:
                        return 1;
                    case 1:
                        return 2;
                }
            }

            public int ConvertTrackConnectionValueToOffsetY(int trackConnectionValue)
            {
                switch (trackConnectionValue)
                {
                    case 0:
                        return -1;
                    default:
                        return 0;
                    case 2:
                        return 1;
                }
            }

            public void WheelSparks(Action<Vector2> DustAction, Vector2 Position, int Width, int Height, int sparkCount)
            {
                Vector2 value = new Vector2((float)(Width / 2) - 25f, Height / 2);
                Vector2 obj = Position + value + _trackMagnetOffset;
                for (int i = 0; i < sparkCount; i++)
                {
                    DustAction(obj);
                }
            }
            #endregion
            #region  电路
            [MessagePackObject(keyAsPropertyName: true)]
            [Serializable]
            public class DoubleStack<T1>
            {
                [IgnoreMember]
                public T1[][] _segmentList;

                public readonly int _segmentSize;

                public int _segmentCount;

                public readonly int _segmentShiftPosition;

                public int _start;

                public int _end;

                public int _size;

                public int _last;

                public int Count => _size;

                public DoubleStack(int segmentSize = 1024, int initialSize = 0)
                {
                    if (segmentSize < 16)
                    {
                        segmentSize = 16;
                    }
                    _start = segmentSize / 2;
                    _end = _start;
                    _size = 0;
                    _segmentShiftPosition = segmentSize + _start;
                    initialSize += _start;
                    int num = initialSize / segmentSize + 1;
                    _segmentList = new T1[num][];
                    for (int i = 0; i < num; i++)
                    {
                        _segmentList[i] = new T1[segmentSize];
                    }
                    _segmentSize = segmentSize;
                    _segmentCount = num;
                    _last = _segmentSize * _segmentCount - 1;
                }

                public void PushFront(T1 front)
                {
                    if (_start == 0)
                    {
                        T1[][] array = new T1[_segmentCount + 1][];
                        for (int i = 0; i < _segmentCount; i++)
                        {
                            array[i + 1] = _segmentList[i];
                        }
                        array[0] = new T1[_segmentSize];
                        _segmentList = array;
                        _segmentCount++;
                        _start += _segmentSize;
                        _end += _segmentSize;
                        _last += _segmentSize;
                    }
                    _start--;
                    T1[] obj = _segmentList[_start / _segmentSize];
                    int num = _start % _segmentSize;
                    obj[num] = front;
                    _size++;
                }

                public T1 PopFront()
                {
                    if (_size == 0)
                    {
                        throw new InvalidOperationException("The DoubleStack is empty.");
                    }
                    T1[] obj = _segmentList[_start / _segmentSize];
                    int num = _start % _segmentSize;
                    T1 result = obj[num];
                    obj[num] = default(T1);
                    _start++;
                    _size--;
                    if (_start >= _segmentShiftPosition)
                    {
                        T1[] array = _segmentList[0];
                        for (int i = 0; i < _segmentCount - 1; i++)
                        {
                            _segmentList[i] = _segmentList[i + 1];
                        }
                        _segmentList[_segmentCount - 1] = array;
                        _start -= _segmentSize;
                        _end -= _segmentSize;
                    }
                    if (_size == 0)
                    {
                        _start = _segmentSize / 2;
                        _end = _start;
                    }
                    return result;
                }

                public T1 PeekFront()
                {
                    if (_size == 0)
                    {
                        throw new InvalidOperationException("The DoubleStack is empty.");
                    }
                    T1[] obj = _segmentList[_start / _segmentSize];
                    int num = _start % _segmentSize;
                    return obj[num];
                }

                public void PushBack(T1 back)
                {
                    if (_end == _last)
                    {
                        T1[][] array = new T1[_segmentCount + 1][];
                        for (int i = 0; i < _segmentCount; i++)
                        {
                            array[i] = _segmentList[i];
                        }
                        array[_segmentCount] = new T1[_segmentSize];
                        _segmentCount++;
                        _segmentList = array;
                        _last += _segmentSize;
                    }
                    T1[] obj = _segmentList[_end / _segmentSize];
                    int num = _end % _segmentSize;
                    obj[num] = back;
                    _end++;
                    _size++;
                }

                public T1 PopBack()
                {
                    if (_size == 0)
                    {
                        throw new InvalidOperationException("The DoubleStack is empty.");
                    }
                    T1[] obj = _segmentList[_end / _segmentSize];
                    int num = _end % _segmentSize;
                    T1 result = obj[num];
                    obj[num] = default(T1);
                    _end--;
                    _size--;
                    if (_size == 0)
                    {
                        _start = _segmentSize / 2;
                        _end = _start;
                    }
                    return result;
                }

                public T1 PeekBack()
                {
                    if (_size == 0)
                    {
                        throw new InvalidOperationException("The DoubleStack is empty.");
                    }
                    T1[] obj = _segmentList[_end / _segmentSize];
                    int num = _end % _segmentSize;
                    return obj[num];
                }

                public void Clear(bool quickClear = false)
                {
                    if (!quickClear)
                    {
                        for (int i = 0; i < _segmentCount; i++)
                        {
                            Array.Clear(_segmentList[i], 0, _segmentSize);
                        }
                    }
                    _start = _segmentSize / 2;
                    _end = _start;
                    _size = 0;
                }
            }
            [MessagePackObject(keyAsPropertyName: true)]
            [Serializable]
            public struct Point16
            {
                public readonly short X;

                public readonly short Y;
                [IgnoreMember]
                public static Point16 Zero = new Point16(0, 0);
                [IgnoreMember]
                public static Point16 NegativeOne = new Point16(-1, -1);

                public Point16(Point point)
                {
                    X = (short)point.X;
                    Y = (short)point.Y;
                }

                public Point16(int X, int Y)
                {
                    this.X = (short)X;
                    this.Y = (short)Y;
                }

                public Point16(short X, short Y)
                {
                    this.X = X;
                    this.Y = Y;
                }

                public static Point16 Max(int firstX, int firstY, int secondX, int secondY)
                {
                    return new Point16((firstX > secondX) ? firstX : secondX, (firstY > secondY) ? firstY : secondY);
                }

                public Point16 Max(int compareX, int compareY)
                {
                    return new Point16((X > compareX) ? X : compareX, (Y > compareY) ? Y : compareY);
                }

                public Point16 Max(Point16 compareTo)
                {
                    return new Point16((X > compareTo.X) ? X : compareTo.X, (Y > compareTo.Y) ? Y : compareTo.Y);
                }

                public static bool operator ==(Point16 first, Point16 second)
                {
                    if (first.X == second.X)
                    {
                        return first.Y == second.Y;
                    }
                    return false;
                }

                public static bool operator !=(Point16 first, Point16 second)
                {
                    if (first.X == second.X)
                    {
                        return first.Y != second.Y;
                    }
                    return true;
                }

                public static implicit operator Point16(Terraria.DataStructures.Point16 v)
                {
                    return new Point16(v.X, v.Y);
                }

                public static implicit operator Terraria.DataStructures.Point16(Point16 v)
                {
                    return new Terraria.DataStructures.Point16(v.X, v.Y);
                }

                public override bool Equals(object obj)
                {
                    Point16 point = (Point16)obj;
                    if (X != point.X || Y != point.Y)
                    {
                        return false;
                    }
                    return true;
                }

                public override int GetHashCode()
                {
                    return (X << 16) | (ushort)Y;
                }

                public override string ToString()
                {
                    return $"{{{X}, {Y}}}";
                }
            }

            public bool blockPlayerTeleportationForOneIteration;

            public bool running;
            [IgnoreMember]
            public Dictionary<Point16, bool> _wireSkip;
            [IgnoreMember]
            public DoubleStack<Point16> _wireList;
            [IgnoreMember]
            public DoubleStack<byte> _wireDirectionList;
            [IgnoreMember]
            public Dictionary<Point16, byte> _toProcess;
            [IgnoreMember]
            public Queue<Point16> _GatesCurrent;
            [IgnoreMember]
            public Queue<Point16> _LampsToCheck;
            [IgnoreMember]
            public Queue<Point16> _GatesNext;
            [IgnoreMember]
            public Dictionary<Point16, bool> _GatesDone;
            [IgnoreMember]
            public Dictionary<Point16, byte> _PixelBoxTriggers;
            [IgnoreMember]
            public Vector2[] _teleport;

            public const int MaxPump = 20;
            [IgnoreMember]
            public int[] _inPumpX;
            [IgnoreMember]
            public int[] _inPumpY;
            [IgnoreMember]
            public int _numInPump;
            [IgnoreMember]
            public int[] _outPumpX;
            [IgnoreMember]
            public int[] _outPumpY;
            [IgnoreMember]
            public int _numOutPump;
            [IgnoreMember]
            public const int MaxMech = 1000;
            [IgnoreMember]
            public int[] _mechX;
            [IgnoreMember]
            public int[] _mechY;
            [IgnoreMember]
            public int _numMechs;
            [IgnoreMember]
            public int[] _mechTime;
            [IgnoreMember]
            public int _currentWireColor;
            [IgnoreMember]
            public int CurrentUser = 255;

            public void SetCurrentUser(int plr = -1)
            {
                if (plr < 0 || plr > 255)
                {
                    plr = 255;
                }
                if (Main.netMode == 0)
                {
                    plr = Main.myPlayer;
                }
                CurrentUser = plr;
            }

            public void InitializeWiring()
            {
                _wireSkip = new Dictionary<Point16, bool>();
                _wireList = new DoubleStack<Point16>();
                _wireDirectionList = new DoubleStack<byte>();
                _toProcess = new Dictionary<Point16, byte>();
                _GatesCurrent = new Queue<Point16>();
                _GatesNext = new Queue<Point16>();
                _GatesDone = new Dictionary<Point16, bool>();
                _LampsToCheck = new Queue<Point16>();
                _PixelBoxTriggers = new Dictionary<Point16, byte>();
                _inPumpX = new int[20];
                _inPumpY = new int[20];
                _outPumpX = new int[20];
                _outPumpY = new int[20];
                _teleport = new Vector2[2];
                _mechX = new int[1000];
                _mechY = new int[1000];
                _mechTime = new int[1000];
            }

            public void SkipWire(int x, int y)
            {
                _wireSkip[new Point16(x, y)] = true;
            }

            public void SkipWire(Point16 point)
            {
                _wireSkip[point] = true;
            }

            public void UpdateMech()
            {
                SetCurrentUser();
                for (int num = _numMechs - 1; num >= 0; num--)
                {
                    _mechTime[num]--;
                    if (this[_mechX[num], _mechY[num]].active() && this[_mechX[num], _mechY[num]].type == 144)
                    {
                        if (this[_mechX[num], _mechY[num]].frameY == 0)
                        {
                            _mechTime[num] = 0;
                        }
                        else
                        {
                            int num2 = this[_mechX[num], _mechY[num]].frameX / 18;
                            switch (num2)
                            {
                                case 0:
                                    num2 = 60;
                                    break;
                                case 1:
                                    num2 = 180;
                                    break;
                                case 2:
                                    num2 = 300;
                                    break;
                                case 3:
                                    num2 = 30;
                                    break;
                                case 4:
                                    num2 = 15;
                                    break;
                            }
                            if (Math.IEEERemainder(_mechTime[num], num2) == 0.0)
                            {
                                _mechTime[num] = 18000;
                                TripWire(_mechX[num], _mechY[num], 1, 1);
                            }
                        }
                    }
                    if (_mechTime[num] <= 0)
                    {
                        if (this[_mechX[num], _mechY[num]].active() && this[_mechX[num], _mechY[num]].type == 144)
                        {
                            this[_mechX[num], _mechY[num]].frameY = 0;
                            SendTileSquare(-1, _mechX[num], _mechY[num], 1);
                        }
                        if (this[_mechX[num], _mechY[num]].active() && this[_mechX[num], _mechY[num]].type == 411)
                        {
                            ITile tile = this[_mechX[num], _mechY[num]];
                            int num3 = tile.frameX % 36 / 18;
                            int num4 = tile.frameY % 36 / 18;
                            int num5 = _mechX[num] - num3;
                            int num6 = _mechY[num] - num4;
                            int num7 = 36;
                            if (this[num5, num6].frameX >= 36)
                            {
                                num7 = -36;
                            }
                            for (int i = num5; i < num5 + 2; i++)
                            {
                                for (int j = num6; j < num6 + 2; j++)
                                {
                                    this[i, j].frameX = (short)(this[i, j].frameX + num7);
                                }
                            }
                            SendTileSquare(-1, num5, num6, 2);
                        }
                        for (int k = num; k < _numMechs; k++)
                        {
                            _mechX[k] = _mechX[k + 1];
                            _mechY[k] = _mechY[k + 1];
                            _mechTime[k] = _mechTime[k + 1];
                        }
                        _numMechs--;
                    }
                }
            }

            public void HitSwitch(int i, int j)
            {
                if (!InWorld(i, j) || this[i, j] == null)
                {
                    return;
                }
                if (this[i, j].type == 135 || this[i, j].type == 314 || this[i, j].type == 423 || this[i, j].type == 428 || this[i, j].type == 442 || this[i, j].type == 476)
                {
                    TripWire(i, j, 1, 1);
                }
                else if (this[i, j].type == 440)
                {
                    TripWire(i, j, 3, 3);
                }
                else if (this[i, j].type == 136)
                {
                    if (this[i, j].frameY == 0)
                    {
                        this[i, j].frameY = 18;
                    }
                    else
                    {
                        this[i, j].frameY = 0;
                    }
                    TripWire(i, j, 1, 1);
                }
                else if (this[i, j].type == 443)
                {
                    GeyserTrap(i, j);
                }
                else if (this[i, j].type == 144)
                {
                    if (this[i, j].frameY == 0)
                    {
                        this[i, j].frameY = 18;
                        if (Main.netMode != 1)
                        {
                            CheckMech(i, j, 18000);
                        }
                    }
                    else
                    {
                        this[i, j].frameY = 0;
                    }
                }
                else if (this[i, j].type == 441 || this[i, j].type == 468)
                {
                    int num = this[i, j].frameX / 18 * -1;
                    int num2 = this[i, j].frameY / 18 * -1;
                    num %= 4;
                    if (num < -1)
                    {
                        num += 2;
                    }
                    num += i;
                    num2 += j;
                    TripWire(num, num2, 2, 2);
                }
                else if (this[i, j].type == 467)
                {
                    if (this[i, j].frameX / 36 == 4)
                    {
                        int num3 = this[i, j].frameX / 18 * -1;
                        int num4 = this[i, j].frameY / 18 * -1;
                        num3 %= 4;
                        if (num3 < -1)
                        {
                            num3 += 2;
                        }
                        num3 += i;
                        num4 += j;
                        TripWire(num3, num4, 2, 2);
                    }
                }
                else
                {
                    if (this[i, j].type != 132 && this[i, j].type != 411)
                    {
                        return;
                    }
                    short num5 = 36;
                    int num6 = this[i, j].frameX / 18 * -1;
                    int num7 = this[i, j].frameY / 18 * -1;
                    num6 %= 4;
                    if (num6 < -1)
                    {
                        num6 += 2;
                        num5 = -36;
                    }
                    num6 += i;
                    num7 += j;
                    if (Main.netMode != 1 && this[num6, num7].type == 411)
                    {
                        CheckMech(num6, num7, 60);
                    }
                    for (int k = num6; k < num6 + 2; k++)
                    {
                        for (int l = num7; l < num7 + 2; l++)
                        {
                            if (this[k, l].type == 132 || this[k, l].type == 411)
                            {
                                this[k, l].frameX += num5;
                            }
                        }
                    }
                    TileFrame(num6, num7);
                    TripWire(num6, num7, 2, 2);
                }
            }

            public void PokeLogicGate(int lampX, int lampY)
            {
                if (Main.netMode != 1)
                {
                    _LampsToCheck.Enqueue(new Point16(lampX, lampY));
                    LogicGatePass();
                }
            }

            public void ActuateForced(int i, int j)
            {
                if (this[i, j].inActive())
                {
                    ReActive(i, j);
                }
                else
                {
                    DeActive(i, j);
                }
            }

            public void MassWireOperation(Point ps, Point pe, Player master)
            {
                int wireCount = 0;
                int actuatorCount = 0;
                for (int i = 0; i < 58; i++)
                {
                    if (master.inventory[i].type == 530)
                    {
                        wireCount += master.inventory[i].stack;
                    }
                    if (master.inventory[i].type == 849)
                    {
                        actuatorCount += master.inventory[i].stack;
                    }
                }
                int num = wireCount;
                int num2 = actuatorCount;
                MassWireOperationInner(ps, pe, master.Center, master.direction == 1, ref wireCount, ref actuatorCount);
                int num3 = num - wireCount;
                int num4 = num2 - actuatorCount;
                if (Main.netMode == 2)
                {
                    SendDataToPlayer(110, master.whoAmI, -1, null, 530, num3, master.whoAmI);
                    SendDataToPlayer(110, master.whoAmI, -1, null, 849, num4, master.whoAmI);
                    return;
                }
                for (int j = 0; j < num3; j++)
                {
                    master.ConsumeItem(530);
                }
                for (int k = 0; k < num4; k++)
                {
                    master.ConsumeItem(849);
                }
            }

            public bool CheckMech(int i, int j, int time)
            {
                for (int k = 0; k < _numMechs; k++)
                {
                    if (_mechX[k] == i && _mechY[k] == j)
                    {
                        return false;
                    }
                }
                if (_numMechs < 999)
                {
                    _mechX[_numMechs] = i;
                    _mechY[_numMechs] = j;
                    _mechTime[_numMechs] = time;
                    _numMechs++;
                    return true;
                }
                return false;
            }

            public void XferWater()
            {
                for (int i = 0; i < _numInPump; i++)
                {
                    int num = _inPumpX[i];
                    int num2 = _inPumpY[i];
                    int liquid = this[num, num2].liquid;
                    if (liquid <= 0)
                    {
                        continue;
                    }
                    bool flag = this[num, num2].lava();
                    bool flag2 = this[num, num2].honey();
                    for (int j = 0; j < _numOutPump; j++)
                    {
                        int num3 = _outPumpX[j];
                        int num4 = _outPumpY[j];
                        int liquid2 = this[num3, num4].liquid;
                        if (liquid2 >= 255)
                        {
                            continue;
                        }
                        bool flag3 = this[num3, num4].lava();
                        bool flag4 = this[num3, num4].honey();
                        if (liquid2 == 0)
                        {
                            flag3 = flag;
                            flag4 = flag2;
                        }
                        if (flag == flag3 && flag2 == flag4)
                        {
                            int num5 = liquid;
                            if (num5 + liquid2 > 255)
                            {
                                num5 = 255 - liquid2;
                            }
                            this[num3, num4].liquid += (byte)num5;
                            this[num, num2].liquid -= (byte)num5;
                            liquid = this[num, num2].liquid;
                            this[num3, num4].lava(flag);
                            this[num3, num4].honey(flag2);
                            SquareTileFrame(num3, num4);
                            if (this[num, num2].liquid == 0)
                            {
                                this[num, num2].lava(lava: false);
                                SquareTileFrame(num, num2);
                                break;
                            }
                        }
                    }
                    SquareTileFrame(num, num2);
                }
            }

            public void TripWire(int left, int top, int width, int height)
            {
                if (Main.netMode == 1)
                {
                    return;
                }
                running = true;
                if (_wireList.Count != 0)
                {
                    _wireList.Clear(quickClear: true);
                }
                if (_wireDirectionList.Count != 0)
                {
                    _wireDirectionList.Clear(quickClear: true);
                }
                Vector2[] array = new Vector2[8];
                int num = 0;
                for (int i = left; i < left + width; i++)
                {
                    for (int j = top; j < top + height; j++)
                    {
                        Point16 back = new Point16(i, j);
                        ITile tile = this[i, j];
                        if (tile != null && tile.wire())
                        {
                            _wireList.PushBack(back);
                        }
                    }
                }
                _teleport[0].X = -1f;
                _teleport[0].Y = -1f;
                _teleport[1].X = -1f;
                _teleport[1].Y = -1f;
                if (_wireList.Count > 0)
                {
                    _numInPump = 0;
                    _numOutPump = 0;
                    HitWire(_wireList, 1);
                    if (_numInPump > 0 && _numOutPump > 0)
                    {
                        XferWater();
                    }
                }
                array[num++] = _teleport[0];
                array[num++] = _teleport[1];
                for (int k = left; k < left + width; k++)
                {
                    for (int l = top; l < top + height; l++)
                    {
                        Point16 back = new Point16(k, l);
                        ITile tile2 = this[k, l];
                        if (tile2 != null && tile2.wire2())
                        {
                            _wireList.PushBack(back);
                        }
                    }
                }
                _teleport[0].X = -1f;
                _teleport[0].Y = -1f;
                _teleport[1].X = -1f;
                _teleport[1].Y = -1f;
                if (_wireList.Count > 0)
                {
                    _numInPump = 0;
                    _numOutPump = 0;
                    HitWire(_wireList, 2);
                    if (_numInPump > 0 && _numOutPump > 0)
                    {
                        XferWater();
                    }
                }
                array[num++] = _teleport[0];
                array[num++] = _teleport[1];
                _teleport[0].X = -1f;
                _teleport[0].Y = -1f;
                _teleport[1].X = -1f;
                _teleport[1].Y = -1f;
                for (int m = left; m < left + width; m++)
                {
                    for (int n = top; n < top + height; n++)
                    {
                        Point16 back = new Point16(m, n);
                        ITile tile3 = this[m, n];
                        if (tile3 != null && tile3.wire3())
                        {
                            _wireList.PushBack(back);
                        }
                    }
                }
                if (_wireList.Count > 0)
                {
                    _numInPump = 0;
                    _numOutPump = 0;
                    HitWire(_wireList, 3);
                    if (_numInPump > 0 && _numOutPump > 0)
                    {
                        XferWater();
                    }
                }
                array[num++] = _teleport[0];
                array[num++] = _teleport[1];
                _teleport[0].X = -1f;
                _teleport[0].Y = -1f;
                _teleport[1].X = -1f;
                _teleport[1].Y = -1f;
                for (int num2 = left; num2 < left + width; num2++)
                {
                    for (int num3 = top; num3 < top + height; num3++)
                    {
                        Point16 back = new Point16(num2, num3);
                        ITile tile4 = this[num2, num3];
                        if (tile4 != null && tile4.wire4())
                        {
                            _wireList.PushBack(back);
                        }
                    }
                }
                if (_wireList.Count > 0)
                {
                    _numInPump = 0;
                    _numOutPump = 0;
                    HitWire(_wireList, 4);
                    if (_numInPump > 0 && _numOutPump > 0)
                    {
                        XferWater();
                    }
                }
                array[num++] = _teleport[0];
                array[num++] = _teleport[1];
                running = false;
                for (int num4 = 0; num4 < 8; num4 += 2)
                {
                    _teleport[0] = array[num4];
                    _teleport[1] = array[num4 + 1];
                    if (_teleport[0].X >= 0f && _teleport[1].X >= 0f)
                    {
                        Teleport();
                    }
                }
                PixelBoxPass();
                LogicGatePass();
            }

            public void PixelBoxPass()
            {
                foreach (KeyValuePair<Point16, byte> pixelBoxTrigger in _PixelBoxTriggers)
                {
                    if (pixelBoxTrigger.Value != 2)
                    {
                        if (pixelBoxTrigger.Value == 1)
                        {
                            if (this[pixelBoxTrigger.Key.X, pixelBoxTrigger.Key.Y].frameX != 0)
                            {
                                this[pixelBoxTrigger.Key.X, pixelBoxTrigger.Key.Y].frameX = 0;
                                SendTileSquare(-1, pixelBoxTrigger.Key.X, pixelBoxTrigger.Key.Y, 1);
                            }
                        }
                        else if (pixelBoxTrigger.Value == 3 && this[pixelBoxTrigger.Key.X, pixelBoxTrigger.Key.Y].frameX != 18)
                        {
                            this[pixelBoxTrigger.Key.X, pixelBoxTrigger.Key.Y].frameX = 18;
                            SendTileSquare(-1, pixelBoxTrigger.Key.X, pixelBoxTrigger.Key.Y, 1);
                        }
                    }
                }
                _PixelBoxTriggers.Clear();
            }

            public void LogicGatePass()
            {
                if (_GatesCurrent.Count != 0)
                {
                    return;
                }
                _GatesDone.Clear();
                while (_LampsToCheck.Count > 0)
                {
                    while (_LampsToCheck.Count > 0)
                    {
                        Point16 point = _LampsToCheck.Dequeue();
                        CheckLogicGate(point.X, point.Y);
                    }
                    while (_GatesNext.Count > 0)
                    {
                        Terraria.Utils.Swap(ref _GatesCurrent, ref _GatesNext);
                        while (_GatesCurrent.Count > 0)
                        {
                            Point16 key = _GatesCurrent.Peek();
                            if (_GatesDone.TryGetValue(key, out bool value) && value)
                            {
                                _GatesCurrent.Dequeue();
                                continue;
                            }
                            _GatesDone.Add(key, value: true);
                            TripWire(key.X, key.Y, 1, 1);
                            _GatesCurrent.Dequeue();
                        }
                    }
                }
                _GatesDone.Clear();
                if (blockPlayerTeleportationForOneIteration)
                {
                    blockPlayerTeleportationForOneIteration = false;
                }
            }
            public bool CloseDoor(int i, int j, bool forced = false)
            {
                int num = 0;
                int num2 = i;
                int num3 = j;
                if (this[i, j] == null)
                {
                    this[i, j] = CreateTile();
                }
                int frameX = this[i, j].frameX;
                ITile tile = this[i, j];
                if (tile.type != 11)
                {
                    return false;
                }
                int num4 = tile.frameY;
                int num5 = 0;
                int num6 = 0;
                while (num4 >= 54)
                {
                    num4 -= 54;
                    num5++;
                }
                if (frameX >= 72)
                {
                    num5 += 36 * (frameX / 72);
                    num6 += 54 * (frameX / 72);
                }
                num3 = j - num4 / 18;
                switch (frameX % 72)
                {
                    case 0:
                        num2 = i;
                        num = 1;
                        break;
                    case 18:
                        num2 = i - 1;
                        num = 1;
                        break;
                    case 36:
                        num2 = i + 1;
                        num = -1;
                        break;
                    case 54:
                        num2 = i;
                        num = -1;
                        break;
                }
                int num7 = num2;
                if (num == -1)
                {
                    num7 = num2 - 1;
                }
                if (!forced)
                {
                    for (int k = num3; k < num3 + 3; k++)
                    {
                        if (!EmptyTile(num2, k, ignoreTiles: true))
                        {
                            return false;
                        }
                    }
                }
                for (int l = num7; l < num7 + 2; l++)
                {
                    for (int m = num3; m < num3 + 3; m++)
                    {
                        if (l == num2)
                        {
                            if (this[l, m] == null)
                            {
                                this[l, m] = CreateTile();
                            }
                            this[l, m].type = 10;
                            this[l, m].frameX = (short)(genRand.Next(3) * 18 + num6);
                        }
                        else
                        {
                            if (this[l, m] == null)
                            {
                                this[l, m] = CreateTile();
                            }
                            this[l, m].active(active: false);
                        }
                    }
                }
                if (Main.netMode != 1 && running)
                {
                    SkipWire(num2, num3);
                    SkipWire(num2, num3 + 1);
                    SkipWire(num2, num3 + 2);
                }
                for (int n = num2 - 1; n <= num2 + 1; n++)
                {
                    for (int num8 = num3 - 1; num8 <= num3 + 2; num8++)
                    {
                        TileFrame(n, num8);
                    }
                }
                return true;
            }
            public bool OpenDoor(int i, int j, int direction)
            {
                int num = 0;
                if (this[i, j - 1] == null)
                {
                    this[i, j - 1] = CreateTile();
                }
                if (this[i, j - 2] == null)
                {
                    this[i, j - 2] = CreateTile();
                }
                if (this[i, j + 1] == null)
                {
                    this[i, j + 1] = CreateTile();
                }
                if (this[i, j] == null)
                {
                    this[i, j] = CreateTile();
                }
                ITile tile = this[i, j];
                if (tile.type != 10)
                {
                    return false;
                }
                if (IsLockedDoor(tile))
                {
                    return false;
                }
                short num2 = 0;
                int num3 = tile.frameY;
                int num4 = 0;
                while (num3 >= 54)
                {
                    num3 -= 54;
                    num4++;
                }
                if (tile.frameX >= 54)
                {
                    int num5 = tile.frameX / 54;
                    num4 += 36 * num5;
                    num2 = (short)(num2 + (short)(72 * num5));
                }
                num = j - num3 / 18;
                int x = i;
                byte color = this[x, num].color();
                if (this[x, num + 1] == null)
                {
                    this[x, num + 1] = CreateTile();
                }
                byte color2 = this[x, num + 1].color();
                if (this[x, num + 2] == null)
                {
                    this[x, num + 2] = CreateTile();
                }
                byte color3 = this[x, num + 2].color();
                int num6;
                if (direction == -1)
                {
                    x = i - 1;
                    num2 = (short)(num2 + 36);
                    num6 = i - 1;
                }
                else
                {
                    x = i;
                    num6 = i + 1;
                }
                for (int k = num; k < num + 3; k++)
                {
                    if (this[num6, k] == null)
                    {
                        this[num6, k] = CreateTile();
                    }
                    if (this[num6, k].active())
                    {
                        if (!Main.tileCut[this[num6, k].type] && this[num6, k].type != 3 && this[num6, k].type != 24 && this[num6, k].type != 52 && this[num6, k].type != 61 && this[num6, k].type != 62 && this[num6, k].type != 69 && this[num6, k].type != 71 && this[num6, k].type != 73 && this[num6, k].type != 74 && this[num6, k].type != 110 && this[num6, k].type != 113 && this[num6, k].type != 115 && this[num6, k].type != 165)
                        {
                            return false;
                        }
                        KillTile(num6, k);
                    }
                }
                if (Main.netMode != 1 && running)
                {
                    SkipWire(x, num);
                    SkipWire(x, num + 1);
                    SkipWire(x, num + 2);
                    SkipWire(x + 1, num);
                    SkipWire(x + 1, num + 1);
                    SkipWire(x + 1, num + 2);
                }
                int num7 = num4 % 36 * 54;
                this[x, num].active(active: true);
                this[x, num].type = 11;
                this[x, num].frameY = (short)num7;
                this[x, num].frameX = num2;
                this[x, num].color(color);
                if (this[x + 1, num] == null)
                {
                    this[x + 1, num] = CreateTile();
                }
                this[x + 1, num].active(active: true);
                this[x + 1, num].type = 11;
                this[x + 1, num].frameY = (short)num7;
                this[x + 1, num].frameX = (short)(num2 + 18);
                this[x + 1, num].color(color);
                if (this[x, num + 1] == null)
                {
                    this[x, num + 1] = CreateTile();
                }
                this[x, num + 1].active(active: true);
                this[x, num + 1].type = 11;
                this[x, num + 1].frameY = (short)(num7 + 18);
                this[x, num + 1].frameX = num2;
                this[x, num + 1].color(color2);
                if (this[x + 1, num + 1] == null)
                {
                    this[x + 1, num + 1] = CreateTile();
                }
                this[x + 1, num + 1].active(active: true);
                this[x + 1, num + 1].type = 11;
                this[x + 1, num + 1].frameY = (short)(num7 + 18);
                this[x + 1, num + 1].frameX = (short)(num2 + 18);
                this[x + 1, num + 1].color(color2);
                if (this[x, num + 2] == null)
                {
                    this[x, num + 2] = CreateTile();
                }
                this[x, num + 2].active(active: true);
                this[x, num + 2].type = 11;
                this[x, num + 2].frameY = (short)(num7 + 36);
                this[x, num + 2].frameX = num2;
                this[x, num + 2].color(color3);
                if (this[x + 1, num + 2] == null)
                {
                    this[x + 1, num + 2] = CreateTile();
                }
                this[x + 1, num + 2].active(active: true);
                this[x + 1, num + 2].type = 11;
                this[x + 1, num + 2].frameY = (short)(num7 + 36);
                this[x + 1, num + 2].frameX = (short)(num2 + 18);
                this[x + 1, num + 2].color(color3);
                for (int l = x - 1; l <= x + 2; l++)
                {
                    for (int m = num - 1; m <= num + 2; m++)
                    {
                        TileFrame(l, m);
                    }
                }
                return true;
            }
            public void CheckLogicGate(int lampX, int lampY)
            {
                if (!InWorld(lampX, lampY, 1))
                {
                    return;
                }
                int num = lampY;
                ITile tile;
                while (true)
                {
                    if (num < MaxTilesY)
                    {
                        tile = this[lampX, num];
                        if (!tile.active())
                        {
                            return;
                        }
                        if (tile.type == 420)
                        {
                            break;
                        }
                        if (tile.type != 419)
                        {
                            return;
                        }
                        num++;
                        continue;
                    }
                    return;
                }
                _GatesDone.TryGetValue(new Point16(lampX, num), out bool value);
                int num2 = tile.frameY / 18;
                bool flag = tile.frameX == 18;
                bool flag2 = tile.frameX == 36;
                if (num2 < 0)
                {
                    return;
                }
                int num3 = 0;
                int num4 = 0;
                bool flag3 = false;
                for (int num5 = num - 1; num5 > 0; num5--)
                {
                    ITile tile2 = this[lampX, num5];
                    if (!tile2.active() || tile2.type != 419)
                    {
                        break;
                    }
                    if (tile2.frameX == 36)
                    {
                        flag3 = true;
                        break;
                    }
                    num3++;
                    num4 += (tile2.frameX == 18).ToInt();
                }
                bool flag4 = false;
                switch (num2)
                {
                    default:
                        return;
                    case 0:
                        flag4 = (num3 == num4);
                        break;
                    case 2:
                        flag4 = (num3 != num4);
                        break;
                    case 1:
                        flag4 = (num4 > 0);
                        break;
                    case 3:
                        flag4 = (num4 == 0);
                        break;
                    case 4:
                        flag4 = (num4 == 1);
                        break;
                    case 5:
                        flag4 = (num4 != 1);
                        break;
                }
                bool flag5 = !flag3 && flag2;
                bool flag6 = false;
                if (flag3 && GetTileSafely(lampX, lampY).frameX == 36)
                {
                    flag6 = true;
                }
                if (!(flag4 != flag || flag5 || flag6))
                {
                    return;
                }
                _ = tile.frameX % 18 / 18;
                tile.frameX = (short)(18 * flag4.ToInt());
                if (flag3)
                {
                    tile.frameX = 36;
                }
                SkipWire(lampX, num);
                SquareTileFrame(lampX, num);
                SendTileSquare(-1, lampX, num, 1);
                bool flag7 = !flag3 || flag6;
                if (flag6)
                {
                    if (num4 == 0 || num3 == 0)
                    {
                        flag7 = false;
                    }
                    flag7 = (Main.rand.NextFloat() < (float)num4 / (float)num3);
                }
                if (flag5)
                {
                    flag7 = false;
                }
                if (flag7)
                {
                    if (!value)
                    {
                        _GatesNext.Enqueue(new Point16(lampX, num));
                        return;
                    }
                    Vector2 position = new Vector2(lampX, num) * 16f - new Vector2(10f);
                    Terraria.Utils.PoofOfSmoke(position);
                    SendDataToPlayer(106, -1, -1, null, (int)position.X, position.Y);
                }
            }

            public void HitWire(DoubleStack<Point16> next, int wireType)
            {
                _wireDirectionList.Clear(quickClear: true);
                for (int i = 0; i < next.Count; i++)
                {
                    Point16 point = next.PopFront();
                    SkipWire(point);
                    _toProcess.Add(point, 4);
                    next.PushBack(point);
                    _wireDirectionList.PushBack(0);
                }
                _currentWireColor = wireType;
                while (next.Count > 0)
                {
                    Point16 key = next.PopFront();
                    int num = _wireDirectionList.PopFront();
                    int x = key.X;
                    int y = key.Y;
                    if (!_wireSkip.ContainsKey(key))
                    {
                        HitWireSingle(x, y);
                    }
                    for (int j = 0; j < 4; j++)
                    {
                        int num2;
                        int num3;
                        switch (j)
                        {
                            case 0:
                                num2 = x;
                                num3 = y + 1;
                                break;
                            case 1:
                                num2 = x;
                                num3 = y - 1;
                                break;
                            case 2:
                                num2 = x + 1;
                                num3 = y;
                                break;
                            case 3:
                                num2 = x - 1;
                                num3 = y;
                                break;
                            default:
                                num2 = x;
                                num3 = y + 1;
                                break;
                        }
                        if (num2 < 2 || num2 >= MaxTilesX - 2 || num3 < 2 || num3 >= MaxTilesY - 2)
                        {
                            continue;
                        }
                        ITile tile = this[num2, num3];
                        if (tile == null)
                        {
                            continue;
                        }
                        ITile tile2 = this[x, y];
                        if (tile2 == null)
                        {
                            continue;
                        }
                        byte b = 3;
                        if (tile.type == 424 || tile.type == 445)
                        {
                            b = 0;
                        }
                        if (tile2.type == 424)
                        {
                            switch (tile2.frameX / 18)
                            {
                                case 0:
                                    if (j != num)
                                    {
                                        continue;
                                    }
                                    break;
                                case 1:
                                    if ((num != 0 || j != 3) && (num != 3 || j != 0) && (num != 1 || j != 2) && (num != 2 || j != 1))
                                    {
                                        continue;
                                    }
                                    break;
                                case 2:
                                    if ((num != 0 || j != 2) && (num != 2 || j != 0) && (num != 1 || j != 3) && (num != 3 || j != 1))
                                    {
                                        continue;
                                    }
                                    break;
                            }
                        }
                        if (tile2.type == 445)
                        {
                            if (j != num)
                            {
                                continue;
                            }
                            if (_PixelBoxTriggers.ContainsKey(key))
                            {
                                _PixelBoxTriggers[key] |= (byte)((!(j == 0 || j == 1)) ? 1 : 2);
                            }
                            else
                            {
                                _PixelBoxTriggers[key] = (byte)((!(j == 0 || j == 1)) ? 1 : 2);
                            }
                        }
                        bool flag;
                        switch (wireType)
                        {
                            case 1:
                                flag = tile.wire();
                                break;
                            case 2:
                                flag = tile.wire2();
                                break;
                            case 3:
                                flag = tile.wire3();
                                break;
                            case 4:
                                flag = tile.wire4();
                                break;
                            default:
                                flag = false;
                                break;
                        }
                        if (!flag)
                        {
                            continue;
                        }
                        Point16 point2 = new Point16(num2, num3);
                        if (_toProcess.TryGetValue(point2, out byte value))
                        {
                            value = (byte)(value - 1);
                            if (value == 0)
                            {
                                _toProcess.Remove(point2);
                            }
                            else
                            {
                                _toProcess[point2] = value;
                            }
                            continue;
                        }
                        next.PushBack(point2);
                        _wireDirectionList.PushBack((byte)j);
                        if (b > 0)
                        {
                            _toProcess.Add(point2, b);
                        }
                    }
                }
                _wireSkip.Clear();
                _toProcess.Clear();
            }
            public bool ShiftTallGate(int x, int y, bool closing, bool forced = false)
            {
                ushort type = (ushort)(closing ? 388 : 389);
                ushort num = (ushort)(closing ? 389 : 388);
                ITile tileSafely = GetTileSafely(x, y);
                if (tileSafely.type != num)
                {
                    return false;
                }
                Point point = new Point(tileSafely.frameX / 18, 0);
                TileObjectData tileData = TileObjectData.GetTileData(388, point.X);
                point.Y = tileSafely.frameY / tileData.CoordinateFullHeight;
                _ = tileData.Width;
                int height = tileData.Height;
                int i = 0;
                for (int num2 = tileSafely.frameY % tileData.CoordinateFullHeight; i < height && num2 - tileData.CoordinateHeights[i] >= 0; i++)
                {
                    num2 -= tileData.CoordinateHeights[i];
                }
                _ = tileData.CoordinateFullHeight;
                y -= i;
                if (Main.netMode != 1 && running)
                {
                    for (int j = 0; j < height; j++)
                    {
                        SkipWire(x, y + j);
                    }
                }
                for (int k = 0; k < height; k++)
                {
                    if (!forced && !EmptyTile(x, y + k, ignoreTiles: true))
                    {
                        return false;
                    }
                }
                for (int l = 0; l < height; l++)
                {
                    tileSafely = GetTileSafely(x, y + l);
                    tileSafely.type = type;
                }
                for (int m = -1; m < 2; m++)
                {
                    for (int n = -1; n < height + 1; n++)
                    {
                        TileFrame(x + m, y + n);
                    }
                }
                return true;
            }
            public bool EmptyTile(int i, int j, bool ignoreTiles = false)
            {
                Rectangle rectangle = new Rectangle(i * 16, j * 16, 16, 16);
                if (this[i, j].active() && !ignoreTiles)
                {
                    return false;
                }
                for (int k = 0; k < 255; k++)
                {
                    if (Main.player[k].active && rectangle.Intersects(new Rectangle((int)Main.player[k].position.X, (int)Main.player[k].position.Y, Main.player[k].width, Main.player[k].height)))
                    {
                        return false;
                    }
                }
                for (int l = 0; l < 200; l++)
                {
                    if (Main.npc[l].active && rectangle.Intersects(new Rectangle((int)Main.npc[l].position.X, (int)Main.npc[l].position.Y, Main.npc[l].width, Main.npc[l].height)))
                    {
                        return false;
                    }
                }
                return true;
            }
            public void HitWireSingle(int i, int j)
            {
                ITile tile = this[i, j];
                int type = tile.type;
                if (tile.actuator())
                {
                    ActuateForced(i, j);
                }
                if (!tile.active())
                {
                    return;
                }
                switch (type)
                {
                    case 144:
                        HitSwitch(i, j);
                        SquareTileFrame(i, j);
                        SendTileSquare(-1, i, j, 1);
                        break;
                    case 421:
                        if (!tile.actuator())
                        {
                            tile.type = 422;
                            SquareTileFrame(i, j);
                            SendTileSquare(-1, i, j, 1);
                        }
                        break;
                    case 422:
                        if (!tile.actuator())
                        {
                            tile.type = 421;
                            SquareTileFrame(i, j);
                            SendTileSquare(-1, i, j, 1);
                        }
                        break;
                }
                if (type >= 255 && type <= 268)
                {
                    if (!tile.actuator())
                    {
                        if (type >= 262)
                        {
                            tile.type -= 7;
                        }
                        else
                        {
                            tile.type += 7;
                        }
                        SquareTileFrame(i, j);
                        SendTileSquare(-1, i, j, 1);
                    }
                    return;
                }
                if (type == 419)
                {
                    int num = 18;
                    if (tile.frameX >= num)
                    {
                        num = -num;
                    }
                    if (tile.frameX == 36)
                    {
                        num = 0;
                    }
                    SkipWire(i, j);
                    tile.frameX = (short)(tile.frameX + num);
                    SquareTileFrame(i, j);
                    SendTileSquare(-1, i, j, 1);
                    _LampsToCheck.Enqueue(new Point16(i, j));
                    return;
                }
                if (type == 406)
                {
                    int num2 = tile.frameX % 54 / 18;
                    int num3 = tile.frameY % 54 / 18;
                    int num4 = i - num2;
                    int num5 = j - num3;
                    int num6 = 54;
                    if (this[num4, num5].frameY >= 108)
                    {
                        num6 = -108;
                    }
                    for (int k = num4; k < num4 + 3; k++)
                    {
                        for (int l = num5; l < num5 + 3; l++)
                        {
                            SkipWire(k, l);
                            this[k, l].frameY = (short)(this[k, l].frameY + num6);
                        }
                    }
                    SendTileSquare(-1, num4 + 1, num5 + 1, 3);
                    return;
                }
                if (type == 452)
                {
                    int num7 = tile.frameX % 54 / 18;
                    int num8 = tile.frameY % 54 / 18;
                    int num9 = i - num7;
                    int num10 = j - num8;
                    int num11 = 54;
                    if (this[num9, num10].frameX >= 54)
                    {
                        num11 = -54;
                    }
                    for (int m = num9; m < num9 + 3; m++)
                    {
                        for (int n = num10; n < num10 + 3; n++)
                        {
                            SkipWire(m, n);
                            this[m, n].frameX = (short)(this[m, n].frameX + num11);
                        }
                    }
                    SendTileSquare(-1, num9 + 1, num10 + 1, 3);
                    return;
                }
                if (type == 411)
                {
                    int num12 = tile.frameX % 36 / 18;
                    int num13 = tile.frameY % 36 / 18;
                    int num14 = i - num12;
                    int num15 = j - num13;
                    int num16 = 36;
                    if (this[num14, num15].frameX >= 36)
                    {
                        num16 = -36;
                    }
                    for (int num17 = num14; num17 < num14 + 2; num17++)
                    {
                        for (int num18 = num15; num18 < num15 + 2; num18++)
                        {
                            SkipWire(num17, num18);
                            this[num17, num18].frameX = (short)(this[num17, num18].frameX + num16);
                        }
                    }
                    SendTileSquare(-1, num14, num15, 2);
                    return;
                }
                if (type == 425)
                {
                    int num19 = tile.frameX % 36 / 18;
                    int num20 = tile.frameY % 36 / 18;
                    int num21 = i - num19;
                    int num22 = j - num20;
                    for (int num23 = num21; num23 < num21 + 2; num23++)
                    {
                        for (int num24 = num22; num24 < num22 + 2; num24++)
                        {
                            SkipWire(num23, num24);
                        }
                    }
                    if (Main.AnnouncementBoxDisabled)
                    {
                        return;
                    }
                    Color pink = Color.Pink;
                    if (Main.AnnouncementBoxRange == -1)
                    {
                        Utils.Broadcast("[Internal Error]事件禁用.");
                    }
                    else
                    {
                        if (Main.netMode != 2)
                        {
                            return;
                        }
                        for (int num26 = 0; num26 < 255; num26++)
                        {
                            if (Main.player[num26].active && Main.player[num26].Distance(new Vector2(num21 * 16 + 16, num22 * 16 + 16)) <= (float)Main.AnnouncementBoxRange)
                            {
                                Utils.Broadcast("[Internal Error]事件禁用.");
                            }
                        }
                    }
                    return;
                }
                if (type == 405)
                {
                    int num27 = tile.frameX % 54 / 18;
                    int num28 = tile.frameY % 36 / 18;
                    int num29 = i - num27;
                    int num30 = j - num28;
                    int num31 = 54;
                    if (this[num29, num30].frameX >= 54)
                    {
                        num31 = -54;
                    }
                    for (int num32 = num29; num32 < num29 + 3; num32++)
                    {
                        for (int num33 = num30; num33 < num30 + 2; num33++)
                        {
                            SkipWire(num32, num33);
                            this[num32, num33].frameX = (short)(this[num32, num33].frameX + num31);
                        }
                    }
                    SendTileSquare(-1, num29 + 1, num30 + 1, 3);
                    return;
                }
                if (type == 209)
                {
                    int num34 = tile.frameX % 72 / 18;
                    int num35 = tile.frameY % 54 / 18;
                    int num36 = i - num34;
                    int num37 = j - num35;
                    int num38 = tile.frameY / 54;
                    int num39 = tile.frameX / 72;
                    int num40 = -1;
                    if (num34 == 1 || num34 == 2)
                    {
                        num40 = num35;
                    }
                    int num41 = 0;
                    if (num34 == 3)
                    {
                        num41 = -54;
                    }
                    if (num34 == 0)
                    {
                        num41 = 54;
                    }
                    if (num38 >= 8 && num41 > 0)
                    {
                        num41 = 0;
                    }
                    if (num38 == 0 && num41 < 0)
                    {
                        num41 = 0;
                    }
                    bool flag = false;
                    if (num41 != 0)
                    {
                        for (int num42 = num36; num42 < num36 + 4; num42++)
                        {
                            for (int num43 = num37; num43 < num37 + 3; num43++)
                            {
                                SkipWire(num42, num43);
                                this[num42, num43].frameY = (short)(this[num42, num43].frameY + num41);
                            }
                        }
                        flag = true;
                    }
                    if ((num39 == 3 || num39 == 4) && (num40 == 0 || num40 == 1))
                    {
                        num41 = ((num39 == 3) ? 72 : (-72));
                        for (int num44 = num36; num44 < num36 + 4; num44++)
                        {
                            for (int num45 = num37; num45 < num37 + 3; num45++)
                            {
                                SkipWire(num44, num45);
                                this[num44, num45].frameX = (short)(this[num44, num45].frameX + num41);
                            }
                        }
                        flag = true;
                    }
                    if (flag)
                    {
                        SendTileSquare(-1, num36 + 1, num37 + 1, 4);
                    }
                    if (num40 != -1)
                    {
                        bool flag2 = true;
                        if ((num39 == 3 || num39 == 4) && num40 < 2)
                        {
                            flag2 = false;
                        }
                        if (CheckMech(num36, num37, 30) && flag2)
                        {
                            WorldGen.ShootFromCannon(num36, num37, num38, num39 + 1, 0, 0f, CurrentUser);
                        }
                    }
                    return;
                }
                if (type == 212)
                {
                    int num46 = tile.frameX % 54 / 18;
                    int num47 = tile.frameY % 54 / 18;
                    int num48 = i - num46;
                    int num49 = j - num47;
                    int num50 = tile.frameX / 54;
                    int num51 = -1;
                    if (num46 == 1)
                    {
                        num51 = num47;
                    }
                    int num52 = 0;
                    if (num46 == 0)
                    {
                        num52 = -54;
                    }
                    if (num46 == 2)
                    {
                        num52 = 54;
                    }
                    if (num50 >= 1 && num52 > 0)
                    {
                        num52 = 0;
                    }
                    if (num50 == 0 && num52 < 0)
                    {
                        num52 = 0;
                    }
                    bool flag3 = false;
                    if (num52 != 0)
                    {
                        for (int num53 = num48; num53 < num48 + 3; num53++)
                        {
                            for (int num54 = num49; num54 < num49 + 3; num54++)
                            {
                                SkipWire(num53, num54);
                                this[num53, num54].frameX = (short)(this[num53, num54].frameX + num52);
                            }
                        }
                        flag3 = true;
                    }
                    if (flag3)
                    {
                        SendTileSquare(-1, num48 + 1, num49 + 1, 4);
                    }
                    if (num51 != -1 && CheckMech(num48, num49, 10))
                    {
                        float num55 = 12f + (float)Main.rand.Next(450) * 0.01f;
                        float num56 = Main.rand.Next(85, 105);
                        float num57 = Main.rand.Next(-35, 11);
                        int type2 = 166;
                        int damage = 0;
                        float knockBack = 0f;
                        Vector2 vector = new Vector2((num48 + 2) * 16 - 8, (num49 + 2) * 16 - 8);
                        if (tile.frameX / 54 == 0)
                        {
                            num56 *= -1f;
                            vector.X -= 12f;
                        }
                        else
                        {
                            vector.X += 12f;
                        }
                        float num58 = num56;
                        float num59 = num57;
                        float num60 = (float)Math.Sqrt(num58 * num58 + num59 * num59);
                        num60 = num55 / num60;
                        num58 *= num60;
                        num59 *= num60;
                        Projectile.NewProjectile(vector.X, vector.Y, num58, num59, type2, damage, knockBack, CurrentUser);
                    }
                    return;
                }
                if (type == 215)
                {
                    int num61 = tile.frameX % 54 / 18;
                    int num62 = tile.frameY % 36 / 18;
                    int num63 = i - num61;
                    int num64 = j - num62;
                    int num65 = 36;
                    if (this[num63, num64].frameY >= 36)
                    {
                        num65 = -36;
                    }
                    for (int num66 = num63; num66 < num63 + 3; num66++)
                    {
                        for (int num67 = num64; num67 < num64 + 2; num67++)
                        {
                            SkipWire(num66, num67);
                            this[num66, num67].frameY = (short)(this[num66, num67].frameY + num65);
                        }
                    }
                    SendTileSquare(-1, num63 + 1, num64 + 1, 3);
                    return;
                }
                if (type == 130)
                {
                    if (this[i, j - 1] == null || !this[i, j - 1].active() || (!TileID.Sets.BasicChest[this[i, j - 1].type] && !TileID.Sets.BasicChestFake[this[i, j - 1].type] && this[i, j - 1].type != 88))
                    {
                        tile.type = 131;
                        SquareTileFrame(i, j);
                        SendTileSquare(-1, i, j, 1);
                    }
                    return;
                }
                if (type == 131)
                {
                    tile.type = 130;
                    SquareTileFrame(i, j);
                    SendTileSquare(-1, i, j, 1);
                    return;
                }
                if (type == 387 || type == 386)
                {
                    bool value = type == 387;
                    int num68 = ShiftTrapdoor(i, j, playerAbove: true).ToInt();
                    if (num68 == 0)
                    {
                        num68 = -ShiftTrapdoor(i, j, playerAbove: false).ToInt();
                    }
                    if (num68 != 0)
                    {
                        SendDataToPlayer(19, -1, -1, null, 3 - value.ToInt(), i, j, num68);
                    }
                    return;
                }
                if (type == 389 || type == 388)
                {
                    bool flag4 = type == 389;
                    ShiftTallGate(i, j, flag4);
                    SendDataToPlayer(19, -1, -1, null, 4 + flag4.ToInt(), i, j);
                    return;
                }
                if (type == 11)
                {
                    if (CloseDoor(i, j, forced: true))
                    {
                        SendDataToPlayer(19, -1, -1, null, 1, i, j);
                    }
                    return;
                }
                if (type == 10)
                {
                    int num69 = 1;
                    if (Main.rand.Next(2) == 0)
                    {
                        num69 = -1;
                    }
                    if (!OpenDoor(i, j, num69))
                    {
                        if (OpenDoor(i, j, -num69))
                        {
                            SendDataToPlayer(19, -1, -1, null, 0, i, j, -num69);
                        }
                    }
                    else
                    {
                        SendDataToPlayer(19, -1, -1, null, 0, i, j, num69);
                    }
                    return;
                }
                if (type == 216)
                {
                    LaunchRocket(i, j);
                    SkipWire(i, j);
                    return;
                }
                if (type == 497 || (type == 15 && tile.frameY / 40 == 1) || (type == 15 && tile.frameY / 40 == 20))
                {
                    int num70 = j - tile.frameY % 40 / 18;
                    SkipWire(i, num70);
                    SkipWire(i, num70 + 1);
                    if (CheckMech(i, num70, 60))
                    {
                        Projectile.NewProjectile(i * 16 + 8, num70 * 16 + 12, 0f, 0f, 733, 0, 0f, Main.myPlayer);
                    }
                    return;
                }
                switch (type)
                {
                    case 335:
                        {
                            int num176 = j - tile.frameY / 18;
                            int num177 = i - tile.frameX / 18;
                            SkipWire(num177, num176);
                            SkipWire(num177, num176 + 1);
                            SkipWire(num177 + 1, num176);
                            SkipWire(num177 + 1, num176 + 1);
                            if (CheckMech(num177, num176, 30))
                            {
                                WorldGen.LaunchRocketSmall(num177, num176);
                            }
                            break;
                        }
                    case 338:
                        {
                            int num77 = j - tile.frameY / 18;
                            int num78 = i - tile.frameX / 18;
                            SkipWire(num78, num77);
                            SkipWire(num78, num77 + 1);
                            if (!CheckMech(num78, num77, 30))
                            {
                                break;
                            }
                            bool flag5 = false;
                            for (int num79 = 0; num79 < 1000; num79++)
                            {
                                if (Main.projectile[num79].active && Main.projectile[num79].aiStyle == 73 && Main.projectile[num79].ai[0] == (float)num78 && Main.projectile[num79].ai[1] == (float)num77)
                                {
                                    flag5 = true;
                                    break;
                                }
                            }
                            if (!flag5)
                            {
                                Projectile.NewProjectile(num78 * 16 + 8, num77 * 16 + 2, 0f, 0f, 419 + Main.rand.Next(4), 0, 0f, Main.myPlayer, num78, num77);
                            }
                            break;
                        }
                    case 235:
                        {
                            int num132 = i - tile.frameX / 18;
                            if (tile.wall == 87 && (double)j > Main.worldSurface && !NPC.downedPlantBoss)
                            {
                                break;
                            }
                            if (_teleport[0].X == -1f)
                            {
                                _teleport[0].X = num132;
                                _teleport[0].Y = j;
                                if (tile.halfBrick())
                                {
                                    _teleport[0].Y += 0.5f;
                                }
                            }
                            else if (_teleport[0].X != (float)num132 || _teleport[0].Y != (float)j)
                            {
                                _teleport[1].X = num132;
                                _teleport[1].Y = j;
                                if (tile.halfBrick())
                                {
                                    _teleport[1].Y += 0.5f;
                                }
                            }
                            break;
                        }
                    case 4:
                        if (tile.frameX < 66)
                        {
                            tile.frameX += 66;
                        }
                        else
                        {
                            tile.frameX -= 66;
                        }
                        SendTileSquare(-1, i, j, 1);
                        break;
                    case 429:
                        {
                            int num97 = this[i, j].frameX / 18;
                            bool flag6 = num97 % 2 >= 1;
                            bool flag7 = num97 % 4 >= 2;
                            bool flag8 = num97 % 8 >= 4;
                            bool flag9 = num97 % 16 >= 8;
                            bool flag10 = false;
                            short num98 = 0;
                            switch (_currentWireColor)
                            {
                                case 1:
                                    num98 = 18;
                                    flag10 = !flag6;
                                    break;
                                case 2:
                                    num98 = 72;
                                    flag10 = !flag8;
                                    break;
                                case 3:
                                    num98 = 36;
                                    flag10 = !flag7;
                                    break;
                                case 4:
                                    num98 = 144;
                                    flag10 = !flag9;
                                    break;
                            }
                            if (flag10)
                            {
                                tile.frameX += num98;
                            }
                            else
                            {
                                tile.frameX -= num98;
                            }
                            SendTileSquare(-1, i, j, 1);
                            break;
                        }
                    case 149:
                        if (tile.frameX < 54)
                        {
                            tile.frameX += 54;
                        }
                        else
                        {
                            tile.frameX -= 54;
                        }
                        SendTileSquare(-1, i, j, 1);
                        break;
                    case 244:
                        {
                            int num80;
                            for (num80 = tile.frameX / 18; num80 >= 3; num80 -= 3)
                            {
                            }
                            int num81;
                            for (num81 = tile.frameY / 18; num81 >= 3; num81 -= 3)
                            {
                            }
                            int num82 = i - num80;
                            int num83 = j - num81;
                            int num84 = 54;
                            if (this[num82, num83].frameX >= 54)
                            {
                                num84 = -54;
                            }
                            for (int num85 = num82; num85 < num82 + 3; num85++)
                            {
                                for (int num86 = num83; num86 < num83 + 2; num86++)
                                {
                                    SkipWire(num85, num86);
                                    this[num85, num86].frameX = (short)(this[num85, num86].frameX + num84);
                                }
                            }
                            SendTileSquare(-1, num82 + 1, num83 + 1, 3);
                            break;
                        }
                    case 565:
                        {
                            int num90;
                            for (num90 = tile.frameX / 18; num90 >= 2; num90 -= 2)
                            {
                            }
                            int num91;
                            for (num91 = tile.frameY / 18; num91 >= 2; num91 -= 2)
                            {
                            }
                            int num92 = i - num90;
                            int num93 = j - num91;
                            int num94 = 36;
                            if (this[num92, num93].frameX >= 36)
                            {
                                num94 = -36;
                            }
                            for (int num95 = num92; num95 < num92 + 2; num95++)
                            {
                                for (int num96 = num93; num96 < num93 + 2; num96++)
                                {
                                    SkipWire(num95, num96);
                                    this[num95, num96].frameX = (short)(this[num95, num96].frameX + num94);
                                }
                            }
                            SendTileSquare(-1, num92 + 1, num93 + 1, 3);
                            break;
                        }
                    case 42:
                        {
                            int num99;
                            for (num99 = tile.frameY / 18; num99 >= 2; num99 -= 2)
                            {
                            }
                            int num100 = j - num99;
                            short num101 = 18;
                            if (tile.frameX > 0)
                            {
                                num101 = -18;
                            }
                            this[i, num100].frameX += num101;
                            this[i, num100 + 1].frameX += num101;
                            SkipWire(i, num100);
                            SkipWire(i, num100 + 1);
                            SendTileSquare(-1, i, j, 3);
                            break;
                        }
                    case 93:
                        {
                            int num156;
                            for (num156 = tile.frameY / 18; num156 >= 3; num156 -= 3)
                            {
                            }
                            num156 = j - num156;
                            short num157 = 18;
                            if (tile.frameX > 0)
                            {
                                num157 = -18;
                            }
                            this[i, num156].frameX += num157;
                            this[i, num156 + 1].frameX += num157;
                            this[i, num156 + 2].frameX += num157;
                            SkipWire(i, num156);
                            SkipWire(i, num156 + 1);
                            SkipWire(i, num156 + 2);
                            SendTileSquare(-1, i, num156 + 1, 3);
                            break;
                        }
                    case 95:
                    case 100:
                    case 126:
                    case 173:
                    case 564:
                        {
                            int num121;
                            for (num121 = tile.frameY / 18; num121 >= 2; num121 -= 2)
                            {
                            }
                            num121 = j - num121;
                            int num122 = tile.frameX / 18;
                            if (num122 > 1)
                            {
                                num122 -= 2;
                            }
                            num122 = i - num122;
                            short num123 = 36;
                            if (this[num122, num121].frameX > 0)
                            {
                                num123 = -36;
                            }
                            this[num122, num121].frameX += num123;
                            this[num122, num121 + 1].frameX += num123;
                            this[num122 + 1, num121].frameX += num123;
                            this[num122 + 1, num121 + 1].frameX += num123;
                            SkipWire(num122, num121);
                            SkipWire(num122 + 1, num121);
                            SkipWire(num122, num121 + 1);
                            SkipWire(num122 + 1, num121 + 1);
                            SendTileSquare(-1, num122, num121, 3);
                            break;
                        }
                    case 593:
                        {
                            SkipWire(i, j);
                            short num130 = (short)((this[i, j].frameX != 0) ? (-18) : 18);
                            this[i, j].frameX += num130;
                            if (Main.netMode == 2)
                            {
                                int number = (i >= 1) ? 1 : 1;
                                SendDataToPlayer(20, -1, -1, null, number, i, j, 0f, 0);
                            }
                            int num131 = (num130 > 0) ? 4 : 3;
                            Animation.NewTemporaryAnimation(num131, 593, i, j);
                            NetMessage.SendTemporaryAnimation(-1, num131, 593, i, j);
                            break;
                        }
                    case 594:
                        {
                            int num102;
                            for (num102 = tile.frameY / 18; num102 >= 2; num102 -= 2)
                            {
                            }
                            num102 = j - num102;
                            int num103 = tile.frameX / 18;
                            if (num103 > 1)
                            {
                                num103 -= 2;
                            }
                            num103 = i - num103;
                            SkipWire(num103, num102);
                            SkipWire(num103, num102 + 1);
                            SkipWire(num103 + 1, num102);
                            SkipWire(num103 + 1, num102 + 1);
                            short num104 = (short)((this[num103, num102].frameX != 0) ? (-36) : 36);
                            for (int num105 = 0; num105 < 2; num105++)
                            {
                                for (int num106 = 0; num106 < 2; num106++)
                                {
                                    this[num103 + num105, num102 + num106].frameX += num104;
                                }
                            }
                            if (Main.netMode == 2)
                            {
                                int number = (num103 >= 2) ? 2 : 2;
                                SendDataToPlayer(20, -1, -1, null, number, num103, num102, 0f, 0);
                            }
                            int num107 = (num104 > 0) ? 4 : 3;
                            Animation.NewTemporaryAnimation(num107, 594, num103, num102);
                            NetMessage.SendTemporaryAnimation(-1, num107, 594, num103, num102);
                            break;
                        }
                    case 34:
                        {
                            int num124;
                            for (num124 = tile.frameY / 18; num124 >= 3; num124 -= 3)
                            {
                            }
                            int num125 = j - num124;
                            int num126 = tile.frameX % 108 / 18;
                            if (num126 > 2)
                            {
                                num126 -= 3;
                            }
                            num126 = i - num126;
                            short num127 = 54;
                            if (this[num126, num125].frameX % 108 > 0)
                            {
                                num127 = -54;
                            }
                            for (int num128 = num126; num128 < num126 + 3; num128++)
                            {
                                for (int num129 = num125; num129 < num125 + 3; num129++)
                                {
                                    this[num128, num129].frameX += num127;
                                    SkipWire(num128, num129);
                                }
                            }
                            SendTileSquare(-1, num126 + 1, num125 + 1, 3);
                            break;
                        }
                    case 314:
                        if (CheckMech(i, j, 5))
                        {
                            FlipSwitchTrack(i, j);
                        }
                        break;
                    case 33:
                    case 49:
                    case 174:
                    case 372:
                        {
                            short num108 = 18;
                            if (tile.frameX > 0)
                            {
                                num108 = -18;
                            }
                            tile.frameX += num108;
                            SendTileSquare(-1, i, j, 3);
                            break;
                        }
                    case 92:
                        {
                            int num87 = j - tile.frameY / 18;
                            short num88 = 18;
                            if (tile.frameX > 0)
                            {
                                num88 = -18;
                            }
                            for (int num89 = num87; num89 < num87 + 6; num89++)
                            {
                                this[i, num89].frameX += num88;
                                SkipWire(i, num89);
                            }
                            SendTileSquare(-1, i, num87 + 3, 7);
                            break;
                        }
                    case 137:
                        {
                            int num158 = tile.frameY / 18;
                            Vector2 vector3 = Vector2.Zero;
                            float speedX = 0f;
                            float speedY = 0f;
                            int num159 = 0;
                            int damage3 = 0;
                            switch (num158)
                            {
                                case 0:
                                case 1:
                                case 2:
                                    if (CheckMech(i, j, 200))
                                    {
                                        int num167 = (tile.frameX == 0) ? (-1) : ((tile.frameX == 18) ? 1 : 0);
                                        int num168 = (tile.frameX >= 36) ? ((tile.frameX >= 72) ? 1 : (-1)) : 0;
                                        vector3 = new Vector2(i * 16 + 8 + 10 * num167, j * 16 + 8 + 10 * num168);
                                        float num169 = 3f;
                                        if (num158 == 0)
                                        {
                                            num159 = 98;
                                            damage3 = 20;
                                            num169 = 12f;
                                        }
                                        if (num158 == 1)
                                        {
                                            num159 = 184;
                                            damage3 = 40;
                                            num169 = 12f;
                                        }
                                        if (num158 == 2)
                                        {
                                            num159 = 187;
                                            damage3 = 40;
                                            num169 = 5f;
                                        }
                                        speedX = (float)num167 * num169;
                                        speedY = (float)num168 * num169;
                                    }
                                    break;
                                case 3:
                                    {
                                        if (!CheckMech(i, j, 300))
                                        {
                                            break;
                                        }
                                        int num162 = 200;
                                        for (int num163 = 0; num163 < 1000; num163++)
                                        {
                                            if (Main.projectile[num163].active && Main.projectile[num163].type == num159)
                                            {
                                                float num164 = (new Vector2(i * 16 + 8, j * 18 + 8) - Main.projectile[num163].Center).Length();
                                                num162 = ((!(num164 < 50f)) ? ((!(num164 < 100f)) ? ((!(num164 < 200f)) ? ((!(num164 < 300f)) ? ((!(num164 < 400f)) ? ((!(num164 < 500f)) ? ((!(num164 < 700f)) ? ((!(num164 < 900f)) ? ((!(num164 < 1200f)) ? (num162 - 1) : (num162 - 2)) : (num162 - 3)) : (num162 - 4)) : (num162 - 5)) : (num162 - 6)) : (num162 - 8)) : (num162 - 10)) : (num162 - 15)) : (num162 - 50));
                                            }
                                        }
                                        if (num162 > 0)
                                        {
                                            num159 = 185;
                                            damage3 = 40;
                                            int num165 = 0;
                                            int num166 = 0;
                                            switch (tile.frameX / 18)
                                            {
                                                case 0:
                                                case 1:
                                                    num165 = 0;
                                                    num166 = 1;
                                                    break;
                                                case 2:
                                                    num165 = 0;
                                                    num166 = -1;
                                                    break;
                                                case 3:
                                                    num165 = -1;
                                                    num166 = 0;
                                                    break;
                                                case 4:
                                                    num165 = 1;
                                                    num166 = 0;
                                                    break;
                                            }
                                            speedX = (float)(4 * num165) + (float)Main.rand.Next(-20 + ((num165 == 1) ? 20 : 0), 21 - ((num165 == -1) ? 20 : 0)) * 0.05f;
                                            speedY = (float)(4 * num166) + (float)Main.rand.Next(-20 + ((num166 == 1) ? 20 : 0), 21 - ((num166 == -1) ? 20 : 0)) * 0.05f;
                                            vector3 = new Vector2(i * 16 + 8 + 14 * num165, j * 16 + 8 + 14 * num166);
                                        }
                                        break;
                                    }
                                case 4:
                                    if (CheckMech(i, j, 90))
                                    {
                                        int num160 = 0;
                                        int num161 = 0;
                                        switch (tile.frameX / 18)
                                        {
                                            case 0:
                                            case 1:
                                                num160 = 0;
                                                num161 = 1;
                                                break;
                                            case 2:
                                                num160 = 0;
                                                num161 = -1;
                                                break;
                                            case 3:
                                                num160 = -1;
                                                num161 = 0;
                                                break;
                                            case 4:
                                                num160 = 1;
                                                num161 = 0;
                                                break;
                                        }
                                        speedX = 8 * num160;
                                        speedY = 8 * num161;
                                        damage3 = 60;
                                        num159 = 186;
                                        vector3 = new Vector2(i * 16 + 8 + 18 * num160, j * 16 + 8 + 18 * num161);
                                    }
                                    break;
                            }
                            switch (num158)
                            {
                                case -10:
                                    if (CheckMech(i, j, 200))
                                    {
                                        int num174 = -1;
                                        if (tile.frameX != 0)
                                        {
                                            num174 = 1;
                                        }
                                        speedX = 12 * num174;
                                        damage3 = 20;
                                        num159 = 98;
                                        vector3 = new Vector2(i * 16 + 8, j * 16 + 7);
                                        vector3.X += 10 * num174;
                                        vector3.Y += 2f;
                                    }
                                    break;
                                case -9:
                                    if (CheckMech(i, j, 200))
                                    {
                                        int num170 = -1;
                                        if (tile.frameX != 0)
                                        {
                                            num170 = 1;
                                        }
                                        speedX = 12 * num170;
                                        damage3 = 40;
                                        num159 = 184;
                                        vector3 = new Vector2(i * 16 + 8, j * 16 + 7);
                                        vector3.X += 10 * num170;
                                        vector3.Y += 2f;
                                    }
                                    break;
                                case -8:
                                    if (CheckMech(i, j, 200))
                                    {
                                        int num175 = -1;
                                        if (tile.frameX != 0)
                                        {
                                            num175 = 1;
                                        }
                                        speedX = 5 * num175;
                                        damage3 = 40;
                                        num159 = 187;
                                        vector3 = new Vector2(i * 16 + 8, j * 16 + 7);
                                        vector3.X += 10 * num175;
                                        vector3.Y += 2f;
                                    }
                                    break;
                                case -7:
                                    {
                                        if (!CheckMech(i, j, 300))
                                        {
                                            break;
                                        }
                                        num159 = 185;
                                        int num171 = 200;
                                        for (int num172 = 0; num172 < 1000; num172++)
                                        {
                                            if (Main.projectile[num172].active && Main.projectile[num172].type == num159)
                                            {
                                                float num173 = (new Vector2(i * 16 + 8, j * 18 + 8) - Main.projectile[num172].Center).Length();
                                                num171 = ((!(num173 < 50f)) ? ((!(num173 < 100f)) ? ((!(num173 < 200f)) ? ((!(num173 < 300f)) ? ((!(num173 < 400f)) ? ((!(num173 < 500f)) ? ((!(num173 < 700f)) ? ((!(num173 < 900f)) ? ((!(num173 < 1200f)) ? (num171 - 1) : (num171 - 2)) : (num171 - 3)) : (num171 - 4)) : (num171 - 5)) : (num171 - 6)) : (num171 - 8)) : (num171 - 10)) : (num171 - 15)) : (num171 - 50));
                                            }
                                        }
                                        if (num171 > 0)
                                        {
                                            speedX = (float)Main.rand.Next(-20, 21) * 0.05f;
                                            speedY = 4f + (float)Main.rand.Next(0, 21) * 0.05f;
                                            damage3 = 40;
                                            vector3 = new Vector2(i * 16 + 8, j * 16 + 16);
                                            vector3.Y += 6f;
                                            Projectile.NewProjectile((int)vector3.X, (int)vector3.Y, speedX, speedY, num159, damage3, 2f, Main.myPlayer);
                                        }
                                        break;
                                    }
                                case -6:
                                    if (CheckMech(i, j, 90))
                                    {
                                        speedX = 0f;
                                        speedY = 8f;
                                        damage3 = 60;
                                        num159 = 186;
                                        vector3 = new Vector2(i * 16 + 8, j * 16 + 16);
                                        vector3.Y += 10f;
                                    }
                                    break;
                            }
                            if (num159 != 0)
                            {
                                Projectile.NewProjectile((int)vector3.X, (int)vector3.Y, speedX, speedY, num159, damage3, 2f, Main.myPlayer);
                            }
                            break;
                        }
                    case 443:
                        GeyserTrap(i, j);
                        break;
                    case 531:
                        {
                            int num151 = tile.frameX / 36;
                            int num152 = tile.frameY / 54;
                            int num153 = i - (tile.frameX - num151 * 36) / 18;
                            int num154 = j - (tile.frameY - num152 * 54) / 18;
                            if (CheckMech(num153, num154, 900))
                            {
                                Vector2 vector2 = new Vector2(num153 + 1, num154) * 16f;
                                vector2.Y += 28f;
                                int num155 = 99;
                                int damage2 = 70;
                                float knockBack2 = 10f;
                                if (num155 != 0)
                                {
                                    Projectile.NewProjectile((int)vector2.X, (int)vector2.Y, 0f, 0f, num155, damage2, knockBack2, Main.myPlayer);
                                }
                            }
                            break;
                        }
                    case 35:
                    case 139:
                        SwitchMB(i, j);
                        break;
                    case 207:
                        SwitchFountain(i, j);
                        break;
                    case 410:
                    case 480:
                    case 509:
                        SwitchMonolith(i, j);
                        break;
                    case 455:
                        BirthdayParty.ToggleManualParty();
                        break;
                    case 141:
                        KillTile(i, j, fail: false, effectOnly: false, noItem: true);
                        SendTileSquare(-1, i, j, 1);
                        Projectile.NewProjectile(i * 16 + 8, j * 16 + 8, 0f, 0f, 108, 500, 10f, Main.myPlayer);
                        break;
                    case 210:
                        ExplodeMine(i, j);
                        break;
                    case 142:
                    case 143:
                        {
                            int num115 = j - tile.frameY / 18;
                            int num116 = tile.frameX / 18;
                            if (num116 > 1)
                            {
                                num116 -= 2;
                            }
                            num116 = i - num116;
                            SkipWire(num116, num115);
                            SkipWire(num116, num115 + 1);
                            SkipWire(num116 + 1, num115);
                            SkipWire(num116 + 1, num115 + 1);
                            if (type == 142)
                            {
                                for (int num117 = 0; num117 < 4; num117++)
                                {
                                    if (_numInPump >= 19)
                                    {
                                        break;
                                    }
                                    int num118;
                                    int num119;
                                    switch (num117)
                                    {
                                        case 0:
                                            num118 = num116;
                                            num119 = num115 + 1;
                                            break;
                                        case 1:
                                            num118 = num116 + 1;
                                            num119 = num115 + 1;
                                            break;
                                        case 2:
                                            num118 = num116;
                                            num119 = num115;
                                            break;
                                        default:
                                            num118 = num116 + 1;
                                            num119 = num115;
                                            break;
                                    }
                                    _inPumpX[_numInPump] = num118;
                                    _inPumpY[_numInPump] = num119;
                                    _numInPump++;
                                }
                                break;
                            }
                            for (int num120 = 0; num120 < 4; num120++)
                            {
                                if (_numOutPump >= 19)
                                {
                                    break;
                                }
                                int num118;
                                int num119;
                                switch (num120)
                                {
                                    case 0:
                                        num118 = num116;
                                        num119 = num115 + 1;
                                        break;
                                    case 1:
                                        num118 = num116 + 1;
                                        num119 = num115 + 1;
                                        break;
                                    case 2:
                                        num118 = num116;
                                        num119 = num115;
                                        break;
                                    default:
                                        num118 = num116 + 1;
                                        num119 = num115;
                                        break;
                                }
                                _outPumpX[_numOutPump] = num118;
                                _outPumpY[_numOutPump] = num119;
                                _numOutPump++;
                            }
                            break;
                        }
                    case 105:
                        {
                            int num133 = j - tile.frameY / 18;
                            int num134 = tile.frameX / 18;
                            int num135 = 0;
                            while (num134 >= 2)
                            {
                                num134 -= 2;
                                num135++;
                            }
                            num134 = i - num134;
                            num134 = i - tile.frameX % 36 / 18;
                            num133 = j - tile.frameY % 54 / 18;
                            int num136 = tile.frameY / 54;
                            num136 %= 3;
                            num135 = tile.frameX / 36 + num136 * 55;
                            SkipWire(num134, num133);
                            SkipWire(num134, num133 + 1);
                            SkipWire(num134, num133 + 2);
                            SkipWire(num134 + 1, num133);
                            SkipWire(num134 + 1, num133 + 1);
                            SkipWire(num134 + 1, num133 + 2);
                            int num137 = num134 * 16 + 16;
                            int num138 = (num133 + 3) * 16;
                            int num139 = -1;
                            int num140 = -1;
                            bool flag11 = true;
                            bool flag12 = false;
                            switch (num135)
                            {
                                case 5:
                                    num140 = 73;
                                    break;
                                case 13:
                                    num140 = 24;
                                    break;
                                case 30:
                                    num140 = 6;
                                    break;
                                case 35:
                                    num140 = 2;
                                    break;
                                case 51:
                                    num140 = Terraria.Utils.SelectRandom(Main.rand, new short[2]
                                    {
                        299,
                        538
                                    });
                                    break;
                                case 52:
                                    num140 = 356;
                                    break;
                                case 53:
                                    num140 = 357;
                                    break;
                                case 54:
                                    num140 = Terraria.Utils.SelectRandom(Main.rand, new short[2]
                                    {
                        355,
                        358
                                    });
                                    break;
                                case 55:
                                    num140 = Terraria.Utils.SelectRandom(Main.rand, new short[2]
                                    {
                        367,
                        366
                                    });
                                    break;
                                case 56:
                                    num140 = Terraria.Utils.SelectRandom(Main.rand, new short[5]
                                    {
                        359,
                        359,
                        359,
                        359,
                        360
                                    });
                                    break;
                                case 57:
                                    num140 = 377;
                                    break;
                                case 58:
                                    num140 = 300;
                                    break;
                                case 59:
                                    num140 = Terraria.Utils.SelectRandom(Main.rand, new short[2]
                                    {
                        364,
                        362
                                    });
                                    break;
                                case 60:
                                    num140 = 148;
                                    break;
                                case 61:
                                    num140 = 361;
                                    break;
                                case 62:
                                    num140 = Terraria.Utils.SelectRandom(Main.rand, new short[3]
                                    {
                        487,
                        486,
                        485
                                    });
                                    break;
                                case 63:
                                    num140 = 164;
                                    flag11 &= NPC.MechSpawn(num137, num138, 165);
                                    break;
                                case 64:
                                    num140 = 86;
                                    flag12 = true;
                                    break;
                                case 65:
                                    num140 = 490;
                                    break;
                                case 66:
                                    num140 = 82;
                                    break;
                                case 67:
                                    num140 = 449;
                                    break;
                                case 68:
                                    num140 = 167;
                                    break;
                                case 69:
                                    num140 = 480;
                                    break;
                                case 70:
                                    num140 = 48;
                                    break;
                                case 71:
                                    num140 = Terraria.Utils.SelectRandom(Main.rand, new short[3]
                                    {
                        170,
                        180,
                        171
                                    });
                                    flag12 = true;
                                    break;
                                case 72:
                                    num140 = 481;
                                    break;
                                case 73:
                                    num140 = 482;
                                    break;
                                case 74:
                                    num140 = 430;
                                    break;
                                case 75:
                                    num140 = 489;
                                    break;
                                case 76:
                                    num140 = 611;
                                    break;
                                case 77:
                                    num140 = 602;
                                    break;
                                case 78:
                                    num140 = Terraria.Utils.SelectRandom(Main.rand, new short[6]
                                    {
                        595,
                        596,
                        599,
                        597,
                        600,
                        598
                                    });
                                    break;
                                case 79:
                                    num140 = Terraria.Utils.SelectRandom(Main.rand, new short[2]
                                    {
                        616,
                        617
                                    });
                                    break;
                            }
                            if (num140 != -1 && CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, num140) && flag11)
                            {
                                if (!flag12 || !SolidTiles(num134 - 2, num134 + 3, num133, num133 + 2))
                                {
                                    num139 = NPC.NewNPC(num137, num138, num140);
                                }
                                else
                                {
                                    Vector2 position = new Vector2(num137 - 4, num138 - 22) - new Vector2(10f);
                                    Terraria.Utils.PoofOfSmoke(position);
                                    SendDataToPlayer(106, -1, -1, null, (int)position.X, position.Y);
                                }
                            }
                            if (num139 <= -1)
                            {
                                switch (num135)
                                {
                                    case 4:
                                        if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, 1))
                                        {
                                            num139 = NPC.NewNPC(num137, num138 - 12, 1);
                                        }
                                        break;
                                    case 7:
                                        if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, 49))
                                        {
                                            num139 = NPC.NewNPC(num137 - 4, num138 - 6, 49);
                                        }
                                        break;
                                    case 8:
                                        if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, 55))
                                        {
                                            num139 = NPC.NewNPC(num137, num138 - 12, 55);
                                        }
                                        break;
                                    case 9:
                                        {
                                            int type3 = 46;
                                            if (BirthdayParty.PartyIsUp)
                                            {
                                                type3 = 540;
                                            }
                                            if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, type3))
                                            {
                                                num139 = NPC.NewNPC(num137, num138 - 12, type3);
                                            }
                                            break;
                                        }
                                    case 10:
                                        if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, 21))
                                        {
                                            num139 = NPC.NewNPC(num137, num138, 21);
                                        }
                                        break;
                                    case 16:
                                        if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, 42))
                                        {
                                            if (!SolidTiles(num134 - 1, num134 + 1, num133, num133 + 1))
                                            {
                                                num139 = NPC.NewNPC(num137, num138 - 12, 42);
                                                break;
                                            }
                                            Vector2 position3 = new Vector2(num137 - 4, num138 - 22) - new Vector2(10f);
                                            Terraria.Utils.PoofOfSmoke(position3);
                                            SendDataToPlayer(106, -1, -1, null, (int)position3.X, position3.Y);
                                        }
                                        break;
                                    case 18:
                                        if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, 67))
                                        {
                                            num139 = NPC.NewNPC(num137, num138 - 12, 67);
                                        }
                                        break;
                                    case 23:
                                        if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, 63))
                                        {
                                            num139 = NPC.NewNPC(num137, num138 - 12, 63);
                                        }
                                        break;
                                    case 27:
                                        if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, 85))
                                        {
                                            num139 = NPC.NewNPC(num137 - 9, num138, 85);
                                        }
                                        break;
                                    case 28:
                                        if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, 74))
                                        {
                                            num139 = NPC.NewNPC(num137, num138 - 12, Terraria.Utils.SelectRandom(Main.rand, new short[3]
                                            {
                                74,
                                297,
                                298
                                            }));
                                        }
                                        break;
                                    case 34:
                                        {
                                            for (int num149 = 0; num149 < 2; num149++)
                                            {
                                                for (int num150 = 0; num150 < 3; num150++)
                                                {
                                                    ITile tile2 = this[num134 + num149, num133 + num150];
                                                    tile2.type = 349;
                                                    tile2.frameX = (short)(num149 * 18 + 216);
                                                    tile2.frameY = (short)(num150 * 18);
                                                }
                                            }
                                            Animation.NewTemporaryAnimation(0, 349, num134, num133);
                                            if (Main.netMode == 2)
                                            {
                                                SendTileRange(-1, num134, num133, 2, 3);
                                            }
                                            break;
                                        }
                                    case 42:
                                        if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, 58))
                                        {
                                            num139 = NPC.NewNPC(num137, num138 - 12, 58);
                                        }
                                        break;
                                    case 37:
                                        if (CheckMech(num134, num133, 600) && Item.MechSpawn(num137, num138, 58) && Item.MechSpawn(num137, num138, 1734) && Item.MechSpawn(num137, num138, 1867))
                                        {
                                            NewItem(num137, num138 - 16, 0, 0, 58);
                                        }
                                        break;
                                    case 50:
                                        if (CheckMech(num134, num133, 30) && NPC.MechSpawn(num137, num138, 65))
                                        {
                                            if (!SolidTiles(num134 - 2, num134 + 3, num133, num133 + 2))
                                            {
                                                num139 = NPC.NewNPC(num137, num138 - 12, 65);
                                                break;
                                            }
                                            Vector2 position2 = new Vector2(num137 - 4, num138 - 22) - new Vector2(10f);
                                            Terraria.Utils.PoofOfSmoke(position2);
                                            SendDataToPlayer(106, -1, -1, null, (int)position2.X, position2.Y);
                                        }
                                        break;
                                    case 2:
                                        if (CheckMech(num134, num133, 600) && Item.MechSpawn(num137, num138, 184) && Item.MechSpawn(num137, num138, 1735) && Item.MechSpawn(num137, num138, 1868))
                                        {
                                            NewItem(num137, num138 - 16, 0, 0, 184);
                                        }
                                        break;
                                    case 17:
                                        if (CheckMech(num134, num133, 600) && Item.MechSpawn(num137, num138, 166))
                                        {
                                            NewItem(num137, num138 - 20, 0, 0, 166);
                                        }
                                        break;
                                    case 40:
                                        {
                                            if (!CheckMech(num134, num133, 300))
                                            {
                                                break;
                                            }
                                            int num145 = 50;
                                            int[] array2 = new int[num145];
                                            int num146 = 0;
                                            for (int num147 = 0; num147 < 200; num147++)
                                            {
                                                if (Main.npc[num147].active && (Main.npc[num147].type == 17 || Main.npc[num147].type == 19 || Main.npc[num147].type == 22 || Main.npc[num147].type == 38 || Main.npc[num147].type == 54 || Main.npc[num147].type == 107 || Main.npc[num147].type == 108 || Main.npc[num147].type == 142 || Main.npc[num147].type == 160 || Main.npc[num147].type == 207 || Main.npc[num147].type == 209 || Main.npc[num147].type == 227 || Main.npc[num147].type == 228 || Main.npc[num147].type == 229 || Main.npc[num147].type == 368 || Main.npc[num147].type == 369 || Main.npc[num147].type == 550 || Main.npc[num147].type == 441 || Main.npc[num147].type == 588))
                                                {
                                                    array2[num146] = num147;
                                                    num146++;
                                                    if (num146 >= num145)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (num146 > 0)
                                            {
                                                int num148 = array2[Main.rand.Next(num146)];
                                                Main.npc[num148].position.X = num137 - Main.npc[num148].width / 2;
                                                Main.npc[num148].position.Y = num138 - Main.npc[num148].height - 1;
                                                SendDataToPlayer(23, -1, -1, null, num148);
                                            }
                                            break;
                                        }
                                    case 41:
                                        {
                                            if (!CheckMech(num134, num133, 300))
                                            {
                                                break;
                                            }
                                            int num141 = 50;
                                            int[] array = new int[num141];
                                            int num142 = 0;
                                            for (int num143 = 0; num143 < 200; num143++)
                                            {
                                                if (Main.npc[num143].active && (Main.npc[num143].type == 18 || Main.npc[num143].type == 20 || Main.npc[num143].type == 124 || Main.npc[num143].type == 178 || Main.npc[num143].type == 208 || Main.npc[num143].type == 353 || Main.npc[num143].type == 633))
                                                {
                                                    array[num142] = num143;
                                                    num142++;
                                                    if (num142 >= num141)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (num142 > 0)
                                            {
                                                int num144 = array[Main.rand.Next(num142)];
                                                Main.npc[num144].position.X = num137 - Main.npc[num144].width / 2;
                                                Main.npc[num144].position.Y = num138 - Main.npc[num144].height - 1;
                                                SendDataToPlayer(23, -1, -1, null, num144);
                                            }
                                            break;
                                        }
                                }
                            }
                            if (num139 >= 0)
                            {
                                Main.npc[num139].value = 0f;
                                Main.npc[num139].npcSlots = 0f;
                                Main.npc[num139].SpawnedFromStatue = true;
                            }
                            break;
                        }
                    case 349:
                        {
                            int num109 = tile.frameY / 18;
                            num109 %= 3;
                            int num110 = j - num109;
                            int num111;
                            for (num111 = tile.frameX / 18; num111 >= 2; num111 -= 2)
                            {
                            }
                            num111 = i - num111;
                            SkipWire(num111, num110);
                            SkipWire(num111, num110 + 1);
                            SkipWire(num111, num110 + 2);
                            SkipWire(num111 + 1, num110);
                            SkipWire(num111 + 1, num110 + 1);
                            SkipWire(num111 + 1, num110 + 2);
                            short num112 = (short)((this[num111, num110].frameX != 0) ? (-216) : 216);
                            for (int num113 = 0; num113 < 2; num113++)
                            {
                                for (int num114 = 0; num114 < 3; num114++)
                                {
                                    this[num111 + num113, num110 + num114].frameX += num112;
                                }
                            }
                            if (Main.netMode == 2)
                            {
                                SendTileRange(-1, num111, num110, 2, 3);
                            }
                            Animation.NewTemporaryAnimation((num112 <= 0) ? 1 : 0, 349, num111, num110);
                            break;
                        }
                    case 506:
                        {
                            int num71 = tile.frameY / 18;
                            num71 %= 3;
                            int num72 = j - num71;
                            int num73;
                            for (num73 = tile.frameX / 18; num73 >= 2; num73 -= 2)
                            {
                            }
                            num73 = i - num73;
                            SkipWire(num73, num72);
                            SkipWire(num73, num72 + 1);
                            SkipWire(num73, num72 + 2);
                            SkipWire(num73 + 1, num72);
                            SkipWire(num73 + 1, num72 + 1);
                            SkipWire(num73 + 1, num72 + 2);
                            short num74 = (short)((this[num73, num72].frameX >= 72) ? (-72) : 72);
                            for (int num75 = 0; num75 < 2; num75++)
                            {
                                for (int num76 = 0; num76 < 3; num76++)
                                {
                                    this[num73 + num75, num72 + num76].frameX += num74;
                                }
                            }
                            if (Main.netMode == 2)
                            {
                                SendTileRange(-1, num73, num72, 2, 3);
                            }
                            break;
                        }
                    case 546:
                        tile.type = 557;
                        SquareTileFrame(i, j);
                        SendTileSquare(-1, i, j, 1);
                        break;
                    case 557:
                        tile.type = 546;
                        SquareTileFrame(i, j);
                        SendTileSquare(-1, i, j, 1);
                        break;
                }
            }
            public bool ShiftTrapdoor(int x, int y, bool playerAbove, int onlyCloseOrOpen = -1)
            {
                ITile tileSafely = GetTileSafely(x, y);
                if (tileSafely.type == 386 && onlyCloseOrOpen != 1)
                {
                    Point topLeftAndStyles = GetTopLeftAndStyles(ref x, ref y, 2, 2, 18, 18);
                    if (topLeftAndStyles.X == 0)
                    {
                        if (Main.netMode != 1 && Wiring.running)
                        {
                            SkipWire(x, y);
                            SkipWire(x, y + 1);
                            SkipWire(x + 1, y);
                            SkipWire(x + 1, y + 1);
                        }
                        if (!EmptyTile(x, y + 1, ignoreTiles: true) || !EmptyTile(x + 1, y + 1, ignoreTiles: true))
                        {
                            return false;
                        }
                        for (int i = 0; i < 2; i++)
                        {
                            tileSafely = GetTileSafely(x + i, y);
                            tileSafely.ClearTile();
                        }
                        for (int j = 0; j < 2; j++)
                        {
                            tileSafely = GetTileSafely(x + j, y + 1);
                            tileSafely.type = 387;
                            tileSafely.frameX = (short)(j * 18);
                            tileSafely.frameY = (short)(topLeftAndStyles.Y * 18);
                        }
                        for (int k = -1; k < 3; k++)
                        {
                            for (int l = 0; l < 3; l++)
                            {
                                TileFrame(x + k, y + l);
                            }
                        }
                        return true;
                    }
                    if (topLeftAndStyles.X == 1)
                    {
                        if (Main.netMode != 1 && Wiring.running)
                        {
                            SkipWire(x, y - 1);
                            SkipWire(x, y);
                            SkipWire(x + 1, y - 1);
                            SkipWire(x + 1, y);
                        }
                        if (!EmptyTile(x, y, ignoreTiles: true) || !EmptyTile(x + 1, y, ignoreTiles: true))
                        {
                            return false;
                        }
                        for (int m = 0; m < 2; m++)
                        {
                            tileSafely = GetTileSafely(x + m, y + 1);
                            tileSafely.ClearTile();
                        }
                        for (int n = 0; n < 2; n++)
                        {
                            tileSafely = GetTileSafely(x + n, y);
                            tileSafely.type = 387;
                            tileSafely.frameX = (short)(n * 18);
                            tileSafely.frameY = (short)(topLeftAndStyles.Y * 18);
                        }
                        for (int num = -1; num < 3; num++)
                        {
                            for (int num2 = -1; num2 < 2; num2++)
                            {
                                TileFrame(x + num, y + num2);
                            }
                        }
                        return true;
                    }
                }
                if (tileSafely.type == 387 && onlyCloseOrOpen != 0)
                {
                    GetTopLeftAndStyles(ref x, ref y, 2, 1, 18, 18);
                    int num3 = playerAbove.ToDirectionInt();
                    for (int num4 = 0; num4 < 2; num4++)
                    {
                        tileSafely = GetTileSafely(x + num4, y + num3);
                        if (tileSafely.active() && !Main.tileCut[tileSafely.type])
                        {
                            return false;
                        }
                    }
                    if (Main.netMode != 1 && running)
                    {
                        SkipWire(x, y);
                        SkipWire(x, y + num3);
                        SkipWire(x + 1, y);
                        SkipWire(x + 1, y + num3);
                    }
                    for (int num5 = 0; num5 < 2; num5++)
                    {
                        tileSafely = GetTileSafely(x + num5, y + num3);
                        if (tileSafely.active() && Main.tileCut[tileSafely.type])
                        {
                            KillTile(x + num5, y + num3);
                        }
                    }
                    for (int num6 = 0; num6 < 2; num6++)
                    {
                        tileSafely = GetTileSafely(x + num6, y);
                        byte color = tileSafely.color();
                        for (int num7 = 0; num7 < 2; num7++)
                        {
                            tileSafely = GetTileSafely(x + num6, y + num7 - (!playerAbove).ToInt());
                            tileSafely.type = 386;
                            tileSafely.frameX = (short)(num6 * 18 + playerAbove.ToInt() * 36);
                            tileSafely.frameY = (short)(num7 * 18);
                            tileSafely.color(color);
                            tileSafely.active(active: true);
                        }
                    }
                    for (int num8 = -1; num8 < 3; num8++)
                    {
                        for (int num9 = -1; num9 < 3; num9++)
                        {
                            TileFrame(x + num8, y + num9 - (!playerAbove).ToInt() * 2);
                        }
                    }
                    return true;
                }
                return false;
            }

            public void SendTileRange(int whoAmi, int tileX, int tileY, int xSize, int ySize, TileChangeType changeType = TileChangeType.None)
            {
                int number = (xSize >= ySize) ? xSize : ySize;
                SendDataToPlayer(20, whoAmi, -1, null, number, tileX, tileY, 0f, (int)changeType);
            }
            public void LaunchRocket(int x, int y)
            {
                int num = this[x, y].frameY;
                int num2 = 0;
                while (num >= 40)
                {
                    num -= 40;
                    num2++;
                }
                if (num == 18)
                {
                    y--;
                }
                Vector2 vector = new Vector2(x * 16 + 8, y * 16 + 4);
                int type = 167 + num2;
                int damage = 150;
                int num3 = 7;
                int num4 = Projectile.NewProjectile(vector.X, vector.Y + 2f, 0f, -8f, type, damage, num3, Main.myPlayer);
                Main.projectile[num4].originatedFromActivableTile = true;
                this[x, y].active(active: false);
                this[x, y + 1].active(active: false);
                SendTileSquare(-1, x - 1, y, 3);
            }
            public void ExplodeMine(int i, int j)
            {
                KillTile(i, j, fail: false, effectOnly: false, noItem: true);
                SendTileSquare(-1, i, j, 1);
                Projectile.NewProjectile(i * 16 + 8, j * 16 + 8, 0f, 0f, 164, 250, 10f, Main.myPlayer);
            }
            public void GeyserTrap(int i, int j)
            {
                ITile tile = this[i, j];
                if (tile.type != 443)
                {
                    return;
                }
                int num = tile.frameX / 36;
                int num2 = i - (tile.frameX - num * 36) / 18;
                if (CheckMech(num2, j, 200))
                {
                    Vector2 zero = Vector2.Zero;
                    Vector2 zero2 = Vector2.Zero;
                    int num3 = 654;
                    int damage = 20;
                    if (num < 2)
                    {
                        zero = new Vector2(num2 + 1, j) * 16f;
                        zero2 = new Vector2(0f, -8f);
                    }
                    else
                    {
                        zero = new Vector2(num2 + 1, j + 1) * 16f;
                        zero2 = new Vector2(0f, 8f);
                    }
                    if (num3 != 0)
                    {
                        Projectile.NewProjectile((int)zero.X, (int)zero.Y, zero2.X, zero2.Y, num3, damage, 2f, Main.myPlayer);
                    }
                }
            }
            public bool SolidTiles(int startX, int endX, int startY, int endY)
            {
                if (startX < 0)
                {
                    return true;
                }
                if (endX >= MaxTilesX)
                {
                    return true;
                }
                if (startY < 0)
                {
                    return true;
                }
                if (endY >= MaxTilesY)
                {
                    return true;
                }
                for (int i = startX; i < endX + 1; i++)
                {
                    for (int j = startY; j < endY + 1; j++)
                    {
                        if (this[i, j] == null)
                        {
                            return false;
                        }
                        if (this[i, j].active() && !this[i, j].inActive() && Main.tileSolid[this[i, j].type] && !Main.tileSolidTop[this[i, j].type])
                        {
                            return true;
                        }
                    }
                }
                return false;
            }
            public void SwitchMB(int i, int j)
            {
                int num = i;
                int num2 = j;
                int num3;
                for (num3 = this[i, j].frameY / 18; num3 >= 2; num3 -= 2)
                {
                }
                int num4 = this[i, j].frameX / 18;
                if (num4 >= 2)
                {
                    num4 -= 2;
                }
                num = i - num4;
                num2 = j - num3;
                for (int k = num; k < num + 2; k++)
                {
                    for (int l = num2; l < num2 + 2; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (this[k, l].active() && (this[k, l].type == 139 || this[k, l].type == 35))
                        {
                            if (this[k, l].frameX < 36)
                            {
                                this[k, l].frameX += 36;
                            }
                            else
                            {
                                this[k, l].frameX -= 36;
                            }
                        }
                    }
                }
                if (running)
                {
                    SkipWire(num, num2);
                    SkipWire(num + 1, num2);
                    SkipWire(num, num2 + 1);
                    SkipWire(num + 1, num2 + 1);
                }
                SendTileSquare(-1, num, num2, 3);
            }

            public void SwitchMonolith(int i, int j)
            {
                int num = i;
                int num2 = j;
                int num3;
                for (num3 = this[i, j].frameX / 18; num3 >= 2; num3 -= 2)
                {
                }
                int num4 = this[i, j].frameY / 18;
                if (num4 >= 3)
                {
                    num4 -= 3;
                }
                num = i - num3;
                num2 = j - num4;
                for (int k = num; k < num + 2; k++)
                {
                    for (int l = num2; l < num2 + 3; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (!this[k, l].active())
                        {
                            continue;
                        }
                        if (this[k, l].type == 410)
                        {
                            if (this[k, l].frameY < 56)
                            {
                                this[k, l].frameY += 56;
                            }
                            else
                            {
                                this[k, l].frameY -= 56;
                            }
                        }
                        else if (this[k, l].type == 480)
                        {
                            if (this[k, l].frameY < 54)
                            {
                                this[k, l].frameY += 54;
                            }
                            else
                            {
                                this[k, l].frameY -= 54;
                            }
                        }
                        else if (this[k, l].type == 509)
                        {
                            if (this[k, l].frameY < 54)
                            {
                                this[k, l].frameY += 54;
                            }
                            else
                            {
                                this[k, l].frameY -= 54;
                            }
                        }
                    }
                }
                if (running)
                {
                    SkipWire(num, num2);
                    SkipWire(num, num2 + 1);
                    SkipWire(num, num2 + 2);
                    SkipWire(num + 1, num2);
                    SkipWire(num + 1, num2 + 1);
                    SkipWire(num + 1, num2 + 2);
                }
                SendTileSquare(-1, num, num2 + 1, 3);
            }

            public void SwitchFountain(int i, int j)
            {
                int num = i;
                int num2 = j;
                int num3;
                for (num3 = this[i, j].frameX / 18; num3 >= 2; num3 -= 2)
                {
                }
                int num4 = this[i, j].frameY / 18;
                if (num4 >= 4)
                {
                    num4 -= 4;
                }
                num = i - num3;
                num2 = j - num4;
                for (int k = num; k < num + 2; k++)
                {
                    for (int l = num2; l < num2 + 4; l++)
                    {
                        if (this[k, l] == null)
                        {
                            this[k, l] = CreateTile();
                        }
                        if (this[k, l].active() && this[k, l].type == 207)
                        {
                            if (this[k, l].frameY < 72)
                            {
                                this[k, l].frameY += 72;
                            }
                            else
                            {
                                this[k, l].frameY -= 72;
                            }
                        }
                    }
                }
                if (running)
                {
                    SkipWire(num, num2);
                    SkipWire(num, num2 + 1);
                    SkipWire(num, num2 + 2);
                    SkipWire(num, num2 + 3);
                    SkipWire(num + 1, num2);
                    SkipWire(num + 1, num2 + 1);
                    SkipWire(num + 1, num2 + 2);
                    SkipWire(num + 1, num2 + 3);
                }
                SendTileSquare(-1, num, num2 + 1, 4);
            }
            public void Teleport()
            {
                if (_teleport[0].X < _teleport[1].X + 3f && _teleport[0].X > _teleport[1].X - 3f && _teleport[0].Y > _teleport[1].Y - 3f && _teleport[0].Y < _teleport[1].Y)
                {
                    return;
                }
                Rectangle[] array = new Rectangle[2];
                array[0].X = (int)(_teleport[0].X * 16f);
                array[0].Width = 48;
                array[0].Height = 48;
                array[0].Y = (int)(_teleport[0].Y * 16f - (float)array[0].Height);
                array[1].X = (int)(_teleport[1].X * 16f);
                array[1].Width = 48;
                array[1].Height = 48;
                array[1].Y = (int)(_teleport[1].Y * 16f - (float)array[1].Height);
                for (int i = 0; i < 2; i++)
                {
                    Vector2 value = new Vector2(array[1].X - array[0].X, array[1].Y - array[0].Y);
                    if (i == 1)
                    {
                        value = new Vector2(array[0].X - array[1].X, array[0].Y - array[1].Y);
                    }
                    if (!blockPlayerTeleportationForOneIteration)
                    {
                        for (int j = 0; j < 255; j++)
                        {
                            if (Main.player[j].active && !Main.player[j].dead && !Main.player[j].teleporting && TeleporterHitboxIntersects(array[i], Main.player[j].Hitbox))
                            {
                                Vector2 vector = Main.player[j].position + value;
                                Main.player[j].teleporting = true;
                                if (Main.netMode == 2)
                                {
                                    RemoteClient.CheckSection(j, vector);
                                }
                                Main.player[j].Teleport(vector);
                                if (Main.netMode == 2)
                                {
                                    SendDataToPlayer(65, -1, -1, null, 0, j, vector.X, vector.Y);
                                }
                            }
                        }
                    }
                    for (int k = 0; k < 200; k++)
                    {
                        if (Main.npc[k].active && !Main.npc[k].teleporting && Main.npc[k].lifeMax > 5 && !Main.npc[k].boss && !Main.npc[k].noTileCollide)
                        {
                            int type = Main.npc[k].type;
                            if (!NPCID.Sets.TeleportationImmune[type] && TeleporterHitboxIntersects(array[i], Main.npc[k].Hitbox))
                            {
                                Main.npc[k].teleporting = true;
                                Main.npc[k].Teleport(Main.npc[k].position + value);
                            }
                        }
                    }
                }
                for (int l = 0; l < 255; l++)
                {
                    Main.player[l].teleporting = false;
                }
                for (int m = 0; m < 200; m++)
                {
                    Main.npc[m].teleporting = false;
                }
            }

            public bool TeleporterHitboxIntersects(Rectangle teleporter, Rectangle entity)
            {
                Rectangle rectangle = Rectangle.Union(teleporter, entity);
                if (rectangle.Width <= teleporter.Width + entity.Width)
                {
                    return rectangle.Height <= teleporter.Height + entity.Height;
                }
                return false;
            }
            public void MassWireOperationInner(Point ps, Point pe, Vector2 dropPoint, bool dir, ref int wireCount, ref int actuatorCount)
            {
                Math.Abs(ps.X - pe.X);
                Math.Abs(ps.Y - pe.Y);
                int num = Math.Sign(pe.X - ps.X);
                int num2 = Math.Sign(pe.Y - ps.Y);
                WiresUI.Settings.MultiToolMode toolMode = WiresUI.Settings.ToolMode;
                Point pt = default(Point);
                bool flag = false;
                Item.StartCachingType(530);
                Item.StartCachingType(849);
                bool flag2 = dir;
                int num3;
                int num4;
                int num5;
                if (flag2)
                {
                    pt.X = ps.X;
                    num3 = ps.Y;
                    num4 = pe.Y;
                    num5 = num2;
                }
                else
                {
                    pt.Y = ps.Y;
                    num3 = ps.X;
                    num4 = pe.X;
                    num5 = num;
                }
                for (int i = num3; i != num4; i += num5)
                {
                    if (flag)
                    {
                        break;
                    }
                    if (flag2)
                    {
                        pt.Y = i;
                    }
                    else
                    {
                        pt.X = i;
                    }
                    bool? flag3 = MassWireOperationStep(pt, toolMode, ref wireCount, ref actuatorCount);
                    if (flag3.HasValue && !flag3.Value)
                    {
                        flag = true;
                        break;
                    }
                }
                if (flag2)
                {
                    pt.Y = pe.Y;
                    num3 = ps.X;
                    num4 = pe.X;
                    num5 = num;
                }
                else
                {
                    pt.X = pe.X;
                    num3 = ps.Y;
                    num4 = pe.Y;
                    num5 = num2;
                }
                for (int j = num3; j != num4; j += num5)
                {
                    if (flag)
                    {
                        break;
                    }
                    if (!flag2)
                    {
                        pt.Y = j;
                    }
                    else
                    {
                        pt.X = j;
                    }
                    bool? flag4 = MassWireOperationStep(pt, toolMode, ref wireCount, ref actuatorCount);
                    if (flag4.HasValue && !flag4.Value)
                    {
                        flag = true;
                        break;
                    }
                }
                if (!flag)
                {
                    MassWireOperationStep(pe, toolMode, ref wireCount, ref actuatorCount);
                }
                Item.DropCache(dropPoint, Vector2.Zero, 530);
                Item.DropCache(dropPoint, Vector2.Zero, 849);
            }

            public bool? MassWireOperationStep(Point pt, WiresUI.Settings.MultiToolMode mode, ref int wiresLeftToConsume, ref int actuatorsLeftToConstume)
            {
                if (!InWorld(pt.X, pt.Y, 1))
                {
                    return null;
                }
                ITile tile = this[pt.X, pt.Y];
                if (tile == null)
                {
                    return null;
                }
                if (!mode.HasFlag(WiresUI.Settings.MultiToolMode.Cutter))
                {
                    if (mode.HasFlag(WiresUI.Settings.MultiToolMode.Red) && !tile.wire())
                    {
                        if (wiresLeftToConsume <= 0)
                        {
                            return false;
                        }
                        wiresLeftToConsume--;
                        PlaceWire(pt.X, pt.Y);
                        SendDataToPlayer(17, -1, -1, null, 5, pt.X, pt.Y);
                    }
                    if (mode.HasFlag(WiresUI.Settings.MultiToolMode.Green) && !tile.wire3())
                    {
                        if (wiresLeftToConsume <= 0)
                        {
                            return false;
                        }
                        wiresLeftToConsume--;
                        PlaceWire3(pt.X, pt.Y);
                        SendDataToPlayer(17, -1, -1, null, 12, pt.X, pt.Y);
                    }
                    if (mode.HasFlag(WiresUI.Settings.MultiToolMode.Blue) && !tile.wire2())
                    {
                        if (wiresLeftToConsume <= 0)
                        {
                            return false;
                        }
                        wiresLeftToConsume--;
                        PlaceWire2(pt.X, pt.Y);
                        SendDataToPlayer(17, -1, -1, null, 10, pt.X, pt.Y);
                    }
                    if (mode.HasFlag(WiresUI.Settings.MultiToolMode.Yellow) && !tile.wire4())
                    {
                        if (wiresLeftToConsume <= 0)
                        {
                            return false;
                        }
                        wiresLeftToConsume--;
                        PlaceWire4(pt.X, pt.Y);
                        SendDataToPlayer(17, -1, -1, null, 16, pt.X, pt.Y);
                    }
                    if (mode.HasFlag(WiresUI.Settings.MultiToolMode.Actuator) && !tile.actuator())
                    {
                        if (actuatorsLeftToConstume <= 0)
                        {
                            return false;
                        }
                        actuatorsLeftToConstume--;
                        PlaceActuator(pt.X, pt.Y);
                        SendDataToPlayer(17, -1, -1, null, 8, pt.X, pt.Y);
                    }
                }
                if (mode.HasFlag(WiresUI.Settings.MultiToolMode.Cutter))
                {
                    if (mode.HasFlag(WiresUI.Settings.MultiToolMode.Red) && tile.wire() && KillWire(pt.X, pt.Y))
                    {
                        SendDataToPlayer(17, -1, -1, null, 6, pt.X, pt.Y);
                    }
                    if (mode.HasFlag(WiresUI.Settings.MultiToolMode.Green) && tile.wire3() && KillWire3(pt.X, pt.Y))
                    {
                        SendDataToPlayer(17, -1, -1, null, 13, pt.X, pt.Y);
                    }
                    if (mode.HasFlag(WiresUI.Settings.MultiToolMode.Blue) && tile.wire2() && KillWire2(pt.X, pt.Y))
                    {
                        SendDataToPlayer(17, -1, -1, null, 11, pt.X, pt.Y);
                    }
                    if (mode.HasFlag(WiresUI.Settings.MultiToolMode.Yellow) && tile.wire4() && KillWire4(pt.X, pt.Y))
                    {
                        SendDataToPlayer(17, -1, -1, null, 17, pt.X, pt.Y);
                    }
                    if (mode.HasFlag(WiresUI.Settings.MultiToolMode.Actuator) && tile.actuator() && KillActuator(pt.X, pt.Y))
                    {
                        SendDataToPlayer(17, -1, -1, null, 9, pt.X, pt.Y);
                    }
                }
                return true;
            }
            #endregion
            #region 流体
            public const int maxLiquidBuffer = 50000;

            public int maxLiquid = 25000;

            public int skipCount;

            public int stuckCount;

            public int stuckAmount;

            public int cycles = 10;

            public int curMaxLiquid = 0;

            public int numLiquid = 0;

            public bool stuck;

            public bool quickFall;

            public bool quickSettle;

            public int wetCounter;

            public int panicCounter;

            public bool panicMode;

            public int panicY;

            public int waterLine;

            public HashSet<int> _netChangeSet = new HashSet<int>();

            public HashSet<int> _swapNetChangeSet = new HashSet<int>();

            public int numLiquidBuffer = 0;

            public void NetSendLiquid(int x, int y)
            {
                if (!WorldGen.gen)
                {
                    lock (_netChangeSet)
                    {
                        _netChangeSet.Add(((x & 0xFFFF) << 16) | (y & 0xFFFF));
                    }
                }
            }
            public bool UnderGroundDesertCheck(int x, int y)
            {
                int num = 3;
                for (int i = x - num; i <= x + num; i++)
                {
                    for (int j = y - num; j <= y + num; j++)
                    {
                        if (InWorld(i, j) && (this[i, j].wall == 187 || this[i, j].wall == 216))
                        {
                            return true;
                        }
                    }
                }
                return false;
            }
            public bool Setting_UseReducedMaxLiquids = true;
            public void QuickWater(int verbose = 0, int minY = -1, int maxY = -1)
            {
                Main.tileSolid[379] = true;
                tilesIgnoreWater(ignoreSolids: true);
                if (minY == -1)
                {
                    minY = 3;
                }
                if (maxY == -1)
                {
                    maxY = MaxTilesY - 3;
                }
                for (int num = maxY; num >= minY; num--)
                {
                    //UpdateProgressDisplay(verbose, minY, maxY, num);
                    for (int i = 4; i < MaxTilesX - 4; i++)
                    {
                        if (this[i, num].liquid != 0)
                        {
                            SettleWaterAt(i, num);
                        }
                    }
                }
                tilesIgnoreWater(ignoreSolids: false);
            }
            public void tilesIgnoreWater(bool ignoreSolids) => Terraria.Liquid.tilesIgnoreWater(ignoreSolids);
            public void SettleWaterAt(int originX, int originY)
            {
                ITile tile = this[originX, originY];
                tilesIgnoreWater(ignoreSolids: true);
                if (tile.liquid == 0)
                {
                    return;
                }
                int num = originX;
                int num2 = originY;
                bool tileAtXYHasLava = tile.lava();
                bool flag = tile.honey();
                int num3 = tile.liquid;
                byte b = tile.liquidType();
                tile.liquid = 0;
                bool flag2 = true;
                while (true)
                {
                    ITile tile2 = this[num, num2 + 1];
                    bool flag3 = false;
                    while (num2 < MaxTilesY - 5 && tile2.liquid == 0 && (!tile2.nactive() || !Main.tileSolid[tile2.type] || Main.tileSolidTop[tile2.type]))
                    {
                        num2++;
                        flag3 = true;
                        flag2 = false;
                        tile2 = this[num, num2 + 1];
                    }
                    if (flag3 && WorldGen.gen && !flag && num2 > waterLine)
                    {
                        b = 1;
                    }
                    int num4 = -1;
                    int num5 = 0;
                    int num6 = -1;
                    int num7 = 0;
                    bool flag4 = false;
                    bool flag5 = false;
                    bool flag6 = false;
                    while (true)
                    {
                        if (this[num + num5 * num4, num2].liquid == 0)
                        {
                            num6 = num4;
                            num7 = num5;
                        }
                        if (num4 == -1 && num + num5 * num4 < 5)
                        {
                            flag5 = true;
                        }
                        else if (num4 == 1 && num + num5 * num4 > MaxTilesX - 5)
                        {
                            flag4 = true;
                        }
                        tile2 = this[num + num5 * num4, num2 + 1];
                        if (tile2.liquid != 0 && tile2.liquid != byte.MaxValue && tile2.liquidType() == b)
                        {
                            int num8 = 255 - tile2.liquid;
                            if (num8 > num3)
                            {
                                num8 = num3;
                            }
                            tile2.liquid += (byte)num8;
                            num3 -= num8;
                            if (num3 == 0)
                            {
                                break;
                            }
                        }
                        if (num2 < MaxTilesY - 5 && tile2.liquid == 0 && (!tile2.nactive() || !Main.tileSolid[tile2.type] || Main.tileSolidTop[tile2.type]))
                        {
                            flag6 = true;
                            break;
                        }
                        ITile tile3 = this[num + (num5 + 1) * num4, num2];
                        if ((tile3.liquid != 0 && (!flag2 || num4 != 1)) || (tile3.nactive() && Main.tileSolid[tile3.type] && !Main.tileSolidTop[tile3.type]))
                        {
                            if (num4 == 1)
                            {
                                flag4 = true;
                            }
                            else
                            {
                                flag5 = true;
                            }
                        }
                        if (flag5 && flag4)
                        {
                            break;
                        }
                        if (flag4)
                        {
                            num4 = -1;
                            num5++;
                        }
                        else if (flag5)
                        {
                            if (num4 == 1)
                            {
                                num5++;
                            }
                            num4 = 1;
                        }
                        else
                        {
                            if (num4 == 1)
                            {
                                num5++;
                            }
                            num4 = -num4;
                        }
                    }
                    num += num7 * num6;
                    if (num3 == 0 || !flag6)
                    {
                        break;
                    }
                    num2++;
                }
                this[num, num2].liquid = (byte)num3;
                this[num, num2].liquidType(b);
                if (this[num, num2].liquid > 0)
                {
                    AttemptToMoveLava(num, num2, tileAtXYHasLava);
                    AttemptToMoveHoney(num, num2, flag);
                }
                tilesIgnoreWater(ignoreSolids: false);
            }
            public void AttemptToMoveHoney(int X, int Y, bool tileAtXYHasHoney)
            {
                if (this[X - 1, Y].liquid > 0 && this[X - 1, Y].honey() != tileAtXYHasHoney)
                {
                    if (tileAtXYHasHoney)
                    {
                        HoneyCheck(X, Y);
                    }
                    else
                    {
                        HoneyCheck(X - 1, Y);
                    }
                }
                else if (this[X + 1, Y].liquid > 0 && this[X + 1, Y].honey() != tileAtXYHasHoney)
                {
                    if (tileAtXYHasHoney)
                    {
                        HoneyCheck(X, Y);
                    }
                    else
                    {
                        HoneyCheck(X + 1, Y);
                    }
                }
                else if (this[X, Y - 1].liquid > 0 && this[X, Y - 1].honey() != tileAtXYHasHoney)
                {
                    if (tileAtXYHasHoney)
                    {
                        HoneyCheck(X, Y);
                    }
                    else
                    {
                        HoneyCheck(X, Y - 1);
                    }
                }
                else if (this[X, Y + 1].liquid > 0 && this[X, Y + 1].honey() != tileAtXYHasHoney)
                {
                    if (tileAtXYHasHoney)
                    {
                        HoneyCheck(X, Y);
                    }
                    else
                    {
                        HoneyCheck(X, Y + 1);
                    }
                }
            }

            public void AttemptToMoveLava(int X, int Y, bool tileAtXYHasLava)
            {
                if (this[X - 1, Y].liquid > 0 && this[X - 1, Y].lava() != tileAtXYHasLava)
                {
                    if (tileAtXYHasLava)
                    {
                        LavaCheck(X, Y);
                    }
                    else
                    {
                        LavaCheck(X - 1, Y);
                    }
                }
                else if (this[X + 1, Y].liquid > 0 && this[X + 1, Y].lava() != tileAtXYHasLava)
                {
                    if (tileAtXYHasLava)
                    {
                        LavaCheck(X, Y);
                    }
                    else
                    {
                        LavaCheck(X + 1, Y);
                    }
                }
                else if (this[X, Y - 1].liquid > 0 && this[X, Y - 1].lava() != tileAtXYHasLava)
                {
                    if (tileAtXYHasLava)
                    {
                        LavaCheck(X, Y);
                    }
                    else
                    {
                        LavaCheck(X, Y - 1);
                    }
                }
                else if (this[X, Y + 1].liquid > 0 && this[X, Y + 1].lava() != tileAtXYHasLava)
                {
                    if (tileAtXYHasLava)
                    {
                        LavaCheck(X, Y);
                    }
                    else
                    {
                        LavaCheck(X, Y + 1);
                    }
                }
            }
            public void AddBuffer(int x, int y)
            {
                if (numLiquidBuffer < 49998 && !this[x, y].checkingLiquid())
                {
                    this[x, y].checkingLiquid(checkingLiquid: true);
                    LiquidBuffer[numLiquidBuffer].x = x;
                    LiquidBuffer[numLiquidBuffer].y = y;
                    numLiquidBuffer++;
                }
            }

            public void DelBuffer(int l)
            {
                numLiquidBuffer--;
                LiquidBuffer[l].x = LiquidBuffer[numLiquidBuffer].x;
                LiquidBuffer[l].y = LiquidBuffer[numLiquidBuffer].y;
            }
            public void UpdateLiquid()
            {
                int num = 8;
                tilesIgnoreWater(ignoreSolids: true);
                if (Main.netMode == 2)
                {
                    int num2 = 0;
                    for (int i = 0; i < 15; i++)
                    {
                        if (Main.player[i].active)
                        {
                            num2++;
                        }
                    }
                    cycles = 10 + num2 / 3;
                    curMaxLiquid = maxLiquid - num2 * 250;
                    num = 10 + num2 / 3;
                    if (Setting_UseReducedMaxLiquids)
                    {
                        curMaxLiquid = 5000;
                    }
                }
                if (!panicMode)
                {
                    if ((double)numLiquidBuffer >= 45000.0)
                    {
                        panicCounter++;
                        if (panicCounter > 3600)
                        {
                            StartPanic();
                        }
                    }
                    else
                    {
                        panicCounter = 0;
                    }
                }
                if (panicMode)
                {
                    int num3 = 0;
                    while (panicY >= 3 && num3 < 5)
                    {
                        num3++;
                        QuickWater(0, panicY, panicY);
                        panicY--;
                        if (panicY >= 3)
                        {
                            continue;
                        }
                        System.Console.WriteLine(Language.GetTextValue("Misc.WaterSettled"));
                        panicCounter = 0;
                        panicMode = false;
                        WaterCheck();
                        if (Main.netMode != 2)
                        {
                            continue;
                        }
                        /*for (int j = 0; j < 255; j++)
                        {
                            for (int k = 0; k < Main.maxSectionsX; k++)
                            {
                                for (int l = 0; l < Main.maxSectionsY; l++)
                                {
                                    Netplay.Clients[j].TileSections[k, l] = false;
                                }
                            }
                        }*/
                    }
                    return;
                }
                bool flag = quickSettle;
                if (Setting_UseReducedMaxLiquids)
                {
                    flag |= (numLiquid > 2000);
                }
                if (flag)
                {
                    quickFall = true;
                }
                else
                {
                    quickFall = false;
                }
                wetCounter++;
                int num4 = curMaxLiquid / cycles;
                int num5 = num4 * (wetCounter - 1);
                int num6 = num4 * wetCounter;
                if (wetCounter == cycles)
                {
                    num6 = numLiquid;
                }
                if (num6 > numLiquid)
                {
                    num6 = numLiquid;
                    wetCounter = cycles;
                }
                if (quickFall)
                {
                    for (int m = num5; m < num6; m++)
                    {
                        Liquid[m].delay = 10;
                        Liquid[m].Update(this);
                        this[Liquid[m].x, Liquid[m].y].skipLiquid(skipLiquid: false);
                    }
                }
                else
                {
                    for (int n = num5; n < num6; n++)
                    {
                        if (!this[Liquid[n].x, Liquid[n].y].skipLiquid())
                        {
                            Liquid[n].Update(this);
                        }
                        else
                        {
                            this[Liquid[n].x, Liquid[n].y].skipLiquid(skipLiquid: false);
                        }
                    }
                }
                if (wetCounter >= cycles)
                {
                    wetCounter = 0;
                    for (int num7 = numLiquid - 1; num7 >= 0; num7--)
                    {
                        if (Liquid[num7].kill >= num)
                        {
                            if (this[Liquid[num7].x, Liquid[num7].y].liquid == 254)
                            {
                                this[Liquid[num7].x, Liquid[num7].y].liquid = byte.MaxValue;
                            }
                            DelWater(num7);
                        }
                    }
                    int num8 = curMaxLiquid - (curMaxLiquid - numLiquid);
                    if (num8 > numLiquidBuffer)
                    {
                        num8 = numLiquidBuffer;
                    }
                    for (int num9 = 0; num9 < num8; num9++)
                    {
                        this[LiquidBuffer[0].x, LiquidBuffer[0].y].checkingLiquid(checkingLiquid: false);
                        AddWater(LiquidBuffer[0].x, LiquidBuffer[0].y);
                        DelBuffer(0);
                    }
                    if (numLiquid > 0 && numLiquid > stuckAmount - 50 && numLiquid < stuckAmount + 50)
                    {
                        stuckCount++;
                        if (stuckCount >= 10000)
                        {
                            stuck = true;
                            for (int num10 = numLiquid - 1; num10 >= 0; num10--)
                            {
                                DelWater(num10);
                            }
                            stuck = false;
                            stuckCount = 0;
                        }
                    }
                    else
                    {
                        stuckCount = 0;
                        stuckAmount = numLiquid;
                    }
                }
                if (!WorldGen.gen && Main.netMode == 2 && _netChangeSet.Count > 0)
                {
                    Terraria.Utils.Swap(ref _netChangeSet, ref _swapNetChangeSet);
                    Terraria.GameContent.NetModules.NetLiquidModule.CreateAndBroadcastByChunk(_swapNetChangeSet);
                    _swapNetChangeSet.Clear();
                }
                tilesIgnoreWater(ignoreSolids: false);
            }
            public void WaterCheck()
            {
                tilesIgnoreWater(ignoreSolids: true);
                numLiquid = 0;
                numLiquidBuffer = 0;
                for (int i = 1; i < Main.maxTilesX - 1; i++)
                {
                    for (int num = Main.maxTilesY - 2; num > 0; num--)
                    {
                        ITile tile = this[i, num];
                        tile.checkingLiquid(checkingLiquid: false);
                        if (tile.liquid > 0 && tile.nactive() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
                        {
                            tile.liquid = 0;
                        }
                        else if (tile.liquid > 0)
                        {
                            if (tile.active())
                            {
                                if (tile.lava())
                                {
                                    if (TileObjectData.CheckLavaDeath(tile))
                                    {
                                        KillTile(i, num);
                                    }
                                }
                                else if (TileObjectData.CheckWaterDeath(tile))
                                {
                                    KillTile(i, num);
                                }
                            }
                            ITile tile2 = this[i, num + 1];
                            if ((!tile2.nactive() || !Main.tileSolid[tile2.type] || Main.tileSolidTop[tile2.type]) && tile2.liquid < byte.MaxValue)
                            {
                                if (tile2.liquid > 250)
                                {
                                    tile2.liquid = byte.MaxValue;
                                }
                                else
                                {
                                    AddWater(i, num);
                                }
                            }
                            ITile tile3 = this[i - 1, num];
                            ITile tile4 = this[i + 1, num];
                            if ((!tile3.nactive() || !Main.tileSolid[tile3.type] || Main.tileSolidTop[tile3.type]) && tile3.liquid != tile.liquid)
                            {
                                AddWater(i, num);
                            }
                            else if ((!tile4.nactive() || !Main.tileSolid[tile4.type] || Main.tileSolidTop[tile4.type]) && tile4.liquid != tile.liquid)
                            {
                                AddWater(i, num);
                            }
                            if (tile.lava())
                            {
                                if (tile3.liquid > 0 && !tile3.lava())
                                {
                                    AddWater(i, num);
                                }
                                else if (tile4.liquid > 0 && !tile4.lava())
                                {
                                    AddWater(i, num);
                                }
                                else if (this[i, num - 1].liquid > 0 && !this[i, num - 1].lava())
                                {
                                    AddWater(i, num);
                                }
                                else if (tile2.liquid > 0 && !tile2.lava())
                                {
                                    AddWater(i, num);
                                }
                            }
                        }
                    }
                }
                tilesIgnoreWater(ignoreSolids: false);
            }
            public void AddWater(int x, int y)
            {
                ITile tile = this[x, y];
                if (this[x, y] == null || tile.checkingLiquid() || x >= MaxTilesX - 5 || y >= MaxTilesY - 5 || x < 5 || y < 5 || tile.liquid == 0 || (tile.nactive() && Main.tileSolid[tile.type] && tile.type != 546 && !Main.tileSolidTop[tile.type]))
                {
                    return;
                }
                if (numLiquid >= curMaxLiquid - 1)
                {
                    AddBuffer(x, y);
                    return;
                }
                tile.checkingLiquid(checkingLiquid: true);
                tile.skipLiquid(skipLiquid: false);
                Liquid[numLiquid].kill = 0;
                Liquid[numLiquid].x = x;
                Liquid[numLiquid].y = y;
                Liquid[numLiquid].delay = 0;
                numLiquid++;
                NetSendLiquid(x, y);
                if (!tile.active() || WorldGen.gen)
                {
                    return;
                }
                bool flag = false;
                if (tile.lava())
                {
                    if (TileObjectData.CheckLavaDeath(tile))
                    {
                        flag = true;
                    }
                }
                else if (TileObjectData.CheckWaterDeath(tile))
                {
                    flag = true;
                }
                if (flag)
                {
                    KillTile(x, y);
                    if (Main.netMode == 2)
                    {
                        SendDataToPlayer(17, -1, -1, null, 0, x, y);
                    }
                }
            }
            public void DelWater(int l)
            {
                int num = Liquid[l].x;
                int num2 = Liquid[l].y;
                ITile tile = this[num - 1, num2];
                ITile tile2 = this[num + 1, num2];
                ITile tile3 = this[num, num2 + 1];
                ITile tile4 = this[num, num2];
                byte b = 2;
                if (tile4.liquid < b)
                {
                    tile4.liquid = 0;
                    if (tile.liquid < b)
                    {
                        tile.liquid = 0;
                    }
                    else
                    {
                        AddWater(num - 1, num2);
                    }
                    if (tile2.liquid < b)
                    {
                        tile2.liquid = 0;
                    }
                    else
                    {
                        AddWater(num + 1, num2);
                    }
                }
                else if (tile4.liquid < 20)
                {
                    if ((tile.liquid < tile4.liquid && (!tile.nactive() || !Main.tileSolid[tile.type] || Main.tileSolidTop[tile.type])) || (tile2.liquid < tile4.liquid && (!tile2.nactive() || !Main.tileSolid[tile2.type] || Main.tileSolidTop[tile2.type])) || (tile3.liquid < byte.MaxValue && (!tile3.nactive() || !Main.tileSolid[tile3.type] || Main.tileSolidTop[tile3.type])))
                    {
                        tile4.liquid = 0;
                    }
                }
                else if (tile3.liquid < byte.MaxValue && (!tile3.nactive() || !Main.tileSolid[tile3.type] || Main.tileSolidTop[tile3.type]) && !stuck && (!this[num, num2].nactive() || !Main.tileSolid[this[num, num2].type] || Main.tileSolidTop[this[num, num2].type]))
                {
                    Liquid[l].kill = 0;
                    return;
                }
                if (tile4.liquid < 250 && this[num, num2 - 1].liquid > 0)
                {
                    AddWater(num, num2 - 1);
                }
                if (tile4.liquid == 0)
                {
                    tile4.liquidType(0);
                }
                else
                {
                    if (tile2.liquid > 0 && tile2.liquid < 250 && (!tile2.nactive() || !Main.tileSolid[tile2.type] || Main.tileSolidTop[tile2.type]) && tile4.liquid != tile2.liquid)
                    {
                        AddWater(num + 1, num2);
                    }
                    if (tile.liquid > 0 && tile.liquid < 250 && (!tile.nactive() || !Main.tileSolid[tile.type] || Main.tileSolidTop[tile.type]) && tile4.liquid != tile.liquid)
                    {
                        AddWater(num - 1, num2);
                    }
                    if (tile4.lava())
                    {
                        LavaCheck(num, num2);
                        for (int i = num - 1; i <= num + 1; i++)
                        {
                            for (int j = num2 - 1; j <= num2 + 1; j++)
                            {
                                ITile tile5 = this[i, j];
                                if (!tile5.active())
                                {
                                    continue;
                                }
                                if (tile5.type == 2 || tile5.type == 23 || tile5.type == 109 || tile5.type == 199 || tile5.type == 477 || tile5.type == 492)
                                {
                                    tile5.type = 0;
                                    WorldGen.SquareTileFrame(i, j);
                                    if (Main.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num, num2, 3);
                                    }
                                }
                                else if (tile5.type == 60 || tile5.type == 70)
                                {
                                    tile5.type = 59;
                                    WorldGen.SquareTileFrame(i, j);
                                    if (Main.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num, num2, 3);
                                    }
                                }
                            }
                        }
                    }
                    else if (tile4.honey())
                    {
                        HoneyCheck(num, num2);
                    }
                }
                if (Main.netMode == 2)
                {
                    NetSendLiquid(num, num2);
                }
                numLiquid--;
                this[Liquid[l].x, Liquid[l].y].checkingLiquid(checkingLiquid: false);
                Liquid[l].x = Liquid[numLiquid].x;
                Liquid[l].y = Liquid[numLiquid].y;
                Liquid[l].kill = Liquid[numLiquid].kill;
                if (Main.tileAlch[tile4.type])
                {
                    CheckAlch(num, num2);
                }
                else if (tile4.type == 518)
                {
                    if (quickFall)
                    {
                        CheckLilyPad(num, num2);
                    }
                    else if (this[num, num2 + 1].liquid < byte.MaxValue || this[num, num2 - 1].liquid > 0)
                    {
                        SquareTileFrame(num, num2);
                    }
                    else
                    {
                        CheckLilyPad(num, num2);
                    }
                }
            }
            public void LavaCheck(int x, int y)
            {
                if (WorldGen.generatingWorld && UnderGroundDesertCheck(x, y))
                {
                    for (int i = x - 3; i <= x + 3; i++)
                    {
                        for (int j = y - 3; j <= y + 3; j++)
                        {
                            this[i, j].lava(lava: true);
                        }
                    }
                }
                if (SolidTile(x, y))
                {
                    return;
                }
                ITile tile = this[x - 1, y];
                ITile tile2 = this[x + 1, y];
                ITile tile3 = this[x, y - 1];
                ITile tile4 = this[x, y + 1];
                ITile tile5 = this[x, y];
                if ((tile.liquid > 0 && !tile.lava()) || (tile2.liquid > 0 && !tile2.lava()) || (tile3.liquid > 0 && !tile3.lava()))
                {
                    int num = 0;
                    int num2 = 56;
                    if (!tile.lava())
                    {
                        num += tile.liquid;
                        tile.liquid = 0;
                    }
                    if (!tile2.lava())
                    {
                        num += tile2.liquid;
                        tile2.liquid = 0;
                    }
                    if (!tile3.lava())
                    {
                        num += tile3.liquid;
                        tile3.liquid = 0;
                    }
                    if (tile.honey() || tile2.honey() || tile3.honey())
                    {
                        num2 = 230;
                    }
                    if (num < 24)
                    {
                        return;
                    }
                    if (tile5.active() && Main.tileObsidianKill[tile5.type])
                    {
                        KillTile(x, y);
                        SendDataToPlayer(17, -1, -1, null, 0, x, y);

                    }
                    if (WorldGen.getGoodWorldGen)
                    {
                        if (!tile.lava() && !tile2.lava() && !tile3.lava())
                        {
                            tile5.lava(lava: false);
                        }
                        else
                        {
                            tile5.lava(lava: true);
                        }
                    }
                    else
                    {
                        if (tile5.active())
                        {
                            return;
                        }
                        tile5.liquid = 0;
                        tile5.lava(lava: false);
                        PlaceTile(x, y, num2, mute: true, forced: true);
                        SquareTileFrame(x, y);
                        SendTileSquare(-1, x - 1, y - 1, 3, (num2 == 56) ? TileChangeType.LavaWater : TileChangeType.HoneyLava);

                    }
                }
                else
                {
                    if (tile4.liquid <= 0 || tile4.lava())
                    {
                        return;
                    }
                    bool flag = false;
                    if (tile5.active() && TileID.Sets.IsAContainer[tile5.type] && !TileID.Sets.IsAContainer[tile4.type])
                    {
                        flag = true;
                    }
                    if (Main.tileCut[tile4.type])
                    {
                        KillTile(x, y + 1);
                        SendDataToPlayer(17, -1, -1, null, 0, x, y + 1);

                    }
                    else if (tile4.active() && Main.tileObsidianKill[tile4.type])
                    {
                        KillTile(x, y + 1);
                        SendDataToPlayer(17, -1, -1, null, 0, x, y + 1);

                    }
                    if (!(!tile4.active() || flag))
                    {
                        return;
                    }
                    if (tile5.liquid < 24)
                    {
                        tile5.liquid = 0;
                        tile5.liquidType(0);
                        SendTileSquare(-1, x - 1, y, 3);

                        return;
                    }
                    if (WorldGen.getGoodWorldGen)
                    {
                        if (!tile4.lava())
                        {
                            tile5.lava(lava: false);
                        }
                        else
                        {
                            tile5.lava(lava: true);
                        }
                        return;
                    }
                    int num3 = 56;
                    if (tile4.honey())
                    {
                        num3 = 230;
                    }
                    tile5.liquid = 0;
                    tile5.lava(lava: false);
                    tile4.liquid = 0;
                    PlaceTile(x, y + 1, num3, mute: true, forced: true);
                    SquareTileFrame(x, y + 1);
                    SendTileSquare(-1, x - 1, y, 3, (num3 == 56) ? TileChangeType.LavaWater : TileChangeType.HoneyLava);

                }
            }
            public void HoneyCheck(int x, int y)
            {
                if (SolidTile(x, y))
                {
                    return;
                }
                ITile tile = this[x - 1, y];
                ITile tile2 = this[x + 1, y];
                ITile tile3 = this[x, y - 1];
                ITile tile4 = this[x, y + 1];
                ITile tile5 = this[x, y];
                bool flag = false;
                if ((tile.liquid > 0 && tile.liquidType() == 0) || (tile2.liquid > 0 && tile2.liquidType() == 0) || (tile3.liquid > 0 && tile3.liquidType() == 0))
                {
                    int num = 0;
                    if (tile.liquidType() == 0)
                    {
                        num += tile.liquid;
                        tile.liquid = 0;
                    }
                    if (tile2.liquidType() == 0)
                    {
                        num += tile2.liquid;
                        tile2.liquid = 0;
                    }
                    if (tile3.liquidType() == 0)
                    {
                        num += tile3.liquid;
                        tile3.liquid = 0;
                    }
                    if (tile.lava() || tile2.lava() || tile3.lava())
                    {
                        flag = true;
                    }
                    if (num < 32)
                    {
                        return;
                    }
                    if (tile5.active() && Main.tileObsidianKill[tile5.type])
                    {
                        KillTile(x, y);
                        SendDataToPlayer(17, -1, -1, null, 0, x, y);
                    }
                    if (!tile5.active())
                    {
                        tile5.liquid = 0;
                        tile5.liquidType(0);
                        PlaceTile(x, y, 229, mute: true, forced: true);
                        SquareTileFrame(x, y);
                        SendTileSquare(-1, x - 1, y - 1, 3, flag ? TileChangeType.HoneyLava : TileChangeType.HoneyWater);
                    }
                }
                else
                {
                    if (tile4.liquid <= 0 || tile4.liquidType() != 0)
                    {
                        return;
                    }
                    if (Main.tileCut[tile4.type])
                    {
                        KillTile(x, y + 1);
                        SendDataToPlayer(17, -1, -1, null, 0, x, y + 1);

                    }
                    else if (tile4.active() && Main.tileObsidianKill[tile4.type])
                    {
                        KillTile(x, y + 1);
                        SendDataToPlayer(17, -1, -1, null, 0, x, y + 1);

                    }
                    if (tile4.active())
                    {
                        return;
                    }
                    if (tile5.liquid < 32)
                    {
                        tile5.liquid = 0;
                        tile5.liquidType(0);
                        SendTileSquare(-1, x - 1, y, 3);

                        return;
                    }
                    if (tile4.lava())
                    {
                        flag = true;
                    }
                    tile5.liquid = 0;
                    tile5.liquidType(0);
                    tile4.liquid = 0;
                    tile4.liquidType(0);
                    PlaceTile(x, y + 1, 229, mute: true, forced: true);
                    SquareTileFrame(x, y + 1);
                    SendTileSquare(-1, x - 1, y, 3, flag ? TileChangeType.HoneyLava : TileChangeType.HoneyWater);

                }
            }
            public void StartPanic()
            {
                if (!panicMode)
                {
                    waterLine = MaxTilesY;
                    numLiquid = 0;
                    numLiquidBuffer = 0;
                    panicCounter = 0;
                    panicMode = true;
                    panicY = MaxTilesY - 3;
                    if (Main.dedServ)
                    {
                        System.Console.WriteLine(Language.GetTextValue("Misc.ForceWaterSettling"));
                    }
                }
            }
            #endregion
        }
        public static bool GetMapFromUUID(Guid uuid, out MapData data)
        {
            foreach (var map in GameData.ActiveMap)
            {
                if (map.Key == uuid)
                {
                    data = map.Value;
                    return true;
                }
            }
            data = new MapData();
            return false;
        }
        public static bool IsTerritoryActive(Guid uuid)
        {
            return GameData.ActiveMap.ContainsKey(uuid);
        }
        public static Guid CreateMultiPlayerMap(string name, int x = -1, int y = -1)
        {

            if (GameData.Map.ContainsKey(name))
            {
                var data = GameData.GetMapData(name);
                if (data == null) return Guid.Empty;
                return CreateMultiPlayerMap(data, x, y).Result;
            }
            else
            {
                return Guid.Empty;
            }

        }
        public async static Task<Guid> CreateMultiPlayerMap(MapData data, int x = -1, int y = -1)
        {
            return await Task.Run(() =>
            {
                data.StartX = x == -1 ? (Main.maxTilesX / 2) - (data.Width / 2) : x;
                data.StartY = y == -1 ? (Main.maxTilesX / 2) - (data.Width / 2) : y;
                var uuid = Guid.NewGuid();
                data.UUID = uuid;
                data.Player.Clear();
                GameData.ActiveMap.Add(uuid, data);
                return uuid;
            });
        }
        public static void AddPlayerToWorld(EPlayer eplr, Guid uuid)
        {
            if (GetMapFromUUID(uuid, out var data) && !data.Player.Contains(eplr.ID))
            {
                eplr.JoinMap(uuid);
            }
        }
        public static void CheckMapActive()
        {
            Dictionary<Guid, int> check = new Dictionary<Guid, int>();
            bool restartnow = false;
            while (true)
            {
                restartnow = false;
                foreach (var map in GameData.ActiveMap)
                {
                    if (!check.ContainsKey(map.Key)) check.Add(map.Key, 0);
                    if (!map.Value.GetAllPlayers().Any()) check[map.Key]++;
                    if (check[map.Key] > 30)
                    {
                        map.Value.Dispose();
                        check.Remove(map.Key);
                        GameData.ActiveMap[map.Key] = null;
                        GameData.ActiveMap.Remove(map.Key);
                        restartnow = true;
                        Utils.Broadcast($"世界 {map.Key} 已销毁.");
                        Log.Info($"世界 {map.Key} 已销毁.");
                        break;
                    }
                    check.ForEach(c => { if (!MapManager.GetMapFromUUID(c.Key, out var az)) check.Remove(c.Key); });
                }
                if (restartnow) continue;
                Thread.Sleep(1000);
            }
        }
        public static void SendProjectile(EPlayer eplr)
        {
            if (eplr.IsInAnotherWorld)
            {
                Main.projectile.Where(p => p.active && eplr.Map.Player.Contains(p.owner)).ForEach(proj => eplr.SendData(PacketTypes.ProjectileNew, "", proj.identity));
            }
            else
            {
                Main.projectile.Where(p => p.active && eplr.Map.Player.Contains(p.owner)).ForEach(proj => eplr.SendData(PacketTypes.ProjectileNew, "", proj.identity));
            }
        }
        public static void SendMap(EPlayer eplr, MapData data, int x, int y)
        {
            SendMapDerict(eplr, data.Width, data.Height, data, x, y);
            //ChangeWorldInfo(eplr);
        }
        public static void SendMapDerict(EPlayer eplr, int width, int height, MapData data, int StartX = 0, int StartY = 0)
        {
            Send(StartX, StartY, (short)width, (short)height, data, eplr);
            var num = Math.Max(width, height);
            SendSquare(num, StartX, StartY, data, eplr, 0);
            short sectionX = (short)Netplay.GetSectionX(StartX);
            short sectionX2 = (short)Netplay.GetSectionX(StartX + width - 1);
            short sectionY = (short)Netplay.GetSectionY(StartY);
            short sectionY2 = (short)Netplay.GetSectionY(StartY + height - 1);
            eplr.SendRawData(new RawDataWriter().SetType(PacketTypes.TileFrameSection).PackInt16(sectionX).PackInt16(sectionY).PackInt16(sectionX2).PackInt16(sectionY2).GetByteData());
        }
        public static void UpdateMap()
        {
            try
            {
                GameData.ActiveMap.Values.ForEach(map =>
                {
                    map.UpdateLiquid();
                });
            }
            catch { }
        }
        #region 一堆地图操作函数
        public static void ChangeWorldInfo(EPlayer eplr, bool toorigin = false)
        {
            byte[] array;
            using (MemoryStream memoryStream = new MemoryStream())
            {
                using (BinaryWriter binaryWriter = new BinaryWriter(memoryStream))
                {
                    binaryWriter.BaseStream.Position = 2L;
                    binaryWriter.Write((byte)7);
                    WorldInfo(binaryWriter);
                    long position = binaryWriter.BaseStream.Position;
                    binaryWriter.BaseStream.Position = 0L;
                    binaryWriter.Write((short)position);
                    binaryWriter.BaseStream.Position = position;
                    eplr.SendRawData(memoryStream.ToArray());
                }
            }            
        }
        static void WorldInfo(BinaryWriter binaryWriter, bool toorigin = false)
        {
            binaryWriter.Write((int)Main.time);
            BitsByte bb6 = (byte)0;
            bb6[0] = Main.dayTime;
            bb6[1] = Main.bloodMoon;
            bb6[2] = Main.eclipse;
            binaryWriter.Write(bb6);
            binaryWriter.Write((byte)Main.moonPhase);
            binaryWriter.Write((short)Main.maxTilesX);
            binaryWriter.Write((short)Main.maxTilesY);
            binaryWriter.Write((short)Main.spawnTileX);
            binaryWriter.Write((short)Main.spawnTileY);
            binaryWriter.Write(toorigin ? (short)Main.worldSurface : (short)Main.maxTilesY); //地表开始位置
            binaryWriter.Write(toorigin ? (short)Main.worldSurface : (short)Main.maxTilesY);
            //if (!toorigin) return;
            binaryWriter.Write(Main.worldID);
            binaryWriter.Write(Main.worldName);
            binaryWriter.Write((byte)Main.GameMode);
            binaryWriter.Write(Main.ActiveWorldFileData.UniqueId.ToByteArray());
            binaryWriter.Write(Main.ActiveWorldFileData.WorldGeneratorVersion);
            binaryWriter.Write((byte)Main.moonType);
            binaryWriter.Write((byte)WorldGen.treeBG1);
            binaryWriter.Write((byte)WorldGen.treeBG2);
            binaryWriter.Write((byte)WorldGen.treeBG3);
            binaryWriter.Write((byte)WorldGen.treeBG4);
            binaryWriter.Write((byte)WorldGen.corruptBG);
            binaryWriter.Write((byte)WorldGen.jungleBG);
            binaryWriter.Write((byte)WorldGen.snowBG);
            binaryWriter.Write((byte)WorldGen.hallowBG);
            binaryWriter.Write((byte)WorldGen.crimsonBG);
            binaryWriter.Write((byte)WorldGen.desertBG);
            binaryWriter.Write((byte)WorldGen.oceanBG);
            binaryWriter.Write((byte)WorldGen.mushroomBG);
            binaryWriter.Write((byte)WorldGen.underworldBG);
            binaryWriter.Write((byte)Main.iceBackStyle);
            binaryWriter.Write((byte)Main.jungleBackStyle);
            binaryWriter.Write((byte)Main.hellBackStyle);
            binaryWriter.Write(Main.windSpeedTarget);
            binaryWriter.Write((byte)Main.numClouds);
            for (int num7 = 0; num7 < 3; num7++)
            {
                binaryWriter.Write(Main.treeX[num7]);
            }
            for (int num8 = 0; num8 < 4; num8++)
            {
                binaryWriter.Write((byte)Main.treeStyle[num8]);
            }
            for (int num9 = 0; num9 < 3; num9++)
            {
                binaryWriter.Write(Main.caveBackX[num9]);
            }
            for (int num10 = 0; num10 < 4; num10++)
            {
                binaryWriter.Write((byte)Main.caveBackStyle[num10]);
            }
            WorldGen.TreeTops.SyncSend(binaryWriter);
            if (!Main.raining)
            {
                Main.maxRaining = 0f;
            }
            binaryWriter.Write(Main.maxRaining);
            BitsByte bb7 = (byte)0;
            bb7[0] = WorldGen.shadowOrbSmashed;
            bb7[1] = NPC.downedBoss1;
            bb7[2] = NPC.downedBoss2;
            bb7[3] = NPC.downedBoss3;
            bb7[4] = Main.hardMode;
            bb7[5] = NPC.downedClown;
            bb7[6] = Main.ServerSideCharacter;
            bb7[7] = NPC.downedPlantBoss;
            binaryWriter.Write(bb7);
            BitsByte bb8 = (byte)0;
            bb8[0] = NPC.downedMechBoss1;
            bb8[1] = NPC.downedMechBoss2;
            bb8[2] = NPC.downedMechBoss3;
            bb8[3] = NPC.downedMechBossAny;
            bb8[4] = (Main.cloudBGActive >= 1f);
            bb8[5] = WorldGen.crimson;
            bb8[6] = Main.pumpkinMoon;
            bb8[7] = Main.snowMoon;
            binaryWriter.Write(bb8);
            BitsByte bb9 = (byte)0;
            bb9[1] = Main.fastForwardTime;
            bb9[2] = Main.slimeRain;
            bb9[3] = NPC.downedSlimeKing;
            bb9[4] = NPC.downedQueenBee;
            bb9[5] = NPC.downedFishron;
            bb9[6] = NPC.downedMartians;
            bb9[7] = NPC.downedAncientCultist;
            binaryWriter.Write(bb9);
            BitsByte bb10 = (byte)0;
            bb10[0] = NPC.downedMoonlord;
            bb10[1] = NPC.downedHalloweenKing;
            bb10[2] = NPC.downedHalloweenTree;
            bb10[3] = NPC.downedChristmasIceQueen;
            bb10[4] = NPC.downedChristmasSantank;
            bb10[5] = NPC.downedChristmasTree;
            bb10[6] = NPC.downedGolemBoss;
            bb10[7] = BirthdayParty.PartyIsUp;
            binaryWriter.Write(bb10);
            BitsByte bb11 = (byte)0;
            bb11[0] = NPC.downedPirates;
            bb11[1] = NPC.downedFrost;
            bb11[2] = NPC.downedGoblins;
            bb11[3] = Sandstorm.Happening;
            bb11[4] = DD2Event.Ongoing;
            bb11[5] = DD2Event.DownedInvasionT1;
            bb11[6] = DD2Event.DownedInvasionT2;
            bb11[7] = DD2Event.DownedInvasionT3;
            binaryWriter.Write(bb11);
            BitsByte bb12 = (byte)0;
            bb12[0] = NPC.combatBookWasUsed;
            bb12[1] = LanternNight.LanternsUp;
            bb12[2] = NPC.downedTowerSolar;
            bb12[3] = NPC.downedTowerVortex;
            bb12[4] = NPC.downedTowerNebula;
            bb12[5] = NPC.downedTowerStardust;
            bb12[6] = Main.forceHalloweenForToday;
            bb12[7] = Main.forceXMasForToday;
            binaryWriter.Write(bb12);
            BitsByte bb13 = (byte)0;
            bb13[0] = NPC.boughtCat;
            bb13[1] = NPC.boughtDog;
            bb13[2] = NPC.boughtBunny;
            bb13[3] = NPC.freeCake;
            bb13[4] = Main.drunkWorld;
            bb13[5] = NPC.downedEmpressOfLight;
            bb13[6] = NPC.downedQueenSlime;
            bb13[7] = Main.getGoodWorld;
            binaryWriter.Write(bb13);
            binaryWriter.Write((short)WorldGen.SavedOreTiers.Copper);
            binaryWriter.Write((short)WorldGen.SavedOreTiers.Iron);
            binaryWriter.Write((short)WorldGen.SavedOreTiers.Silver);
            binaryWriter.Write((short)WorldGen.SavedOreTiers.Gold);
            binaryWriter.Write((short)WorldGen.SavedOreTiers.Cobalt);
            binaryWriter.Write((short)WorldGen.SavedOreTiers.Mythril);
            binaryWriter.Write((short)WorldGen.SavedOreTiers.Adamantite);
            binaryWriter.Write((sbyte)Main.invasionType);
            if (SocialAPI.Network != null)
            {
                binaryWriter.Write(SocialAPI.Network.GetLobbyId());
            }
            else
            {
                binaryWriter.Write(0uL);
            }
            binaryWriter.Write(Sandstorm.IntendedSeverity);
        }

        static void Send(int X, int Y, short Width, short Height, MapData data, EPlayer eplr)
        {
            byte[] array;
            using (MemoryStream memoryStream = new MemoryStream())
            {
                using (BinaryWriter binaryWriter = new BinaryWriter(memoryStream))
                {
                    binaryWriter.BaseStream.Position = 2L;
                    binaryWriter.Write((byte)10);
                    CompressTileBlock(X, Y, Width, Height, binaryWriter, data);
                    long position = binaryWriter.BaseStream.Position;
                    binaryWriter.BaseStream.Position = 0L;
                    binaryWriter.Write((short)position);
                    binaryWriter.BaseStream.Position = position;
                    array = memoryStream.ToArray();
                }
            }
            eplr.SendRawData(array);
        }

        static int CompressTileBlock(int xStart, int yStart, short width, short height, BinaryWriter writer, MapData data)
        {

            using (MemoryStream memoryStream = new MemoryStream())
            {
                using (BinaryWriter binaryWriter = new BinaryWriter(memoryStream))
                {
                    binaryWriter.Write(xStart);
                    binaryWriter.Write(yStart);
                    binaryWriter.Write(width);
                    binaryWriter.Write(height);
                    CompressTileBlock_Inner(binaryWriter, xStart, yStart, width, height, data);
                    memoryStream.Position = 0L;
                    MemoryStream memoryStream2 = new MemoryStream();
                    using (DeflateStream deflateStream = new DeflateStream(memoryStream2, CompressionMode.Compress, leaveOpen: true))
                    {
                        memoryStream.CopyTo(deflateStream);
                    }
                    if (memoryStream.Length <= memoryStream2.Length)
                    {
                        memoryStream.Position = 0L;
                        writer.Write((byte)0);
                        writer.Write(memoryStream.GetBuffer());
                    }
                    else
                    {
                        memoryStream2.Position = 0L;
                        writer.Write((byte)1);
                        writer.Write(memoryStream2.GetBuffer());
                    }
                }
            }
            return 0;
        }

        public static void CompressTileBlock_Inner(BinaryWriter writer, int xStart, int yStart, int width, int height, MapData data)
        {
            List<short> array = new List<short>();
            List<short> array2 = new List<short>();
            List<int> array3 = new List<int>();
            short num = 0;
            short num2 = 0;
            short num3 = 0;
            short num4 = 0;
            int num5 = 0;
            int num6 = 0;
            byte b = 0;
            byte[] array4 = new byte[15];
            ITile tile = null;
            for (int i = yStart; i < yStart + height; i++)
            {
                for (int j = xStart; j < xStart + width; j++)
                {
                    ITile tile2 = data[j, i];
                    if (tile2.isTheSameAs(tile))
                    {
                        num4 = (short)(num4 + 1);
                        continue;
                    }
                    if (tile != null)
                    {
                        if (num4 > 0)
                        {
                            array4[num5] = (byte)(num4 & 0xFF);
                            num5++;
                            if (num4 > 255)
                            {
                                b = (byte)(b | 0x80);
                                array4[num5] = (byte)((num4 & 0xFF00) >> 8);
                                num5++;
                            }
                            else
                            {
                                b = (byte)(b | 0x40);
                            }
                        }
                        array4[num6] = b;
                        writer.Write(array4, num6, num5 - num6);
                        num4 = 0;
                    }
                    num5 = 3;
                    byte b2;
                    byte b3;
                    b = (b3 = (b2 = 0));
                    if (tile2.active())
                    {
                        b = (byte)(b | 2);
                        array4[num5] = (byte)tile2.type;
                        num5++;
                        if (tile2.type > 255)
                        {
                            array4[num5] = (byte)(tile2.type >> 8);
                            num5++;
                            b = (byte)(b | 0x20);
                        }
                        if (TileID.Sets.BasicChest[tile2.type] && tile2.frameX % 36 == 0 && tile2.frameY % 36 == 0)
                        {
                            short num7 = (short)data.FindChest(j - xStart, i - yStart);
                            if (num7 != -1)
                            {
                                array.Add(num7);
                                num = (short)(num + 1);
                            }
                        }
                        if (tile2.type == 88 && tile2.frameX % 54 == 0 && tile2.frameY % 36 == 0)
                        {
                            short num8 = (short)data.FindChest(j - xStart, i - yStart);
                            if (num8 != -1)
                            {
                                array.Add(num8);
                                num = (short)(num + 1);
                            }
                        }
                        if ((tile2.type == 85 | tile2.type == 55 || tile2.type == 425 || tile2.type == 573) && tile2.frameX % 36 == 0 && tile2.frameY % 36 == 0)
                        {
                            short num9 = (short)data.ReadSign(j - xStart, i - yStart, true);
                            if (num9 != -1)
                            {
                                array2.Add(num9);
                                num2++;
                            }
                        }
                        if (tile2.type == 378 && tile2.frameX % 36 == 0 && tile2.frameY == 0)
                        {
                            int num13 = TETrainingDummy.Find(j, i);
                            if (num13 != -1)
                            {
                                array3.Add(num13);
                                num3++;
                            }
                        }
                        if (tile2.type == 395 && tile2.frameX % 36 == 0 && tile2.frameY == 0)
                        {
                            int num14 = TEItemFrame.Find(j, i);
                            if (num14 != -1)
                            {
                                array3.Add(num14);
                                num3++;
                            }
                        }
                        if (tile2.type == 520 && tile2.frameX % 18 == 0 && tile2.frameY == 0)
                        {
                            int num15 = TEFoodPlatter.Find(j, i);
                            if (num15 != -1)
                            {
                                array3.Add(num15);
                                num3++;
                            }
                        }
                        if (tile2.type == 471 && tile2.frameX % 54 == 0 && tile2.frameY == 0)
                        {
                            int num16 = TEWeaponsRack.Find(j, i);
                            if (num16 != -1)
                            {
                                array3.Add(num16);
                                num3++;
                            }
                        }
                        if (tile2.type == 470 && tile2.frameX % 36 == 0 && tile2.frameY == 0)
                        {
                            int num17 = TEDisplayDoll.Find(j, i);
                            if (num17 != -1)
                            {
                                array3.Add(num17);
                                num3++;
                            }
                        }
                        if (tile2.type == 475 && tile2.frameX % 54 == 0 && tile2.frameY == 0)
                        {
                            int num18 = TEHatRack.Find(j, i);
                            if (num18 != -1)
                            {
                                array3.Add(num18);
                                num3++;
                            }
                        }
                        if (tile2.type == 597 && tile2.frameX % 54 == 0 && tile2.frameY % 72 == 0)
                        {
                            int num19 = TETeleportationPylon.Find(j, i);
                            if (num19 != -1)
                            {
                                array3.Add(num19);
                                num3++;
                            }
                        }
                        if (Main.tileFrameImportant[tile2.type])
                        {
                            array4[num5] = (byte)(tile2.frameX & 0xFF);
                            num5++;
                            array4[num5] = (byte)((tile2.frameX & 0xFF00) >> 8);
                            num5++;
                            array4[num5] = (byte)(tile2.frameY & 0xFF);
                            num5++;
                            array4[num5] = (byte)((tile2.frameY & 0xFF00) >> 8);
                            num5++;
                        }
                        if (tile2.color() != 0)
                        {
                            b2 = (byte)(b2 | 8);
                            array4[num5] = tile2.color();
                            num5++;
                        }
                    }
                    if (tile2.wall != 0)
                    {
                        b = (byte)(b | 4);
                        array4[num5] = (byte)tile2.wall;
                        num5++;
                        if (tile2.wallColor() != 0)
                        {
                            b2 = (byte)(b2 | 0x10);
                            array4[num5] = tile2.wallColor();
                            num5++;
                        }
                    }
                    if (tile2.liquid != 0)
                    {
                        b = (tile2.lava() ? ((byte)(b | 0x10)) : ((!tile2.honey()) ? ((byte)(b | 8)) : ((byte)(b | 0x18))));
                        array4[num5] = tile2.liquid;
                        num5++;
                    }
                    if (tile2.wire())
                    {
                        b3 = (byte)(b3 | 2);
                    }
                    if (tile2.wire2())
                    {
                        b3 = (byte)(b3 | 4);
                    }
                    if (tile2.wire3())
                    {
                        b3 = (byte)(b3 | 8);
                    }
                    int num20 = tile2.halfBrick() ? 16 : ((tile2.slope() != 0) ? (tile2.slope() + 1 << 4) : 0);
                    b3 = (byte)(b3 | (byte)num20);
                    if (tile2.actuator())
                    {
                        b2 = (byte)(b2 | 2);
                    }
                    if (tile2.inActive())
                    {
                        b2 = (byte)(b2 | 4);
                    }
                    if (tile2.wire4())
                    {
                        b2 = (byte)(b2 | 0x20);
                    }
                    if (tile2.wall > 255)
                    {
                        array4[num5] = (byte)(tile2.wall >> 8);
                        num5++;
                        b2 = (byte)(b2 | 0x40);
                    }
                    num6 = 2;
                    if (b2 != 0)
                    {
                        b3 = (byte)(b3 | 1);
                        array4[num6] = b2;
                        num6--;
                    }
                    if (b3 != 0)
                    {
                        b = (byte)(b | 1);
                        array4[num6] = b3;
                        num6--;
                    }
                    tile = tile2;
                }
            }
            if (num4 > 0)
            {
                array4[num5] = (byte)(num4 & 0xFF);
                num5++;
                if (num4 > 255)
                {
                    b = (byte)(b | 0x80);
                    array4[num5] = (byte)((num4 & 0xFF00) >> 8);
                    num5++;
                }
                else
                {
                    b = (byte)(b | 0x40);
                }
            }
            array4[num6] = b;
            writer.Write(array4, num6, num5 - num6);
            writer.Write(num);
            for (int k = 0; k < num; k++)
            {
                Chest chest = data.Chest[array[k]];
                writer.Write(array[k]);
                writer.Write((short)chest.x);
                writer.Write((short)chest.y);
                writer.Write(chest.name);
            }
            writer.Write(num2);
            for (int l = 0; l < num2; l++)
            {
                Sign sign = data.Sign[array2[l]];
                writer.Write(array2[l]);
                writer.Write((short)sign.x);
                writer.Write((short)sign.y);
                writer.Write(sign.text);
            }
            writer.Write(num3);
            for (int m = 0; m < num3; m++)
            {
                TileEntity.Write(writer, TileEntity.ByID[array3[m]]);
            }
        }

        public static void SendSquare(int Size, int X, int Y, MapData data, EPlayer eplr, int Number5 = 0)
        {
            using (MemoryStream memoryStream = new MemoryStream())
            {
                using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
                binaryWriter.BaseStream.Position = 2L;
                binaryWriter.Write((byte)20);
                WriteTiles(binaryWriter, Size, X, Y, data, Number5);
                long position = binaryWriter.BaseStream.Position;
                binaryWriter.BaseStream.Position = 0L;
                binaryWriter.Write((short)position);
                binaryWriter.BaseStream.Position = position;
                eplr.SendRawData(memoryStream.ToArray());
            }

        }

        private static void WriteTiles(BinaryWriter binaryWriter, int Size, int X, int Y, MapData data, int number5 = 0)
        {
            int num4 = Size;
            int num5 = (int)X;
            int num6 = (int)Y;
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (num5 < num4)
            {
                num5 = num4;
            }
            if (num5 >= Main.maxTilesX + num4)
            {
                num5 = Main.maxTilesX - num4 - 1;
            }
            if (num6 < num4)
            {
                num6 = num4;
            }
            if (num6 >= Main.maxTilesY + num4)
            {
                num6 = Main.maxTilesY - num4 - 1;
            }
            if (number5 == 0)
            {
                binaryWriter.Write((ushort)(num4 & 32767));
            }
            else
            {
                binaryWriter.Write((ushort)((num4 & 32767) | 32768));
                binaryWriter.Write((byte)number5);
            }
            binaryWriter.Write((short)num5);
            binaryWriter.Write((short)num6);
            for (int num7 = num5; num7 < num5 + num4; num7++)
            {
                for (int num8 = num6; num8 < num6 + num4; num8++)
                {
                    BitsByte bb17 = 0;
                    BitsByte bb18 = 0;
                    byte b = 0;
                    byte b2 = 0;
                    ITile tile = data[num7, num8];
                    bb17[0] = tile.active();
                    bb17[2] = (tile.wall > 0);
                    bb17[3] = (tile.liquid > 0 && Main.netMode == 2);
                    bb17[4] = tile.wire();
                    bb17[5] = tile.halfBrick();
                    bb17[6] = tile.actuator();
                    bb17[7] = tile.inActive();
                    bb18[0] = tile.wire2();
                    bb18[1] = tile.wire3();
                    if (tile.active() && tile.color() > 0)
                    {
                        bb18[2] = true;
                        b = tile.color();
                    }
                    if (tile.wall > 0 && tile.wallColor() > 0)
                    {
                        bb18[3] = true;
                        b2 = tile.wallColor();
                    }
                    bb18 += (byte)(tile.slope() << 4);
                    bb18[7] = tile.wire4();
                    binaryWriter.Write(bb17);
                    binaryWriter.Write(bb18);
                    if (b > 0)
                    {
                        binaryWriter.Write(b);
                    }
                    if (b2 > 0)
                    {
                        binaryWriter.Write(b2);
                    }
                    if (tile.active())
                    {
                        binaryWriter.Write(tile.type);
                        if (Main.tileFrameImportant[(int)tile.type])
                        {
                            binaryWriter.Write(tile.frameX);
                            binaryWriter.Write(tile.frameY);
                        }
                    }
                    if (tile.wall > 0)
                    {
                        binaryWriter.Write(tile.wall);
                    }
                    if (tile.liquid > 0)
                    {
                        binaryWriter.Write(tile.liquid);
                        binaryWriter.Write(tile.liquidType());
                    }
                }
            }
        }
        #endregion
    }
    public class MapTools
    {
        [MessagePackObject]
        [Serializable]
        public class Chest
        {
            [Key(0)]
            public const float chestStackRange = 250f;
            [Key(1)]
            public const int maxChestTypes = 52;
            [Key(2)]
            public const int maxItems = 40;
            [Key(3)]
            public const int MaxNameLength = 20;
            [Key(4)]
            public EItem[] item;
            [Key(5)]
            public int x;
            [Key(6)]
            public int y;
            [Key(7)]
            public bool bankChest;
            [Key(8)]
            public string name;
            [Key(9)]
            public int frameCounter;
            [Key(10)]
            public int frame;
            [Key(11)]
            public HashSet<int> _chestInUse = new HashSet<int>();

            public Chest(bool bank)
            {
                item = new EItem[40];
                bankChest = bank;
                name = string.Empty;
            }
            [SerializationConstructor]
            public Chest()
            {
                item = new EItem[40];
                bankChest = false;
                name = string.Empty;
            }

            public override string ToString()
            {
                int num = 0;
                for (int i = 0; i < item.Length; i++)
                {
                    if (((Item)item[i]).stack > 0)
                    {
                        num++;
                    }
                }
                return $"{{X: {x}, Y: {y}, Count: {num}}}";
            }
            public static implicit operator Chest(Terraria.Chest v)
            {
                using (MemoryStream stream = new MemoryStream())
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    formatter.Serialize(stream, v);
                    stream.Position = 0;
                    return formatter.Deserialize(stream) as Chest;
                }
            }

            public static implicit operator Terraria.Chest(Chest v)
            {
                using (MemoryStream stream = new MemoryStream())
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    formatter.Serialize(stream, v);
                    stream.Position = 0;
                    return formatter.Deserialize(stream) as Terraria.Chest;
                }
            }

        }
        [MessagePackObject]
        public class Sign
        {
            [Key(0)]
            public int x;
            [Key(1)]
            public int y;
            [Key(2)]
            public string text;
            [SerializationConstructor]
            public Sign()
            {

            }
            public override string ToString()
            {
                return "x" + x + "\ty" + y + "\t" + text;
            }
        }
        [MessagePackObject]
        public class Liquid
        {
            [Key(0)]
            public int x;
            [Key(1)]
            public int y;
            [Key(2)]
            public int kill;
            [Key(3)]
            public int delay;
            [Key(4)]
            public static HashSet<int> _netChangeSet = new HashSet<int>();
            [Key(5)]
            public static HashSet<int> _swapNetChangeSet = new HashSet<int>();
            public void Update(MapManager.MapData map)
            {
                Main.tileSolid[379] = true;
                ITile tile = map[x - 1, y];
                ITile tile2 = map[x + 1, y];
                ITile tile3 = map[x, y - 1];
                ITile tile4 = map[x, y + 1];
                ITile tile5 = map[x, y];
                if (tile5.nactive() && Main.tileSolid[tile5.type] && !Main.tileSolidTop[tile5.type])
                {
                    _ = tile5.type;
                    _ = 10;
                    kill = 999;
                    return;
                }
                byte liquid = tile5.liquid;
                float num = 0f;
                if (y > Main.UnderworldLayer && tile5.liquidType() == 0 && tile5.liquid > 0)
                {
                    byte b = 2;
                    if (tile5.liquid < b)
                    {
                        b = tile5.liquid;
                    }
                    tile5.liquid -= b;
                }
                if (tile5.liquid == 0)
                {
                    kill = 999;
                    return;
                }
                if (tile5.lava())
                {
                    map.LavaCheck(x, y);
                    if (!map.quickFall)
                    {
                        if (delay < 5)
                        {
                            delay++;
                            return;
                        }
                        delay = 0;
                    }
                }
                else
                {
                    if (tile.lava())
                    {
                        map.AddWater(x - 1, y);
                    }
                    if (tile2.lava())
                    {
                        map.AddWater(x + 1, y);
                    }
                    if (tile3.lava())
                    {
                        map.AddWater(x, y - 1);
                    }
                    if (tile4.lava())
                    {
                        map.AddWater(x, y + 1);
                    }
                    if (tile5.honey())
                    {
                        map.HoneyCheck(x, y);
                        if (!map.quickFall)
                        {
                            if (delay < 10)
                            {
                                delay++;
                                return;
                            }
                            delay = 0;
                        }
                    }
                    else
                    {
                        if (tile.honey())
                        {
                            map.AddWater(x - 1, y);
                        }
                        if (tile2.honey())
                        {
                            map.AddWater(x + 1, y);
                        }
                        if (tile3.honey())
                        {
                            map.AddWater(x, y - 1);
                        }
                        if (tile4.honey())
                        {
                            map.AddWater(x, y + 1);
                        }
                    }
                }
                if ((!tile4.nactive() || !Main.tileSolid[tile4.type] || Main.tileSolidTop[tile4.type]) && (tile4.liquid <= 0 || tile4.liquidType() == tile5.liquidType()) && tile4.liquid < byte.MaxValue)
                {
                    bool flag = false;
                    num = 255 - tile4.liquid;
                    if (num > (float)(int)tile5.liquid)
                    {
                        num = (int)tile5.liquid;
                    }
                    if (num == 1f && tile5.liquid == byte.MaxValue)
                    {
                        flag = true;
                    }
                    if (!flag)
                    {
                        tile5.liquid -= (byte)num;
                    }
                    tile4.liquid += (byte)num;
                    tile4.liquidType(tile5.liquidType());
                    map.AddWater(x, y + 1);
                    tile4.skipLiquid(skipLiquid: true);
                    tile5.skipLiquid(skipLiquid: true);
                    if (map.quickSettle && tile5.liquid > 250)
                    {
                        tile5.liquid = byte.MaxValue;
                    }
                    else if (!flag)
                    {
                        map.AddWater(x - 1, y);
                        map.AddWater(x + 1, y);
                    }
                }
                if (tile5.liquid > 0)
                {
                    bool flag2 = true;
                    bool flag3 = true;
                    bool flag4 = true;
                    bool flag5 = true;
                    if (tile.nactive() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
                    {
                        flag2 = false;
                    }
                    else if (tile.liquid > 0 && tile.liquidType() != tile5.liquidType())
                    {
                        flag2 = false;
                    }
                    else if (map[x - 2, y].nactive() && Main.tileSolid[map[x - 2, y].type] && !Main.tileSolidTop[map[x - 2, y].type])
                    {
                        flag4 = false;
                    }
                    else if (map[x - 2, y].liquid == 0)
                    {
                        flag4 = false;
                    }
                    else if (map[x - 2, y].liquid > 0 && map[x - 2, y].liquidType() != tile5.liquidType())
                    {
                        flag4 = false;
                    }
                    if (tile2.nactive() && Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type])
                    {
                        flag3 = false;
                    }
                    else if (tile2.liquid > 0 && tile2.liquidType() != tile5.liquidType())
                    {
                        flag3 = false;
                    }
                    else if (map[x + 2, y].nactive() && Main.tileSolid[map[x + 2, y].type] && !Main.tileSolidTop[map[x + 2, y].type])
                    {
                        flag5 = false;
                    }
                    else if (map[x + 2, y].liquid == 0)
                    {
                        flag5 = false;
                    }
                    else if (map[x + 2, y].liquid > 0 && map[x + 2, y].liquidType() != tile5.liquidType())
                    {
                        flag5 = false;
                    }
                    int num2 = 0;
                    if (tile5.liquid < 3)
                    {
                        num2 = -1;
                    }
                    if (tile5.liquid > 250)
                    {
                        flag4 = false;
                        flag5 = false;
                    }
                    if (flag2 && flag3)
                    {
                        if (flag4 && flag5)
                        {
                            bool flag6 = true;
                            bool flag7 = true;
                            if (map[x - 3, y].nactive() && Main.tileSolid[map[x - 3, y].type] && !Main.tileSolidTop[map[x - 3, y].type])
                            {
                                flag6 = false;
                            }
                            else if (map[x - 3, y].liquid == 0)
                            {
                                flag6 = false;
                            }
                            else if (map[x - 3, y].liquidType() != tile5.liquidType())
                            {
                                flag6 = false;
                            }
                            if (map[x + 3, y].nactive() && Main.tileSolid[map[x + 3, y].type] && !Main.tileSolidTop[map[x + 3, y].type])
                            {
                                flag7 = false;
                            }
                            else if (map[x + 3, y].liquid == 0)
                            {
                                flag7 = false;
                            }
                            else if (map[x + 3, y].liquidType() != tile5.liquidType())
                            {
                                flag7 = false;
                            }
                            if (flag6 && flag7)
                            {
                                num = tile.liquid + tile2.liquid + map[x - 2, y].liquid + map[x + 2, y].liquid + map[x - 3, y].liquid + map[x + 3, y].liquid + tile5.liquid + num2;
                                num = (float)Math.Round(num / 7f);
                                int num3 = 0;
                                tile.liquidType(tile5.liquidType());
                                if (tile.liquid != (byte)num)
                                {
                                    tile.liquid = (byte)num;
                                    map.AddWater(x - 1, y);
                                }
                                else
                                {
                                    num3++;
                                }
                                tile2.liquidType(tile5.liquidType());
                                if (tile2.liquid != (byte)num)
                                {
                                    tile2.liquid = (byte)num;
                                    map.AddWater(x + 1, y);
                                }
                                else
                                {
                                    num3++;
                                }
                                map[x - 2, y].liquidType(tile5.liquidType());
                                if (map[x - 2, y].liquid != (byte)num)
                                {
                                    map[x - 2, y].liquid = (byte)num;
                                    map.AddWater(x - 2, y);
                                }
                                else
                                {
                                    num3++;
                                }
                                map[x + 2, y].liquidType(tile5.liquidType());
                                if (map[x + 2, y].liquid != (byte)num)
                                {
                                    map[x + 2, y].liquid = (byte)num;
                                    map.AddWater(x + 2, y);
                                }
                                else
                                {
                                    num3++;
                                }
                                map[x - 3, y].liquidType(tile5.liquidType());
                                if (map[x - 3, y].liquid != (byte)num)
                                {
                                    map[x - 3, y].liquid = (byte)num;
                                    map.AddWater(x - 3, y);
                                }
                                else
                                {
                                    num3++;
                                }
                                map[x + 3, y].liquidType(tile5.liquidType());
                                if (map[x + 3, y].liquid != (byte)num)
                                {
                                    map[x + 3, y].liquid = (byte)num;
                                    map.AddWater(x + 3, y);
                                }
                                else
                                {
                                    num3++;
                                }
                                if (tile.liquid != (byte)num || tile5.liquid != (byte)num)
                                {
                                    map.AddWater(x - 1, y);
                                }
                                if (tile2.liquid != (byte)num || tile5.liquid != (byte)num)
                                {
                                    map.AddWater(x + 1, y);
                                }
                                if (map[x - 2, y].liquid != (byte)num || tile5.liquid != (byte)num)
                                {
                                    map.AddWater(x - 2, y);
                                }
                                if (map[x + 2, y].liquid != (byte)num || tile5.liquid != (byte)num)
                                {
                                    map.AddWater(x + 2, y);
                                }
                                if (map[x - 3, y].liquid != (byte)num || tile5.liquid != (byte)num)
                                {
                                    map.AddWater(x - 3, y);
                                }
                                if (map[x + 3, y].liquid != (byte)num || tile5.liquid != (byte)num)
                                {
                                    map.AddWater(x + 3, y);
                                }
                                if (num3 != 6 || tile3.liquid <= 0)
                                {
                                    tile5.liquid = (byte)num;
                                }
                            }
                            else
                            {
                                int num4 = 0;
                                num = tile.liquid + tile2.liquid + map[x - 2, y].liquid + map[x + 2, y].liquid + tile5.liquid + num2;
                                num = (float)Math.Round(num / 5f);
                                tile.liquidType(tile5.liquidType());
                                if (tile.liquid != (byte)num)
                                {
                                    tile.liquid = (byte)num;
                                    map.AddWater(x - 1, y);
                                }
                                else
                                {
                                    num4++;
                                }
                                tile2.liquidType(tile5.liquidType());
                                if (tile2.liquid != (byte)num)
                                {
                                    tile2.liquid = (byte)num;
                                    map.AddWater(x + 1, y);
                                }
                                else
                                {
                                    num4++;
                                }
                                map[x - 2, y].liquidType(tile5.liquidType());
                                if (map[x - 2, y].liquid != (byte)num)
                                {
                                    map[x - 2, y].liquid = (byte)num;
                                    map.AddWater(x - 2, y);
                                }
                                else
                                {
                                    num4++;
                                }
                                map[x + 2, y].liquidType(tile5.liquidType());
                                if (map[x + 2, y].liquid != (byte)num)
                                {
                                    map[x + 2, y].liquid = (byte)num;
                                    map.AddWater(x + 2, y);
                                }
                                else
                                {
                                    num4++;
                                }
                                if (tile.liquid != (byte)num || tile5.liquid != (byte)num)
                                {
                                    map.AddWater(x - 1, y);
                                }
                                if (tile2.liquid != (byte)num || tile5.liquid != (byte)num)
                                {
                                    map.AddWater(x + 1, y);
                                }
                                if (map[x - 2, y].liquid != (byte)num || tile5.liquid != (byte)num)
                                {
                                    map.AddWater(x - 2, y);
                                }
                                if (map[x + 2, y].liquid != (byte)num || tile5.liquid != (byte)num)
                                {
                                    map.AddWater(x + 2, y);
                                }
                                if (num4 != 4 || tile3.liquid <= 0)
                                {
                                    tile5.liquid = (byte)num;
                                }
                            }
                        }
                        else if (flag4)
                        {
                            num = tile.liquid + tile2.liquid + map[x - 2, y].liquid + tile5.liquid + num2;
                            num = (float)Math.Round(num / 4f);
                            tile.liquidType(tile5.liquidType());
                            if (tile.liquid != (byte)num || tile5.liquid != (byte)num)
                            {
                                tile.liquid = (byte)num;
                                map.AddWater(x - 1, y);
                            }
                            tile2.liquidType(tile5.liquidType());
                            if (tile2.liquid != (byte)num || tile5.liquid != (byte)num)
                            {
                                tile2.liquid = (byte)num;
                                map.AddWater(x + 1, y);
                            }
                            map[x - 2, y].liquidType(tile5.liquidType());
                            if (map[x - 2, y].liquid != (byte)num || tile5.liquid != (byte)num)
                            {
                                map[x - 2, y].liquid = (byte)num;
                                map.AddWater(x - 2, y);
                            }
                            tile5.liquid = (byte)num;
                        }
                        else if (flag5)
                        {
                            num = tile.liquid + tile2.liquid + map[x + 2, y].liquid + tile5.liquid + num2;
                            num = (float)Math.Round(num / 4f);
                            tile.liquidType(tile5.liquidType());
                            if (tile.liquid != (byte)num || tile5.liquid != (byte)num)
                            {
                                tile.liquid = (byte)num;
                                map.AddWater(x - 1, y);
                            }
                            tile2.liquidType(tile5.liquidType());
                            if (tile2.liquid != (byte)num || tile5.liquid != (byte)num)
                            {
                                tile2.liquid = (byte)num;
                                map.AddWater(x + 1, y);
                            }
                            map[x + 2, y].liquidType(tile5.liquidType());
                            if (map[x + 2, y].liquid != (byte)num || tile5.liquid != (byte)num)
                            {
                                map[x + 2, y].liquid = (byte)num;
                                map.AddWater(x + 2, y);
                            }
                            tile5.liquid = (byte)num;
                        }
                        else
                        {
                            num = tile.liquid + tile2.liquid + tile5.liquid + num2;
                            num = (float)Math.Round(num / 3f);
                            if (num == 254f && WorldGen.genRand.Next(30) == 0)
                            {
                                num = 255f;
                            }
                            tile.liquidType(tile5.liquidType());
                            if (tile.liquid != (byte)num)
                            {
                                tile.liquid = (byte)num;
                                map.AddWater(x - 1, y);
                            }
                            tile2.liquidType(tile5.liquidType());
                            if (tile2.liquid != (byte)num)
                            {
                                tile2.liquid = (byte)num;
                                map.AddWater(x + 1, y);
                            }
                            tile5.liquid = (byte)num;
                        }
                    }
                    else if (flag2)
                    {
                        num = tile.liquid + tile5.liquid + num2;
                        num = (float)Math.Round(num / 2f);
                        if (tile.liquid != (byte)num)
                        {
                            tile.liquid = (byte)num;
                        }
                        tile.liquidType(tile5.liquidType());
                        if (tile5.liquid != (byte)num || tile.liquid != (byte)num)
                        {
                            map.AddWater(x - 1, y);
                        }
                        tile5.liquid = (byte)num;
                    }
                    else if (flag3)
                    {
                        num = tile2.liquid + tile5.liquid + num2;
                        num = (float)Math.Round(num / 2f);
                        if (tile2.liquid != (byte)num)
                        {
                            tile2.liquid = (byte)num;
                        }
                        tile2.liquidType(tile5.liquidType());
                        if (tile5.liquid != (byte)num || tile2.liquid != (byte)num)
                        {
                            map.AddWater(x + 1, y);
                        }
                        tile5.liquid = (byte)num;
                    }
                }
                if (tile5.liquid != liquid)
                {
                    if (tile5.liquid == 254 && liquid == byte.MaxValue)
                    {
                        if (map.quickSettle)
                        {
                            tile5.liquid = byte.MaxValue;
                            kill++;
                        }
                        else
                        {
                            kill++;
                        }
                    }
                    else
                    {
                        map.AddWater(x, y - 1);
                        kill = 0;
                    }
                }
                else
                {
                    kill++;
                }
            }

        }
        [MessagePackObject]
        public class LiquidBuffer
        {
            [Key(0)]
            public int x;
            [Key(1)]
            public int y;
        }
    }
    [MessagePackObject]
    [Serializable]
    [StructLayout(LayoutKind.Sequential, Pack = 1, Size = 13)]
    public struct StructTile
    {
        [Key(0)]
        public byte wall;
        [Key(1)]
        public byte liquid;
        [Key(2)]
        public byte bTileHeader;
        [Key(3)]
        public byte bTileHeader2;
        [Key(4)]
        public byte bTileHeader3;
        [Key(5)]
        public ushort type;
        [Key(6)]
        public short sTileHeader;
        [Key(7)]
        public short frameX;
        [Key(8)]
        public short frameY;
    }
    [MessagePackObject(keyAsPropertyName: true)]
    [Serializable]
    public class FakeTileProvider : ITileCollection, IDisposable, ICloneable
    {
        object ICloneable.Clone()
        {
            return this.Clone();
        }
        public FakeTileProvider Clone()
        {
            return (FakeTileProvider)this.MemberwiseClone();
        }
        public StructTile[,] Data;
        public int Width
        {
            get;
        }
        public int Height
        {
            get;
        }

        public ITile this[int X, int Y]
        {
            get
            {
                return new TileReference(Data, X, Y);
            }
            set
            {
                new TileReference(Data, X, Y).CopyFrom(value);
            }
        }
        [SerializationConstructor]
        public FakeTileProvider(int Width, int Height)
        {
            this.Width = Width;
            this.Height = Height;
            Data = new StructTile[Width, Height];
        }

        public void Dispose()
        {
            if (Data == null)
            {
                return;
            }
            int length = Data.GetLength(0);
            int length2 = Data.GetLength(1);
            for (int i = 0; i < length; i++)
            {
                for (int j = 0; j < length2; j++)
                {
                    Data[i, j].bTileHeader = 0;
                    Data[i, j].bTileHeader2 = 0;
                    Data[i, j].bTileHeader3 = 0;
                    Data[i, j].frameX = 0;
                    Data[i, j].frameY = 0;
                    Data[i, j].liquid = 0;
                    Data[i, j].type = 0;
                    Data[i, j].wall = 0;
                }
            }
            Data = null;
        }
    }
    [MessagePackObject]
    public sealed class TileReference : ITile
    {
        [Key(0)]
        public const int Type_Solid = 0;
        [Key(1)]
        public const int Type_Halfbrick = 1;
        [Key(2)]
        public const int Type_SlopeDownRight = 2;
        [Key(3)]
        public const int Type_SlopeDownLeft = 3;
        [Key(4)]
        public const int Type_SlopeUpRight = 4;
        [Key(5)]
        public const int Type_SlopeUpLeft = 5;
        [Key(6)]
        public const int Liquid_Water = 0;
        [Key(7)]
        public const int Liquid_Lava = 1;
        [Key(8)]
        public const int Liquid_Honey = 2;
        [Key(9)]
        internal readonly int X;
        [Key(10)]
        internal readonly int Y;
        [Key(11)]
        private StructTile[,] Data;
        [Key(12)]
        private const double ActNum = 0.4;

        public ushort type
        {
            get
            {
                try { return Data[X, Y].type; } catch { return 0; }
            }
            set
            {
                Data[X, Y].type = value;
            }
        }

        public byte wall
        {
            get
            {
                return Data[X, Y].wall;
            }
            set
            {
                Data[X, Y].wall = value;
            }
        }

        public byte liquid
        {
            get
            {
                return Data[X, Y].liquid;
            }
            set
            {
                Data[X, Y].liquid = value;
            }
        }

        public short frameX
        {
            get
            {
                return Data[X, Y].frameX;
            }
            set
            {
                Data[X, Y].frameX = value;
            }
        }

        public short frameY
        {
            get
            {
                return Data[X, Y].frameY;
            }
            set
            {
                Data[X, Y].frameY = value;
            }
        }

        public short sTileHeader
        {
            get
            {
                try { return Data[X, Y].sTileHeader; } catch { return 0; }
            }
            set
            {
                Data[X, Y].sTileHeader = value;
            }
        }

        public byte bTileHeader
        {
            get
            {
                return Data[X, Y].bTileHeader;
            }
            set
            {
                Data[X, Y].bTileHeader = value;
            }
        }

        public byte bTileHeader2
        {
            get
            {
                return Data[X, Y].bTileHeader2;
            }
            set
            {
                Data[X, Y].bTileHeader2 = value;
            }
        }

        public byte bTileHeader3
        {
            get
            {
                return Data[X, Y].bTileHeader3;
            }
            set
            {
                Data[X, Y].bTileHeader3 = value;
            }
        }

        public int collisionType
        {
            get
            {
                if (!active())
                {
                    return 0;
                }
                if (halfBrick())
                {
                    return 2;
                }
                if (slope() > 0)
                {
                    return 2 + slope();
                }
                if (Main.tileSolid[type] && !Main.tileSolidTop[type])
                {
                    return 1;
                }
                return -1;
            }
        }

        ushort ITile.wall { get => wall; set => wall = (byte)value; }

        public TileReference(StructTile[,] Data, int X, int Y)
        {
            this.X = X;
            this.Y = Y;
            this.Data = Data;
        }

        public void Initialise()
        {
            type = 0;
            wall = 0;
            liquid = 0;
            sTileHeader = 0;
            bTileHeader = 0;
            bTileHeader2 = 0;
            bTileHeader3 = 0;
            frameX = 0;
            frameY = 0;
        }

        public void ClearEverything()
        {
            type = 0;
            wall = 0;
            ClearMetadata();
        }

        public void ClearTile()
        {
            slope(0);
            halfBrick(HalfBrick: false);
            active(Active: false);
        }

        public void ClearMetadata()
        {
            liquid = 0;
            sTileHeader = 0;
            bTileHeader = 0;
            bTileHeader2 = 0;
            bTileHeader3 = 0;
            frameX = 0;
            frameY = 0;
        }

        public void ResetToType(ushort Type)
        {
            liquid = 0;
            sTileHeader = 32;
            bTileHeader = 0;
            bTileHeader2 = 0;
            bTileHeader3 = 0;
            frameX = 0;
            frameY = 0;
            type = Type;
        }

        public void CopyFrom(ITile From)
        {
            type = From.type;
            wall = (byte)From.wall;
            liquid = From.liquid;
            sTileHeader = From.sTileHeader;
            bTileHeader = From.bTileHeader;
            bTileHeader2 = From.bTileHeader2;
            bTileHeader3 = From.bTileHeader3;
            frameX = From.frameX;
            frameY = From.frameY;
        }

        public bool isTheSameAs(ITile Tile)
        {
            if (Tile == null || sTileHeader != Tile.sTileHeader)
            {
                return false;
            }
            if (active())
            {
                if (type != Tile.type)
                {
                    return false;
                }
                if (Main.tileFrameImportant[type] && (frameX != Tile.frameX || frameY != Tile.frameY))
                {
                    return false;
                }
            }
            if (wall != Tile.wall || liquid != Tile.liquid)
            {
                return false;
            }
            if (Tile.liquid == 0)
            {
                if (wallColor() != Tile.wallColor())
                {
                    return false;
                }
                if (wire4() != Tile.wire4())
                {
                    return false;
                }
            }
            else if (bTileHeader != Tile.bTileHeader)
            {
                return false;
            }
            return true;
        }

        public Color actColor(Color oldColor)
        {
            if (!inActive())
            {
                return oldColor;
            }
            return new Color((byte)(0.4 * (double)(int)oldColor.R), (byte)(0.4 * (double)(int)oldColor.G), (byte)(0.4 * (double)(int)oldColor.B), oldColor.A);
        }

        public bool lava()
        {
            return (bTileHeader & 0x20) == 32;
        }

        public void lava(bool Lava)
        {
            if (Lava)
            {
                bTileHeader = (byte)((bTileHeader & 0x9Fu) | 0x20u);
            }
            else
            {
                bTileHeader &= 223;
            }
        }

        public bool honey()
        {
            return (bTileHeader & 0x40) == 64;
        }

        public void honey(bool Honey)
        {
            if (Honey)
            {
                bTileHeader = (byte)((bTileHeader & 0x9Fu) | 0x40u);
            }
            else
            {
                bTileHeader &= 191;
            }
        }

        public byte liquidType()
        {
            return (byte)((bTileHeader & 0x60) >> 5);
        }

        public void liquidType(int LiquidType)
        {
            switch (LiquidType)
            {
                case 0:
                    bTileHeader &= 159;
                    break;
                case 1:
                    lava(Lava: true);
                    break;
                case 2:
                    honey(Honey: true);
                    break;
            }
        }

        public bool checkingLiquid()
        {
            return (bTileHeader3 & 8) == 8;
        }

        public void checkingLiquid(bool CheckingLiquid)
        {
            if (CheckingLiquid)
            {
                bTileHeader3 |= 8;
            }
            else
            {
                bTileHeader3 &= 247;
            }
        }

        public bool skipLiquid()
        {
            return (bTileHeader3 & 0x10) == 16;
        }

        public void skipLiquid(bool SkipLiquid)
        {
            if (SkipLiquid)
            {
                bTileHeader3 |= 16;
            }
            else
            {
                bTileHeader3 &= 239;
            }
        }

        public byte frameNumber()
        {
            return (byte)((bTileHeader2 & 0x30) >> 4);
        }

        public void frameNumber(byte FrameNumber)
        {
            bTileHeader2 = (byte)((bTileHeader2 & 0xCFu) | (uint)((FrameNumber & 3) << 4));
        }

        public byte wallFrameNumber()
        {
            return (byte)((bTileHeader2 & 0xC0) >> 6);
        }

        public void wallFrameNumber(byte WallFrameNumber)
        {
            bTileHeader2 = (byte)((bTileHeader2 & 0x3Fu) | (uint)((WallFrameNumber & 3) << 6));
        }

        public int wallFrameX()
        {
            return (bTileHeader2 & 0xF) * 36;
        }

        public void wallFrameX(int WallFrameX)
        {
            bTileHeader2 = (byte)((bTileHeader2 & 0xF0u) | ((uint)(WallFrameX / 36) & 0xFu));
        }

        public int wallFrameY()
        {
            return (bTileHeader3 & 7) * 36;
        }

        public void wallFrameY(int WallFrameY)
        {
            bTileHeader3 = (byte)((bTileHeader3 & 0xF8u) | ((uint)(WallFrameY / 36) & 7u));
        }

        public byte color()
        {
            return (byte)((uint)sTileHeader & 0x1Fu);
        }

        public void color(byte Color)
        {
            if (Color > 30)
            {
                Color = 30;
            }
            sTileHeader = (short)((sTileHeader & 0xFFE0) | Color);
        }

        public byte wallColor()
        {
            return (byte)(bTileHeader & 0x1Fu);
        }

        public void wallColor(byte WallColor)
        {
            if (WallColor > 30)
            {
                WallColor = 30;
            }
            bTileHeader = (byte)((bTileHeader & 0xE0u) | WallColor);
        }

        public bool active()
        {
            return (sTileHeader & 0x20) == 32;
        }

        public void active(bool Active)
        {
            if (Active)
            {
                sTileHeader |= 32;
            }
            else
            {
                sTileHeader = (short)(sTileHeader & 0xFFDF);
            }
        }

        public bool inActive()
        {
            return (sTileHeader & 0x40) == 64;
        }

        public void inActive(bool InActive)
        {
            if (InActive)
            {
                sTileHeader |= 64;
            }
            else
            {
                sTileHeader = (short)(sTileHeader & 0xFFBF);
            }
        }

        public bool nactive()
        {
            return (sTileHeader & 0x60) == 32;
        }

        public bool wire()
        {
            return (sTileHeader & 0x80) == 128;
        }

        public void wire(bool Wire)
        {
            if (Wire)
            {
                sTileHeader |= 128;
            }
            else
            {
                sTileHeader = (short)(sTileHeader & 0xFF7F);
            }
        }

        public bool wire2()
        {
            return (sTileHeader & 0x100) == 256;
        }

        public void wire2(bool Wire2)
        {
            if (Wire2)
            {
                sTileHeader |= 256;
            }
            else
            {
                sTileHeader = (short)(sTileHeader & 0xFEFF);
            }
        }

        public bool wire3()
        {
            return (sTileHeader & 0x200) == 512;
        }

        public void wire3(bool Wire3)
        {
            if (Wire3)
            {
                sTileHeader |= 512;
            }
            else
            {
                sTileHeader = (short)(sTileHeader & 0xFDFF);
            }
        }

        public bool wire4()
        {
            return (bTileHeader & 0x80) == 128;
        }

        public void wire4(bool Wire4)
        {
            if (Wire4)
            {
                bTileHeader |= 128;
            }
            else
            {
                bTileHeader &= 127;
            }
        }

        public bool actuator()
        {
            return (sTileHeader & 0x800) == 2048;
        }

        public void actuator(bool Actuator)
        {
            if (Actuator)
            {
                sTileHeader |= 2048;
            }
            else
            {
                sTileHeader = (short)(sTileHeader & 0xF7FF);
            }
        }

        public bool halfBrick()
        {
            return (sTileHeader & 0x400) == 1024;
        }

        public void halfBrick(bool HalfBrick)
        {
            if (HalfBrick)
            {
                sTileHeader |= 1024;
            }
            else
            {
                sTileHeader = (short)(sTileHeader & 0xFBFF);
            }
        }

        public byte slope()
        {
            return (byte)((sTileHeader & 0x7000) >> 12);
        }

        public void slope(byte Slope)
        {
            sTileHeader = (short)((sTileHeader & 0x8FFF) | ((Slope & 7) << 12));
        }

        public bool topSlope()
        {
            byte b = slope();
            if (b != 1)
            {
                return b == 2;
            }
            return true;
        }

        public bool bottomSlope()
        {
            byte b = slope();
            if (b != 3)
            {
                return b == 4;
            }
            return true;
        }

        public bool leftSlope()
        {
            byte b = slope();
            if (b != 2)
            {
                return b == 4;
            }
            return true;
        }

        public bool rightSlope()
        {
            byte b = slope();
            if (b != 1)
            {
                return b == 3;
            }
            return true;
        }

        public bool HasSameSlope(ITile Tile)
        {
            return (sTileHeader & 0x7400) == (Tile.sTileHeader & 0x7400);
        }

        public int blockType()
        {
            if (halfBrick())
            {
                return 1;
            }
            int num = slope();
            if (num > 0)
            {
                num++;
            }
            return num;
        }

        public object Clone()
        {
            return MemberwiseClone();
        }

        public new string ToString()
        {
            return $"Tile Type:{type} Active:{active()} " + $"Wall:{wall} Slope:{slope()} fX:{frameX} fY:{frameY}";
        }

        public void actColor(ref Vector3 oldColor)
        {

        }

        public void Clear(TileDataType types)
        {
        }
    }
    [MessagePackObject]
    public class TileObjectPreviewData
    {
        [Key(0)]
        public ushort _type;
        [Key(1)]
        public short _style;
        [Key(2)]
        public int _alternate;
        [Key(3)]
        public int _random;
        [Key(4)]
        public bool _active;
        [Key(5)]
        public Point16 _size;
        [Key(6)]
        public Point16 _coordinates;
        [Key(7)]
        public Point16 _objectStart;
        [Key(8)]
        public int[,] _data;
        [Key(9)]
        public Point16 _dataSize;
        [Key(10)]
        public float _percentValid;
        [Key(11)]
        public static TileObjectPreviewData placementCache;
        [Key(12)]
        public static TileObjectPreviewData randomCache;
        [Key(13)]
        public const int None = 0;
        [Key(14)]
        public const int ValidSpot = 1;
        [Key(15)]
        public const int InvalidSpot = 2;
        [Key(16)]
        public bool Active
        {
            get
            {
                return _active;
            }
            set
            {
                _active = value;
            }
        }
        [Key(17)]
        public ushort Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        [Key(18)]
        public short Style
        {
            get
            {
                return _style;
            }
            set
            {
                _style = value;
            }
        }
        [Key(19)]
        public int Alternate
        {
            get
            {
                return _alternate;
            }
            set
            {
                _alternate = value;
            }
        }
        [Key(20)]
        public int Random
        {
            get
            {
                return _random;
            }
            set
            {
                _random = value;
            }
        }
        [Key(21)]
        public Point16 Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (value.X <= 0 || value.Y <= 0)
                {
                    return;
                }
                if (value.X > _dataSize.X || value.Y > _dataSize.Y)
                {
                    int num = (value.X > _dataSize.X) ? value.X : _dataSize.X;
                    int num2 = (value.Y > _dataSize.Y) ? value.Y : _dataSize.Y;
                    int[,] array = new int[num, num2];
                    if (_data != null)
                    {
                        for (int i = 0; i < _dataSize.X; i++)
                        {
                            for (int j = 0; j < _dataSize.Y; j++)
                            {
                                array[i, j] = _data[i, j];
                            }
                        }
                    }
                    _data = array;
                    _dataSize = new Point16(num, num2);
                }
                _size = value;
            }
        }
        [Key(22)]
        public Point16 Coordinates
        {
            get
            {
                return _coordinates;
            }
            set
            {
                _coordinates = value;
            }
        }
        [Key(23)]
        public Point16 ObjectStart
        {
            get
            {
                return _objectStart;
            }
            set
            {
                _objectStart = value;
            }
        }

        public int this[int x, int y]
        {
            get
            {
                if (x < 0 || y < 0 || x >= _size.X || y >= _size.Y)
                {
                    throw new IndexOutOfRangeException();
                }
                return _data[x, y];
            }
            set
            {
                if (x < 0 || y < 0 || x >= _size.X || y >= _size.Y)
                {
                    throw new IndexOutOfRangeException();
                }
                _data[x, y] = value;
            }
        }

        public void Reset()
        {
            _active = false;
            _size = Point16.Zero;
            _coordinates = Point16.Zero;
            _objectStart = Point16.Zero;
            _percentValid = 0f;
            _type = 0;
            _style = 0;
            _alternate = -1;
            _random = -1;
            if (_data != null)
            {
                Array.Clear(_data, 0, _dataSize.X * _dataSize.Y);
            }
        }

        public void CopyFrom(TileObjectPreviewData copy)
        {
            _type = copy._type;
            _style = copy._style;
            _alternate = copy._alternate;
            _random = copy._random;
            _active = copy._active;
            _size = copy._size;
            _coordinates = copy._coordinates;
            _objectStart = copy._objectStart;
            _percentValid = copy._percentValid;
            if (_data == null)
            {
                _data = new int[copy._dataSize.X, copy._dataSize.Y];
                _dataSize = copy._dataSize;
            }
            else
            {
                Array.Clear(_data, 0, _data.Length);
            }
            if (_dataSize.X < copy._dataSize.X || _dataSize.Y < copy._dataSize.Y)
            {
                int num = (copy._dataSize.X > _dataSize.X) ? copy._dataSize.X : _dataSize.X;
                int num2 = (copy._dataSize.Y > _dataSize.Y) ? copy._dataSize.Y : _dataSize.Y;
                _data = new int[num, num2];
                _dataSize = new Point16(num, num2);
            }
            for (int i = 0; i < copy._dataSize.X; i++)
            {
                for (int j = 0; j < copy._dataSize.Y; j++)
                {
                    _data[i, j] = copy._data[i, j];
                }
            }
        }

        public void AllInvalid()
        {
            for (int i = 0; i < _size.X; i++)
            {
                for (int j = 0; j < _size.Y; j++)
                {
                    if (_data[i, j] != 0)
                    {
                        _data[i, j] = 2;
                    }
                }
            }
        }
    }
}
